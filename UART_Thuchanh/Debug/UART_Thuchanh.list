
UART_Thuchanh.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005648  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  080057e8  080057e8  000067e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ba8  08005ba8  000071d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005ba8  08005ba8  00006ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bb0  08005bb0  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bb0  08005bb0  00006bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005bb4  08005bb4  00006bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08005bb8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08005d8c  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005d8c  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000077de  00000000  00000000  00007204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000153e  00000000  00000000  0000e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f0  00000000  00000000  0000ff20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000053f  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162ba  00000000  00000000  00010b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000883a  00000000  00000000  00026e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087612  00000000  00000000  0002f643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6c55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c8c  00000000  00000000  000b6c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b9924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080057d0 	.word	0x080057d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080057d0 	.word	0x080057d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96a 	b.w	8000ea4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	460c      	mov	r4, r1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d14e      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf4:	4694      	mov	ip, r2
 8000bf6:	458c      	cmp	ip, r1
 8000bf8:	4686      	mov	lr, r0
 8000bfa:	fab2 f282 	clz	r2, r2
 8000bfe:	d962      	bls.n	8000cc6 <__udivmoddi4+0xde>
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0320 	rsb	r3, r2, #32
 8000c06:	4091      	lsls	r1, r2
 8000c08:	fa20 f303 	lsr.w	r3, r0, r3
 8000c0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c10:	4319      	orrs	r1, r3
 8000c12:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c1a:	fa1f f68c 	uxth.w	r6, ip
 8000c1e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb07 1114 	mls	r1, r7, r4, r1
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb04 f106 	mul.w	r1, r4, r6
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3e:	f080 8112 	bcs.w	8000e66 <__udivmoddi4+0x27e>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 810f 	bls.w	8000e66 <__udivmoddi4+0x27e>
 8000c48:	3c02      	subs	r4, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a59      	subs	r1, r3, r1
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c56:	fb07 1110 	mls	r1, r7, r0, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb00 f606 	mul.w	r6, r0, r6
 8000c62:	429e      	cmp	r6, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x94>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6e:	f080 80fc 	bcs.w	8000e6a <__udivmoddi4+0x282>
 8000c72:	429e      	cmp	r6, r3
 8000c74:	f240 80f9 	bls.w	8000e6a <__udivmoddi4+0x282>
 8000c78:	4463      	add	r3, ip
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	1b9b      	subs	r3, r3, r6
 8000c7e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c82:	2100      	movs	r1, #0
 8000c84:	b11d      	cbz	r5, 8000c8e <__udivmoddi4+0xa6>
 8000c86:	40d3      	lsrs	r3, r2
 8000c88:	2200      	movs	r2, #0
 8000c8a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d905      	bls.n	8000ca2 <__udivmoddi4+0xba>
 8000c96:	b10d      	cbz	r5, 8000c9c <__udivmoddi4+0xb4>
 8000c98:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e7f5      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000ca2:	fab3 f183 	clz	r1, r3
 8000ca6:	2900      	cmp	r1, #0
 8000ca8:	d146      	bne.n	8000d38 <__udivmoddi4+0x150>
 8000caa:	42a3      	cmp	r3, r4
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0xcc>
 8000cae:	4290      	cmp	r0, r2
 8000cb0:	f0c0 80f0 	bcc.w	8000e94 <__udivmoddi4+0x2ac>
 8000cb4:	1a86      	subs	r6, r0, r2
 8000cb6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	2d00      	cmp	r5, #0
 8000cbe:	d0e6      	beq.n	8000c8e <__udivmoddi4+0xa6>
 8000cc0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc4:	e7e3      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	f040 8090 	bne.w	8000dec <__udivmoddi4+0x204>
 8000ccc:	eba1 040c 	sub.w	r4, r1, ip
 8000cd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd4:	fa1f f78c 	uxth.w	r7, ip
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cde:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cea:	fb07 f006 	mul.w	r0, r7, r6
 8000cee:	4298      	cmp	r0, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x11c>
 8000cf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x11a>
 8000cfc:	4298      	cmp	r0, r3
 8000cfe:	f200 80cd 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000d02:	4626      	mov	r6, r4
 8000d04:	1a1c      	subs	r4, r3, r0
 8000d06:	fa1f f38e 	uxth.w	r3, lr
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d12:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d16:	fb00 f707 	mul.w	r7, r0, r7
 8000d1a:	429f      	cmp	r7, r3
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x148>
 8000d1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x146>
 8000d28:	429f      	cmp	r7, r3
 8000d2a:	f200 80b0 	bhi.w	8000e8e <__udivmoddi4+0x2a6>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	1bdb      	subs	r3, r3, r7
 8000d32:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d36:	e7a5      	b.n	8000c84 <__udivmoddi4+0x9c>
 8000d38:	f1c1 0620 	rsb	r6, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d42:	431f      	orrs	r7, r3
 8000d44:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d48:	fa04 f301 	lsl.w	r3, r4, r1
 8000d4c:	ea43 030c 	orr.w	r3, r3, ip
 8000d50:	40f4      	lsrs	r4, r6
 8000d52:	fa00 f801 	lsl.w	r8, r0, r1
 8000d56:	0c38      	lsrs	r0, r7, #16
 8000d58:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d5c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	fb00 441e 	mls	r4, r0, lr, r4
 8000d68:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d6c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d70:	45a1      	cmp	r9, r4
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1a6>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7e:	f080 8084 	bcs.w	8000e8a <__udivmoddi4+0x2a2>
 8000d82:	45a1      	cmp	r9, r4
 8000d84:	f240 8081 	bls.w	8000e8a <__udivmoddi4+0x2a2>
 8000d88:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d8c:	443c      	add	r4, r7
 8000d8e:	eba4 0409 	sub.w	r4, r4, r9
 8000d92:	fa1f f983 	uxth.w	r9, r3
 8000d96:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d9a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da6:	45a4      	cmp	ip, r4
 8000da8:	d907      	bls.n	8000dba <__udivmoddi4+0x1d2>
 8000daa:	193c      	adds	r4, r7, r4
 8000dac:	f103 30ff 	add.w	r0, r3, #4294967295
 8000db0:	d267      	bcs.n	8000e82 <__udivmoddi4+0x29a>
 8000db2:	45a4      	cmp	ip, r4
 8000db4:	d965      	bls.n	8000e82 <__udivmoddi4+0x29a>
 8000db6:	3b02      	subs	r3, #2
 8000db8:	443c      	add	r4, r7
 8000dba:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dbe:	fba0 9302 	umull	r9, r3, r0, r2
 8000dc2:	eba4 040c 	sub.w	r4, r4, ip
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	46ce      	mov	lr, r9
 8000dca:	469c      	mov	ip, r3
 8000dcc:	d351      	bcc.n	8000e72 <__udivmoddi4+0x28a>
 8000dce:	d04e      	beq.n	8000e6e <__udivmoddi4+0x286>
 8000dd0:	b155      	cbz	r5, 8000de8 <__udivmoddi4+0x200>
 8000dd2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dda:	fa04 f606 	lsl.w	r6, r4, r6
 8000dde:	40cb      	lsrs	r3, r1
 8000de0:	431e      	orrs	r6, r3
 8000de2:	40cc      	lsrs	r4, r1
 8000de4:	e9c5 6400 	strd	r6, r4, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	e750      	b.n	8000c8e <__udivmoddi4+0xa6>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f103 	lsr.w	r1, r0, r3
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dfc:	4094      	lsls	r4, r2
 8000dfe:	430c      	orrs	r4, r1
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e08:	fa1f f78c 	uxth.w	r7, ip
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3110 	mls	r1, r8, r0, r3
 8000e14:	0c23      	lsrs	r3, r4, #16
 8000e16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1a:	fb00 f107 	mul.w	r1, r0, r7
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x24c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e2a:	d22c      	bcs.n	8000e86 <__udivmoddi4+0x29e>
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d92a      	bls.n	8000e86 <__udivmoddi4+0x29e>
 8000e30:	3802      	subs	r0, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	1a5b      	subs	r3, r3, r1
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e3c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e44:	fb01 f307 	mul.w	r3, r1, r7
 8000e48:	42a3      	cmp	r3, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x276>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e54:	d213      	bcs.n	8000e7e <__udivmoddi4+0x296>
 8000e56:	42a3      	cmp	r3, r4
 8000e58:	d911      	bls.n	8000e7e <__udivmoddi4+0x296>
 8000e5a:	3902      	subs	r1, #2
 8000e5c:	4464      	add	r4, ip
 8000e5e:	1ae4      	subs	r4, r4, r3
 8000e60:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e64:	e739      	b.n	8000cda <__udivmoddi4+0xf2>
 8000e66:	4604      	mov	r4, r0
 8000e68:	e6f0      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	e706      	b.n	8000c7c <__udivmoddi4+0x94>
 8000e6e:	45c8      	cmp	r8, r9
 8000e70:	d2ae      	bcs.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e72:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e76:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e7a:	3801      	subs	r0, #1
 8000e7c:	e7a8      	b.n	8000dd0 <__udivmoddi4+0x1e8>
 8000e7e:	4631      	mov	r1, r6
 8000e80:	e7ed      	b.n	8000e5e <__udivmoddi4+0x276>
 8000e82:	4603      	mov	r3, r0
 8000e84:	e799      	b.n	8000dba <__udivmoddi4+0x1d2>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e7d4      	b.n	8000e34 <__udivmoddi4+0x24c>
 8000e8a:	46d6      	mov	lr, sl
 8000e8c:	e77f      	b.n	8000d8e <__udivmoddi4+0x1a6>
 8000e8e:	4463      	add	r3, ip
 8000e90:	3802      	subs	r0, #2
 8000e92:	e74d      	b.n	8000d30 <__udivmoddi4+0x148>
 8000e94:	4606      	mov	r6, r0
 8000e96:	4623      	mov	r3, r4
 8000e98:	4608      	mov	r0, r1
 8000e9a:	e70f      	b.n	8000cbc <__udivmoddi4+0xd4>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	4463      	add	r3, ip
 8000ea0:	e730      	b.n	8000d04 <__udivmoddi4+0x11c>
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_idiv0>:
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eae:	f000 fae5 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb2:	f000 f899 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb6:	f000 f91f 	bl	80010f8 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8000eba:	f000 f8f3 	bl	80010a4 <MX_USART6_UART_Init>
  	HAL_UART_Transmit(&huart6, (uint8_t*)"H", 1, 1000);
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4940      	ldr	r1, [pc, #256]	@ (8000fc8 <main+0x120>)
 8000ec6:	4841      	ldr	r0, [pc, #260]	@ (8000fcc <main+0x124>)
 8000ec8:	f001 fa80 	bl	80023cc <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"\n", 1, 1000);
 8000ecc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	493f      	ldr	r1, [pc, #252]	@ (8000fd0 <main+0x128>)
 8000ed4:	483d      	ldr	r0, [pc, #244]	@ (8000fcc <main+0x124>)
 8000ed6:	f001 fa79 	bl	80023cc <HAL_UART_Transmit>
    __NOP();
 8000eda:	bf00      	nop

    HAL_UART_Transmit(&huart6, (uint8_t*)"MCU_Learning", 11, 1000);
 8000edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee0:	220b      	movs	r2, #11
 8000ee2:	493c      	ldr	r1, [pc, #240]	@ (8000fd4 <main+0x12c>)
 8000ee4:	4839      	ldr	r0, [pc, #228]	@ (8000fcc <main+0x124>)
 8000ee6:	f001 fa71 	bl	80023cc <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"\n", 1, 1000);
 8000eea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4937      	ldr	r1, [pc, #220]	@ (8000fd0 <main+0x128>)
 8000ef2:	4836      	ldr	r0, [pc, #216]	@ (8000fcc <main+0x124>)
 8000ef4:	f001 fa6a 	bl	80023cc <HAL_UART_Transmit>
    __NOP();
 8000ef8:	bf00      	nop

    uint16_t intnumber = 1000;
 8000efa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000efe:	84bb      	strh	r3, [r7, #36]	@ 0x24
    char intarray[5] = {0};
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	2300      	movs	r3, #0
 8000f06:	773b      	strb	r3, [r7, #28]
    sprintf(intarray, "%d", intnumber);
 8000f08:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	4932      	ldr	r1, [pc, #200]	@ (8000fd8 <main+0x130>)
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fb31 	bl	8003578 <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)intarray, 4, 1000);
 8000f16:	f107 0118 	add.w	r1, r7, #24
 8000f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f1e:	2204      	movs	r2, #4
 8000f20:	482a      	ldr	r0, [pc, #168]	@ (8000fcc <main+0x124>)
 8000f22:	f001 fa53 	bl	80023cc <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"\n", 1, 1000);
 8000f26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4928      	ldr	r1, [pc, #160]	@ (8000fd0 <main+0x128>)
 8000f2e:	4827      	ldr	r0, [pc, #156]	@ (8000fcc <main+0x124>)
 8000f30:	f001 fa4c 	bl	80023cc <HAL_UART_Transmit>
    __NOP();
 8000f34:	bf00      	nop

    float floatnumber = 24.8;
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <main+0x134>)
 8000f38:	623b      	str	r3, [r7, #32]
    char floatarray[5] = {0};
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	753b      	strb	r3, [r7, #20]
    sprintf(floatarray, "%.1f", floatnumber);
 8000f42:	6a38      	ldr	r0, [r7, #32]
 8000f44:	f7ff fb08 	bl	8000558 <__aeabi_f2d>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	f107 0010 	add.w	r0, r7, #16
 8000f50:	4923      	ldr	r1, [pc, #140]	@ (8000fe0 <main+0x138>)
 8000f52:	f002 fb11 	bl	8003578 <siprintf>
    HAL_UART_Transmit(&huart6, (uint8_t*)floatarray, 4, 1000);
 8000f56:	f107 0110 	add.w	r1, r7, #16
 8000f5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f5e:	2204      	movs	r2, #4
 8000f60:	481a      	ldr	r0, [pc, #104]	@ (8000fcc <main+0x124>)
 8000f62:	f001 fa33 	bl	80023cc <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart6, (uint8_t*)"\n", 1, 1000);
 8000f66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4918      	ldr	r1, [pc, #96]	@ (8000fd0 <main+0x128>)
 8000f6e:	4817      	ldr	r0, [pc, #92]	@ (8000fcc <main+0x124>)
 8000f70:	f001 fa2c 	bl	80023cc <HAL_UART_Transmit>
    __NOP();
 8000f74:	bf00      	nop

    uint8_t counter = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    char counterarray[15] = {0};
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	f8c3 2007 	str.w	r2, [r3, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(counterarray, "Counter: %03d\r\n", counter);
 8000f8c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000f90:	463b      	mov	r3, r7
 8000f92:	4914      	ldr	r1, [pc, #80]	@ (8000fe4 <main+0x13c>)
 8000f94:	4618      	mov	r0, r3
 8000f96:	f002 faef 	bl	8003578 <siprintf>
	  HAL_UART_Transmit(&huart6, (uint8_t*)counterarray, strlen(counterarray), 1000);
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff f96f 	bl	8000280 <strlen>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	4639      	mov	r1, r7
 8000fa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fac:	4807      	ldr	r0, [pc, #28]	@ (8000fcc <main+0x124>)
 8000fae:	f001 fa0d 	bl	80023cc <HAL_UART_Transmit>
	  counter++;
 8000fb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	  HAL_Delay(1000);
 8000fbc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fc0:	f000 face 	bl	8001560 <HAL_Delay>
	  sprintf(counterarray, "Counter: %03d\r\n", counter);
 8000fc4:	bf00      	nop
 8000fc6:	e7e1      	b.n	8000f8c <main+0xe4>
 8000fc8:	080057e8 	.word	0x080057e8
 8000fcc:	200001f0 	.word	0x200001f0
 8000fd0:	080057ec 	.word	0x080057ec
 8000fd4:	080057f0 	.word	0x080057f0
 8000fd8:	08005800 	.word	0x08005800
 8000fdc:	41c66666 	.word	0x41c66666
 8000fe0:	08005804 	.word	0x08005804
 8000fe4:	0800580c 	.word	0x0800580c

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	@ 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	@ 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fb21 	bl	800363e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b22      	ldr	r3, [pc, #136]	@ (800109c <SystemClock_Config+0xb4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <SystemClock_Config+0xb4>)
 8001016:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800101a:	6413      	str	r3, [r2, #64]	@ 0x40
 800101c:	4b1f      	ldr	r3, [pc, #124]	@ (800109c <SystemClock_Config+0xb4>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001028:	2300      	movs	r3, #0
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	4b1c      	ldr	r3, [pc, #112]	@ (80010a0 <SystemClock_Config+0xb8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <SystemClock_Config+0xb8>)
 8001032:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <SystemClock_Config+0xb8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 0320 	add.w	r3, r7, #32
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fd0f 	bl	8001a7c <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001064:	f000 f862 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800106c:	2300      	movs	r3, #0
 800106e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f000 ff72 	bl	8001f6c <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800108e:	f000 f84d 	bl	800112c <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	@ 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <MX_USART6_UART_Init+0x50>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80010ae:	4b10      	ldr	r3, [pc, #64]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_USART6_UART_Init+0x4c>)
 80010dc:	f001 f926 	bl	800232c <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010e6:	f000 f821 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200001f0 	.word	0x200001f0
 80010f4:	40011400 	.word	0x40011400

080010f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b09      	ldr	r3, [pc, #36]	@ (8001128 <MX_GPIO_Init+0x30>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a08      	ldr	r2, [pc, #32]	@ (8001128 <MX_GPIO_Init+0x30>)
 8001108:	f043 0301 	orr.w	r3, r3, #1
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <MX_GPIO_Init+0x30>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0301 	and.w	r3, r3, #1
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	bf00      	nop
 8001136:	e7fd      	b.n	8001134 <Error_Handler+0x8>

08001138 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	4a0f      	ldr	r2, [pc, #60]	@ (8001184 <HAL_MspInit+0x4c>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114c:	6453      	str	r3, [r2, #68]	@ 0x44
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <HAL_MspInit+0x4c>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	603b      	str	r3, [r7, #0]
 800115e:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	4a08      	ldr	r2, [pc, #32]	@ (8001184 <HAL_MspInit+0x4c>)
 8001164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	@ 0x40
 800116a:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_MspInit+0x4c>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_UART_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12c      	bne.n	8001204 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011b4:	f043 0320 	orr.w	r3, r3, #32
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f003 0320 	and.w	r3, r3, #32
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PA11     ------> USART6_TX
    PA12     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011f4:	2308      	movs	r3, #8
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <HAL_UART_MspInit+0x8c>)
 8001200:	f000 fab8 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE END USART6_MspInit 1 */

  }

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40011400 	.word	0x40011400
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <NMI_Handler+0x4>

08001220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <MemManage_Handler+0x4>

08001230 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <UsageFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126e:	f000 f957 	bl	8001520 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}

08001276 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0
  return 1;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_kill>:

int _kill(int pid, int sig)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001290:	f002 fa28 	bl	80036e4 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	2216      	movs	r2, #22
 8001298:	601a      	str	r2, [r3, #0]
  return -1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_exit>:

void _exit (int status)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ae:	f04f 31ff 	mov.w	r1, #4294967295
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffe7 	bl	8001286 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
  }

  return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
  }
  return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001356:	605a      	str	r2, [r3, #4]
  return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	@ (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	@ (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f002 f98c 	bl	80036e4 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	@ (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	20000238 	.word	0x20000238
 8001400:	20000390 	.word	0x20000390

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	@ (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001460 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800142c:	f7ff ffea 	bl	8001404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001430:	480c      	ldr	r0, [pc, #48]	@ (8001464 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001432:	490d      	ldr	r1, [pc, #52]	@ (8001468 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001434:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001438:	e002      	b.n	8001440 <LoopCopyDataInit>

0800143a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800143a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800143c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143e:	3304      	adds	r3, #4

08001440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001444:	d3f9      	bcc.n	800143a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001446:	4a0a      	ldr	r2, [pc, #40]	@ (8001470 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001448:	4c0a      	ldr	r4, [pc, #40]	@ (8001474 <LoopFillZerobss+0x22>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800144c:	e001      	b.n	8001452 <LoopFillZerobss>

0800144e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001450:	3204      	adds	r2, #4

08001452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001454:	d3fb      	bcc.n	800144e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001456:	f002 f94b 	bl	80036f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f7ff fd25 	bl	8000ea8 <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800146c:	08005bb8 	.word	0x08005bb8
  ldr r2, =_sbss
 8001470:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001474:	2000038c 	.word	0x2000038c

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001480:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_Init+0x40>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <HAL_Init+0x40>)
 8001486:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800148a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <HAL_Init+0x40>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_Init+0x40>)
 8001492:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001496:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_Init+0x40>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a07      	ldr	r2, [pc, #28]	@ (80014bc <HAL_Init+0x40>)
 800149e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f931 	bl	800170c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f808 	bl	80014c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b0:	f7ff fe42 	bl	8001138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023c00 	.word	0x40023c00

080014c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0x54>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_InitTick+0x58>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014da:	fbb2 f3f3 	udiv	r3, r2, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f93b 	bl	800175a <HAL_SYSTICK_Config>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00e      	b.n	800150c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b0f      	cmp	r3, #15
 80014f2:	d80a      	bhi.n	800150a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f4:	2200      	movs	r2, #0
 80014f6:	6879      	ldr	r1, [r7, #4]
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f000 f911 	bl	8001722 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001500:	4a06      	ldr	r2, [pc, #24]	@ (800151c <HAL_InitTick+0x5c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	e000      	b.n	800150c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000
 8001518:	20000008 	.word	0x20000008
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	@ (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000008 	.word	0x20000008
 8001544:	2000023c 	.word	0x2000023c

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	@ (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	2000023c 	.word	0x2000023c

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	@ (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000008 	.word	0x20000008

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d8:	d301      	bcc.n	80016de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016da:	2301      	movs	r3, #1
 80016dc:	e00f      	b.n	80016fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016de:	4a0a      	ldr	r2, [pc, #40]	@ (8001708 <SysTick_Config+0x40>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e6:	210f      	movs	r1, #15
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f7ff ff8e 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <SysTick_Config+0x40>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f6:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <SysTick_Config+0x40>)
 80016f8:	2207      	movs	r2, #7
 80016fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	e000e010 	.word	0xe000e010

0800170c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff47 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001722:	b580      	push	{r7, lr}
 8001724:	b086      	sub	sp, #24
 8001726:	af00      	add	r7, sp, #0
 8001728:	4603      	mov	r3, r0
 800172a:	60b9      	str	r1, [r7, #8]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001734:	f7ff ff5c 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 8001738:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	6978      	ldr	r0, [r7, #20]
 8001740:	f7ff ff8e 	bl	8001660 <NVIC_EncodePriority>
 8001744:	4602      	mov	r2, r0
 8001746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800174a:	4611      	mov	r1, r2
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ff5d 	bl	800160c <__NVIC_SetPriority>
}
 8001752:	bf00      	nop
 8001754:	3718      	adds	r7, #24
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ffb0 	bl	80016c8 <SysTick_Config>
 8001768:	4603      	mov	r3, r0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	@ 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178a:	2300      	movs	r3, #0
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	e159      	b.n	8001a44 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	f040 8148 	bne.w	8001a3e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d005      	beq.n	80017c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b03      	cmp	r3, #3
 8001832:	d017      	beq.n	8001864 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0303 	and.w	r3, r3, #3
 800186c:	2b02      	cmp	r3, #2
 800186e:	d123      	bne.n	80018b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	08da      	lsrs	r2, r3, #3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3208      	adds	r2, #8
 8001878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f003 0307 	and.w	r3, r3, #7
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	4013      	ands	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	691a      	ldr	r2, [r3, #16]
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	69b9      	ldr	r1, [r7, #24]
 80018b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	2203      	movs	r2, #3
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0203 	and.w	r2, r3, #3
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 80a2 	beq.w	8001a3e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60fb      	str	r3, [r7, #12]
 80018fe:	4b57      	ldr	r3, [pc, #348]	@ (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001902:	4a56      	ldr	r2, [pc, #344]	@ (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001904:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001908:	6453      	str	r3, [r2, #68]	@ 0x44
 800190a:	4b54      	ldr	r3, [pc, #336]	@ (8001a5c <HAL_GPIO_Init+0x2e8>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001916:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_GPIO_Init+0x2ec>)
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a49      	ldr	r2, [pc, #292]	@ (8001a64 <HAL_GPIO_Init+0x2f0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d019      	beq.n	8001976 <HAL_GPIO_Init+0x202>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a48      	ldr	r2, [pc, #288]	@ (8001a68 <HAL_GPIO_Init+0x2f4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <HAL_GPIO_Init+0x1fe>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a47      	ldr	r2, [pc, #284]	@ (8001a6c <HAL_GPIO_Init+0x2f8>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00d      	beq.n	800196e <HAL_GPIO_Init+0x1fa>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a46      	ldr	r2, [pc, #280]	@ (8001a70 <HAL_GPIO_Init+0x2fc>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x1f6>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a45      	ldr	r2, [pc, #276]	@ (8001a74 <HAL_GPIO_Init+0x300>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d101      	bne.n	8001966 <HAL_GPIO_Init+0x1f2>
 8001962:	2304      	movs	r3, #4
 8001964:	e008      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001966:	2307      	movs	r3, #7
 8001968:	e006      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196a:	2303      	movs	r3, #3
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x204>
 800196e:	2302      	movs	r3, #2
 8001970:	e002      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001972:	2301      	movs	r3, #1
 8001974:	e000      	b.n	8001978 <HAL_GPIO_Init+0x204>
 8001976:	2300      	movs	r3, #0
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f002 0203 	and.w	r2, r2, #3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4093      	lsls	r3, r2
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001988:	4935      	ldr	r1, [pc, #212]	@ (8001a60 <HAL_GPIO_Init+0x2ec>)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	089b      	lsrs	r3, r3, #2
 800198e:	3302      	adds	r3, #2
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001996:	4b38      	ldr	r3, [pc, #224]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e4:	4a24      	ldr	r2, [pc, #144]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ea:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d003      	beq.n	8001a0e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a38:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <HAL_GPIO_Init+0x304>)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b0f      	cmp	r3, #15
 8001a48:	f67f aea2 	bls.w	8001790 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	bf00      	nop
 8001a50:	3724      	adds	r7, #36	@ 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40013800 	.word	0x40013800
 8001a64:	40020000 	.word	0x40020000
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	40020800 	.word	0x40020800
 8001a70:	40020c00 	.word	0x40020c00
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40013c00 	.word	0x40013c00

08001a7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e267      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d075      	beq.n	8001b86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001a9a:	4b88      	ldr	r3, [pc, #544]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d00c      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aa6:	4b85      	ldr	r3, [pc, #532]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d112      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab2:	4b82      	ldr	r3, [pc, #520]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001abe:	d10b      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d05b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x108>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d157      	bne.n	8001b84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e242      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ae0:	d106      	bne.n	8001af0 <HAL_RCC_OscConfig+0x74>
 8001ae2:	4b76      	ldr	r3, [pc, #472]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a75      	ldr	r2, [pc, #468]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	e01d      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af8:	d10c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x98>
 8001afa:	4b70      	ldr	r3, [pc, #448]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a6f      	ldr	r2, [pc, #444]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4b6d      	ldr	r3, [pc, #436]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a6c      	ldr	r2, [pc, #432]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e00b      	b.n	8001b2c <HAL_RCC_OscConfig+0xb0>
 8001b14:	4b69      	ldr	r3, [pc, #420]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a68      	ldr	r2, [pc, #416]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b66      	ldr	r3, [pc, #408]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a65      	ldr	r2, [pc, #404]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d013      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b34:	f7ff fd08 	bl	8001548 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fd04 	bl	8001548 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	@ 0x64
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e207      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0xc0>
 8001b5a:	e014      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fcf4 	bl	8001548 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b64:	f7ff fcf0 	bl	8001548 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b64      	cmp	r3, #100	@ 0x64
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e1f3      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b76:	4b51      	ldr	r3, [pc, #324]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0xe8>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d063      	beq.n	8001c5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00b      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b9e:	4b47      	ldr	r3, [pc, #284]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d11c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001baa:	4b44      	ldr	r3, [pc, #272]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d116      	bne.n	8001be4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bb6:	4b41      	ldr	r3, [pc, #260]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <HAL_RCC_OscConfig+0x152>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e1c7      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bce:	4b3b      	ldr	r3, [pc, #236]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	4937      	ldr	r1, [pc, #220]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be2:	e03a      	b.n	8001c5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d020      	beq.n	8001c2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bec:	4b34      	ldr	r3, [pc, #208]	@ (8001cc0 <HAL_RCC_OscConfig+0x244>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf2:	f7ff fca9 	bl	8001548 <HAL_GetTick>
 8001bf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	e008      	b.n	8001c0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bfa:	f7ff fca5 	bl	8001548 <HAL_GetTick>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e1a8      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d0f0      	beq.n	8001bfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c18:	4b28      	ldr	r3, [pc, #160]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4925      	ldr	r1, [pc, #148]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
 8001c2c:	e015      	b.n	8001c5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <HAL_RCC_OscConfig+0x244>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c34:	f7ff fc88 	bl	8001548 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fc84 	bl	8001548 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e187      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d036      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d016      	beq.n	8001c9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <HAL_RCC_OscConfig+0x248>)
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c74:	f7ff fc68 	bl	8001548 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fc64 	bl	8001548 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e167      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <HAL_RCC_OscConfig+0x240>)
 8001c90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f0      	beq.n	8001c7c <HAL_RCC_OscConfig+0x200>
 8001c9a:	e01b      	b.n	8001cd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_OscConfig+0x248>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca2:	f7ff fc51 	bl	8001548 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ca8:	e00e      	b.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001caa:	f7ff fc4d 	bl	8001548 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d907      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e150      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	42470000 	.word	0x42470000
 8001cc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	4b88      	ldr	r3, [pc, #544]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001cca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1ea      	bne.n	8001caa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8097 	beq.w	8001e10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce6:	4b81      	ldr	r3, [pc, #516]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10f      	bne.n	8001d12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b7d      	ldr	r3, [pc, #500]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d02:	4b7a      	ldr	r3, [pc, #488]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d12:	4b77      	ldr	r3, [pc, #476]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d118      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d1e:	4b74      	ldr	r3, [pc, #464]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a73      	ldr	r2, [pc, #460]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff fc0d 	bl	8001548 <HAL_GetTick>
 8001d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	e008      	b.n	8001d44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d32:	f7ff fc09 	bl	8001548 <HAL_GetTick>
 8001d36:	4602      	mov	r2, r0
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e10c      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	4b6a      	ldr	r3, [pc, #424]	@ (8001ef0 <HAL_RCC_OscConfig+0x474>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0f0      	beq.n	8001d32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d106      	bne.n	8001d66 <HAL_RCC_OscConfig+0x2ea>
 8001d58:	4b64      	ldr	r3, [pc, #400]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5c:	4a63      	ldr	r2, [pc, #396]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d64:	e01c      	b.n	8001da0 <HAL_RCC_OscConfig+0x324>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x30c>
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d72:	4a5e      	ldr	r2, [pc, #376]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0x324>
 8001d88:	4b58      	ldr	r3, [pc, #352]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d8c:	4a57      	ldr	r2, [pc, #348]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d8e:	f023 0301 	bic.w	r3, r3, #1
 8001d92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d94:	4b55      	ldr	r3, [pc, #340]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d98:	4a54      	ldr	r2, [pc, #336]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001d9a:	f023 0304 	bic.w	r3, r3, #4
 8001d9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d015      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001da8:	f7ff fbce 	bl	8001548 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dae:	e00a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001db0:	f7ff fbca 	bl	8001548 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0cb      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dc6:	4b49      	ldr	r3, [pc, #292]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0ee      	beq.n	8001db0 <HAL_RCC_OscConfig+0x334>
 8001dd2:	e014      	b.n	8001dfe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd4:	f7ff fbb8 	bl	8001548 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dda:	e00a      	b.n	8001df2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ddc:	f7ff fbb4 	bl	8001548 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e0b5      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001df2:	4b3e      	ldr	r3, [pc, #248]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1ee      	bne.n	8001ddc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dfe:	7dfb      	ldrb	r3, [r7, #23]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d105      	bne.n	8001e10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e04:	4b39      	ldr	r3, [pc, #228]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	4a38      	ldr	r2, [pc, #224]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	f000 80a1 	beq.w	8001f5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e1a:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d05c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d141      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <HAL_RCC_OscConfig+0x478>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fb88 	bl	8001548 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff fb84 	bl	8001548 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e087      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e4e:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e68:	019b      	lsls	r3, r3, #6
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	3b01      	subs	r3, #1
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	491b      	ldr	r1, [pc, #108]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_RCC_OscConfig+0x478>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fb5d 	bl	8001548 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e92:	f7ff fb59 	bl	8001548 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e05c      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x416>
 8001eb0:	e054      	b.n	8001f5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ef4 <HAL_RCC_OscConfig+0x478>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb8:	f7ff fb46 	bl	8001548 <HAL_GetTick>
 8001ebc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec0:	f7ff fb42 	bl	8001548 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e045      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <HAL_RCC_OscConfig+0x470>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x444>
 8001ede:	e03d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e038      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40007000 	.word	0x40007000
 8001ef4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_RCC_OscConfig+0x4ec>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d028      	beq.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d121      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d11a      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d111      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	085b      	lsrs	r3, r3, #1
 8001f40:	3b01      	subs	r3, #1
 8001f42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d107      	bne.n	8001f58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d001      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800

08001f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0cc      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b68      	ldr	r3, [pc, #416]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d90c      	bls.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b65      	ldr	r3, [pc, #404]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f96:	4b63      	ldr	r3, [pc, #396]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b8      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d020      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc0:	4b59      	ldr	r3, [pc, #356]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	4a58      	ldr	r2, [pc, #352]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0308 	and.w	r3, r3, #8
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fd8:	4b53      	ldr	r3, [pc, #332]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fe2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe4:	4b50      	ldr	r3, [pc, #320]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	494d      	ldr	r1, [pc, #308]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d044      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d107      	bne.n	800201a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b47      	ldr	r3, [pc, #284]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d119      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e07f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b02      	cmp	r3, #2
 8002020:	d003      	beq.n	800202a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002026:	2b03      	cmp	r3, #3
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b3f      	ldr	r3, [pc, #252]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e06f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3b      	ldr	r3, [pc, #236]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e067      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b37      	ldr	r3, [pc, #220]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4934      	ldr	r1, [pc, #208]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	4313      	orrs	r3, r2
 800205a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fa74 	bl	8001548 <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fa70 	bl	8001548 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e04f      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2b      	ldr	r3, [pc, #172]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b25      	ldr	r3, [pc, #148]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d20c      	bcs.n	80020b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b22      	ldr	r3, [pc, #136]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 800209c:	683a      	ldr	r2, [r7, #0]
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b20      	ldr	r3, [pc, #128]	@ (8002124 <HAL_RCC_ClockConfig+0x1b8>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e032      	b.n	800211a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d008      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	4916      	ldr	r1, [pc, #88]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	490e      	ldr	r1, [pc, #56]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f2:	f000 f821 	bl	8002138 <HAL_RCC_GetSysClockFreq>
 80020f6:	4602      	mov	r2, r0
 80020f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	091b      	lsrs	r3, r3, #4
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	490a      	ldr	r1, [pc, #40]	@ (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8002104:	5ccb      	ldrb	r3, [r1, r3]
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	4a09      	ldr	r2, [pc, #36]	@ (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800210c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800210e:	4b09      	ldr	r3, [pc, #36]	@ (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f9d4 	bl	80014c0 <HAL_InitTick>

  return HAL_OK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00
 8002128:	40023800 	.word	0x40023800
 800212c:	0800581c 	.word	0x0800581c
 8002130:	20000000 	.word	0x20000000
 8002134:	20000004 	.word	0x20000004

08002138 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800213c:	b090      	sub	sp, #64	@ 0x40
 800213e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002148:	2300      	movs	r3, #0
 800214a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800214c:	2300      	movs	r3, #0
 800214e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002150:	4b59      	ldr	r3, [pc, #356]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 030c 	and.w	r3, r3, #12
 8002158:	2b08      	cmp	r3, #8
 800215a:	d00d      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x40>
 800215c:	2b08      	cmp	r3, #8
 800215e:	f200 80a1 	bhi.w	80022a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d002      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0x34>
 8002166:	2b04      	cmp	r3, #4
 8002168:	d003      	beq.n	8002172 <HAL_RCC_GetSysClockFreq+0x3a>
 800216a:	e09b      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b53      	ldr	r3, [pc, #332]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x184>)
 800216e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002170:	e09b      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002172:	4b53      	ldr	r3, [pc, #332]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002174:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002176:	e098      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002178:	4b4f      	ldr	r3, [pc, #316]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002180:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002182:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d028      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800218e:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	099b      	lsrs	r3, r3, #6
 8002194:	2200      	movs	r2, #0
 8002196:	623b      	str	r3, [r7, #32]
 8002198:	627a      	str	r2, [r7, #36]	@ 0x24
 800219a:	6a3b      	ldr	r3, [r7, #32]
 800219c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021a0:	2100      	movs	r1, #0
 80021a2:	4b47      	ldr	r3, [pc, #284]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021a4:	fb03 f201 	mul.w	r2, r3, r1
 80021a8:	2300      	movs	r3, #0
 80021aa:	fb00 f303 	mul.w	r3, r0, r3
 80021ae:	4413      	add	r3, r2
 80021b0:	4a43      	ldr	r2, [pc, #268]	@ (80022c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80021b2:	fba0 1202 	umull	r1, r2, r0, r2
 80021b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021b8:	460a      	mov	r2, r1
 80021ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80021bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021be:	4413      	add	r3, r2
 80021c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c4:	2200      	movs	r2, #0
 80021c6:	61bb      	str	r3, [r7, #24]
 80021c8:	61fa      	str	r2, [r7, #28]
 80021ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80021d2:	f7fe fcf1 	bl	8000bb8 <__aeabi_uldivmod>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	4613      	mov	r3, r2
 80021dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021de:	e053      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e0:	4b35      	ldr	r3, [pc, #212]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	2200      	movs	r2, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	617a      	str	r2, [r7, #20]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80021f2:	f04f 0b00 	mov.w	fp, #0
 80021f6:	4652      	mov	r2, sl
 80021f8:	465b      	mov	r3, fp
 80021fa:	f04f 0000 	mov.w	r0, #0
 80021fe:	f04f 0100 	mov.w	r1, #0
 8002202:	0159      	lsls	r1, r3, #5
 8002204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002208:	0150      	lsls	r0, r2, #5
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	ebb2 080a 	subs.w	r8, r2, sl
 8002212:	eb63 090b 	sbc.w	r9, r3, fp
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002222:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002226:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800222a:	ebb2 0408 	subs.w	r4, r2, r8
 800222e:	eb63 0509 	sbc.w	r5, r3, r9
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	00eb      	lsls	r3, r5, #3
 800223c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002240:	00e2      	lsls	r2, r4, #3
 8002242:	4614      	mov	r4, r2
 8002244:	461d      	mov	r5, r3
 8002246:	eb14 030a 	adds.w	r3, r4, sl
 800224a:	603b      	str	r3, [r7, #0]
 800224c:	eb45 030b 	adc.w	r3, r5, fp
 8002250:	607b      	str	r3, [r7, #4]
 8002252:	f04f 0200 	mov.w	r2, #0
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800225e:	4629      	mov	r1, r5
 8002260:	028b      	lsls	r3, r1, #10
 8002262:	4621      	mov	r1, r4
 8002264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002268:	4621      	mov	r1, r4
 800226a:	028a      	lsls	r2, r1, #10
 800226c:	4610      	mov	r0, r2
 800226e:	4619      	mov	r1, r3
 8002270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002272:	2200      	movs	r2, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800227c:	f7fe fc9c 	bl	8000bb8 <__aeabi_uldivmod>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4613      	mov	r3, r2
 8002286:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002288:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	0c1b      	lsrs	r3, r3, #16
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	3301      	adds	r3, #1
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800229a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229c:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a2:	e002      	b.n	80022aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022a4:	4b05      	ldr	r3, [pc, #20]	@ (80022bc <HAL_RCC_GetSysClockFreq+0x184>)
 80022a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3740      	adds	r7, #64	@ 0x40
 80022b0:	46bd      	mov	sp, r7
 80022b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800
 80022bc:	00f42400 	.word	0x00f42400
 80022c0:	017d7840 	.word	0x017d7840

080022c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ca:	681b      	ldr	r3, [r3, #0]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	20000000 	.word	0x20000000

080022dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022e0:	f7ff fff0 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0a9b      	lsrs	r3, r3, #10
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4903      	ldr	r1, [pc, #12]	@ (8002300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	0800582c 	.word	0x0800582c

08002304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002308:	f7ff ffdc 	bl	80022c4 <HAL_RCC_GetHCLKFreq>
 800230c:	4602      	mov	r2, r0
 800230e:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	0b5b      	lsrs	r3, r3, #13
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	4903      	ldr	r1, [pc, #12]	@ (8002328 <HAL_RCC_GetPCLK2Freq+0x24>)
 800231a:	5ccb      	ldrb	r3, [r1, r3]
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002320:	4618      	mov	r0, r3
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40023800 	.word	0x40023800
 8002328:	0800582c 	.word	0x0800582c

0800232c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e042      	b.n	80023c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d106      	bne.n	8002358 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe ff18 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2224      	movs	r2, #36	@ 0x24
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800236e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f973 	bl	800265c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002384:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002394:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2220      	movs	r2, #32
 80023b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2200      	movs	r2, #0
 80023c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	@ 0x28
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	2b20      	cmp	r3, #32
 80023ea:	d175      	bne.n	80024d8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d002      	beq.n	80023f8 <HAL_UART_Transmit+0x2c>
 80023f2:	88fb      	ldrh	r3, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e06e      	b.n	80024da <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2221      	movs	r2, #33	@ 0x21
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800240a:	f7ff f89d 	bl	8001548 <HAL_GetTick>
 800240e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	88fa      	ldrh	r2, [r7, #6]
 8002414:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	88fa      	ldrh	r2, [r7, #6]
 800241a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002424:	d108      	bne.n	8002438 <HAL_UART_Transmit+0x6c>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d104      	bne.n	8002438 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	61bb      	str	r3, [r7, #24]
 8002436:	e003      	b.n	8002440 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002440:	e02e      	b.n	80024a0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2200      	movs	r2, #0
 800244a:	2180      	movs	r1, #128	@ 0x80
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 f848 	bl	80024e2 <UART_WaitOnFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e03a      	b.n	80024da <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10b      	bne.n	8002482 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002478:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	3302      	adds	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	e007      	b.n	8002492 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	781a      	ldrb	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3301      	adds	r3, #1
 8002490:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1cb      	bne.n	8002442 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2200      	movs	r2, #0
 80024b2:	2140      	movs	r1, #64	@ 0x40
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f000 f814 	bl	80024e2 <UART_WaitOnFlagUntilTimeout>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e006      	b.n	80024da <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2220      	movs	r2, #32
 80024d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e000      	b.n	80024da <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024d8:	2302      	movs	r3, #2
  }
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3720      	adds	r7, #32
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	60f8      	str	r0, [r7, #12]
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	603b      	str	r3, [r7, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f2:	e03b      	b.n	800256c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024f4:	6a3b      	ldr	r3, [r7, #32]
 80024f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fa:	d037      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024fc:	f7ff f824 	bl	8001548 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	6a3a      	ldr	r2, [r7, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d302      	bcc.n	8002512 <UART_WaitOnFlagUntilTimeout+0x30>
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e03a      	b.n	800258c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d023      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x8a>
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	2b80      	cmp	r3, #128	@ 0x80
 8002528:	d020      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x8a>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b40      	cmp	r3, #64	@ 0x40
 800252e:	d01d      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b08      	cmp	r3, #8
 800253c:	d116      	bne.n	800256c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	617b      	str	r3, [r7, #20]
 8002552:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 f81d 	bl	8002594 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2208      	movs	r2, #8
 800255e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e00f      	b.n	800258c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4013      	ands	r3, r2
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	429a      	cmp	r2, r3
 800257a:	bf0c      	ite	eq
 800257c:	2301      	moveq	r3, #1
 800257e:	2300      	movne	r3, #0
 8002580:	b2db      	uxtb	r3, r3
 8002582:	461a      	mov	r2, r3
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	429a      	cmp	r2, r3
 8002588:	d0b4      	beq.n	80024f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002594:	b480      	push	{r7}
 8002596:	b095      	sub	sp, #84	@ 0x54
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025a6:	e853 3f00 	ldrex	r3, [r3]
 80025aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	330c      	adds	r3, #12
 80025ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80025be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025c4:	e841 2300 	strex	r3, r2, [r1]
 80025c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	3314      	adds	r3, #20
 80025d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	e853 3f00 	ldrex	r3, [r3]
 80025de:	61fb      	str	r3, [r7, #28]
   return(result);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	3314      	adds	r3, #20
 80025ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025f8:	e841 2300 	strex	r3, r2, [r1]
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e5      	bne.n	80025d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	2b01      	cmp	r3, #1
 800260a:	d119      	bne.n	8002640 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	330c      	adds	r3, #12
 8002612:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	e853 3f00 	ldrex	r3, [r3]
 800261a:	60bb      	str	r3, [r7, #8]
   return(result);
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f023 0310 	bic.w	r3, r3, #16
 8002622:	647b      	str	r3, [r7, #68]	@ 0x44
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800262c:	61ba      	str	r2, [r7, #24]
 800262e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002630:	6979      	ldr	r1, [r7, #20]
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	e841 2300 	strex	r3, r2, [r1]
 8002638:	613b      	str	r3, [r7, #16]
   return(result);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d1e5      	bne.n	800260c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800264e:	bf00      	nop
 8002650:	3754      	adds	r7, #84	@ 0x54
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800265c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002660:	b0c0      	sub	sp, #256	@ 0x100
 8002662:	af00      	add	r7, sp, #0
 8002664:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002678:	68d9      	ldr	r1, [r3, #12]
 800267a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	ea40 0301 	orr.w	r3, r0, r1
 8002684:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	431a      	orrs	r2, r3
 8002694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	431a      	orrs	r2, r3
 800269c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026b4:	f021 010c 	bic.w	r1, r1, #12
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026c2:	430b      	orrs	r3, r1
 80026c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80026d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d6:	6999      	ldr	r1, [r3, #24]
 80026d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	ea40 0301 	orr.w	r3, r0, r1
 80026e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b8f      	ldr	r3, [pc, #572]	@ (8002928 <UART_SetConfig+0x2cc>)
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d005      	beq.n	80026fc <UART_SetConfig+0xa0>
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b8d      	ldr	r3, [pc, #564]	@ (800292c <UART_SetConfig+0x2d0>)
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d104      	bne.n	8002706 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80026fc:	f7ff fe02 	bl	8002304 <HAL_RCC_GetPCLK2Freq>
 8002700:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002704:	e003      	b.n	800270e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002706:	f7ff fde9 	bl	80022dc <HAL_RCC_GetPCLK1Freq>
 800270a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800270e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002712:	69db      	ldr	r3, [r3, #28]
 8002714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002718:	f040 810c 	bne.w	8002934 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800271c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002720:	2200      	movs	r2, #0
 8002722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002726:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800272a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800272e:	4622      	mov	r2, r4
 8002730:	462b      	mov	r3, r5
 8002732:	1891      	adds	r1, r2, r2
 8002734:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002736:	415b      	adcs	r3, r3
 8002738:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800273a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800273e:	4621      	mov	r1, r4
 8002740:	eb12 0801 	adds.w	r8, r2, r1
 8002744:	4629      	mov	r1, r5
 8002746:	eb43 0901 	adc.w	r9, r3, r1
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800275a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275e:	4690      	mov	r8, r2
 8002760:	4699      	mov	r9, r3
 8002762:	4623      	mov	r3, r4
 8002764:	eb18 0303 	adds.w	r3, r8, r3
 8002768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800276c:	462b      	mov	r3, r5
 800276e:	eb49 0303 	adc.w	r3, r9, r3
 8002772:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002782:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002786:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800278a:	460b      	mov	r3, r1
 800278c:	18db      	adds	r3, r3, r3
 800278e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002790:	4613      	mov	r3, r2
 8002792:	eb42 0303 	adc.w	r3, r2, r3
 8002796:	657b      	str	r3, [r7, #84]	@ 0x54
 8002798:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800279c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027a0:	f7fe fa0a 	bl	8000bb8 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4b61      	ldr	r3, [pc, #388]	@ (8002930 <UART_SetConfig+0x2d4>)
 80027aa:	fba3 2302 	umull	r2, r3, r3, r2
 80027ae:	095b      	lsrs	r3, r3, #5
 80027b0:	011c      	lsls	r4, r3, #4
 80027b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027b6:	2200      	movs	r2, #0
 80027b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027c4:	4642      	mov	r2, r8
 80027c6:	464b      	mov	r3, r9
 80027c8:	1891      	adds	r1, r2, r2
 80027ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80027cc:	415b      	adcs	r3, r3
 80027ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027d4:	4641      	mov	r1, r8
 80027d6:	eb12 0a01 	adds.w	sl, r2, r1
 80027da:	4649      	mov	r1, r9
 80027dc:	eb43 0b01 	adc.w	fp, r3, r1
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	f04f 0300 	mov.w	r3, #0
 80027e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f4:	4692      	mov	sl, r2
 80027f6:	469b      	mov	fp, r3
 80027f8:	4643      	mov	r3, r8
 80027fa:	eb1a 0303 	adds.w	r3, sl, r3
 80027fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002802:	464b      	mov	r3, r9
 8002804:	eb4b 0303 	adc.w	r3, fp, r3
 8002808:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002818:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800281c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002820:	460b      	mov	r3, r1
 8002822:	18db      	adds	r3, r3, r3
 8002824:	643b      	str	r3, [r7, #64]	@ 0x40
 8002826:	4613      	mov	r3, r2
 8002828:	eb42 0303 	adc.w	r3, r2, r3
 800282c:	647b      	str	r3, [r7, #68]	@ 0x44
 800282e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002832:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002836:	f7fe f9bf 	bl	8000bb8 <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4611      	mov	r1, r2
 8002840:	4b3b      	ldr	r3, [pc, #236]	@ (8002930 <UART_SetConfig+0x2d4>)
 8002842:	fba3 2301 	umull	r2, r3, r3, r1
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2264      	movs	r2, #100	@ 0x64
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	1acb      	subs	r3, r1, r3
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002856:	4b36      	ldr	r3, [pc, #216]	@ (8002930 <UART_SetConfig+0x2d4>)
 8002858:	fba3 2302 	umull	r2, r3, r3, r2
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002864:	441c      	add	r4, r3
 8002866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800286a:	2200      	movs	r2, #0
 800286c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002870:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002874:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002878:	4642      	mov	r2, r8
 800287a:	464b      	mov	r3, r9
 800287c:	1891      	adds	r1, r2, r2
 800287e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002880:	415b      	adcs	r3, r3
 8002882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002884:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002888:	4641      	mov	r1, r8
 800288a:	1851      	adds	r1, r2, r1
 800288c:	6339      	str	r1, [r7, #48]	@ 0x30
 800288e:	4649      	mov	r1, r9
 8002890:	414b      	adcs	r3, r1
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
 8002894:	f04f 0200 	mov.w	r2, #0
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028a0:	4659      	mov	r1, fp
 80028a2:	00cb      	lsls	r3, r1, #3
 80028a4:	4651      	mov	r1, sl
 80028a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028aa:	4651      	mov	r1, sl
 80028ac:	00ca      	lsls	r2, r1, #3
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	4642      	mov	r2, r8
 80028b6:	189b      	adds	r3, r3, r2
 80028b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028bc:	464b      	mov	r3, r9
 80028be:	460a      	mov	r2, r1
 80028c0:	eb42 0303 	adc.w	r3, r2, r3
 80028c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80028d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80028d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80028dc:	460b      	mov	r3, r1
 80028de:	18db      	adds	r3, r3, r3
 80028e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e2:	4613      	mov	r3, r2
 80028e4:	eb42 0303 	adc.w	r3, r2, r3
 80028e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80028f2:	f7fe f961 	bl	8000bb8 <__aeabi_uldivmod>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <UART_SetConfig+0x2d4>)
 80028fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002900:	095b      	lsrs	r3, r3, #5
 8002902:	2164      	movs	r1, #100	@ 0x64
 8002904:	fb01 f303 	mul.w	r3, r1, r3
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	3332      	adds	r3, #50	@ 0x32
 800290e:	4a08      	ldr	r2, [pc, #32]	@ (8002930 <UART_SetConfig+0x2d4>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	f003 0207 	and.w	r2, r3, #7
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4422      	add	r2, r4
 8002922:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002924:	e106      	b.n	8002b34 <UART_SetConfig+0x4d8>
 8002926:	bf00      	nop
 8002928:	40011000 	.word	0x40011000
 800292c:	40011400 	.word	0x40011400
 8002930:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002934:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002938:	2200      	movs	r2, #0
 800293a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800293e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002942:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002946:	4642      	mov	r2, r8
 8002948:	464b      	mov	r3, r9
 800294a:	1891      	adds	r1, r2, r2
 800294c:	6239      	str	r1, [r7, #32]
 800294e:	415b      	adcs	r3, r3
 8002950:	627b      	str	r3, [r7, #36]	@ 0x24
 8002952:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002956:	4641      	mov	r1, r8
 8002958:	1854      	adds	r4, r2, r1
 800295a:	4649      	mov	r1, r9
 800295c:	eb43 0501 	adc.w	r5, r3, r1
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	f04f 0300 	mov.w	r3, #0
 8002968:	00eb      	lsls	r3, r5, #3
 800296a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800296e:	00e2      	lsls	r2, r4, #3
 8002970:	4614      	mov	r4, r2
 8002972:	461d      	mov	r5, r3
 8002974:	4643      	mov	r3, r8
 8002976:	18e3      	adds	r3, r4, r3
 8002978:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800297c:	464b      	mov	r3, r9
 800297e:	eb45 0303 	adc.w	r3, r5, r3
 8002982:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002992:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029a2:	4629      	mov	r1, r5
 80029a4:	008b      	lsls	r3, r1, #2
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029ac:	4621      	mov	r1, r4
 80029ae:	008a      	lsls	r2, r1, #2
 80029b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029b4:	f7fe f900 	bl	8000bb8 <__aeabi_uldivmod>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4b60      	ldr	r3, [pc, #384]	@ (8002b40 <UART_SetConfig+0x4e4>)
 80029be:	fba3 2302 	umull	r2, r3, r3, r2
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	011c      	lsls	r4, r3, #4
 80029c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	61b9      	str	r1, [r7, #24]
 80029e0:	415b      	adcs	r3, r3
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029e8:	4641      	mov	r1, r8
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	6139      	str	r1, [r7, #16]
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a00:	4659      	mov	r1, fp
 8002a02:	00cb      	lsls	r3, r1, #3
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	00ca      	lsls	r2, r1, #3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	4642      	mov	r2, r8
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	460a      	mov	r2, r1
 8002a20:	eb42 0303 	adc.w	r3, r2, r3
 8002a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	f04f 0300 	mov.w	r3, #0
 8002a3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a40:	4649      	mov	r1, r9
 8002a42:	008b      	lsls	r3, r1, #2
 8002a44:	4641      	mov	r1, r8
 8002a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a4a:	4641      	mov	r1, r8
 8002a4c:	008a      	lsls	r2, r1, #2
 8002a4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a52:	f7fe f8b1 	bl	8000bb8 <__aeabi_uldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4b38      	ldr	r3, [pc, #224]	@ (8002b40 <UART_SetConfig+0x4e4>)
 8002a5e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2264      	movs	r2, #100	@ 0x64
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	1acb      	subs	r3, r1, r3
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	3332      	adds	r3, #50	@ 0x32
 8002a70:	4a33      	ldr	r2, [pc, #204]	@ (8002b40 <UART_SetConfig+0x4e4>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a7c:	441c      	add	r4, r3
 8002a7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a82:	2200      	movs	r2, #0
 8002a84:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a86:	677a      	str	r2, [r7, #116]	@ 0x74
 8002a88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	1891      	adds	r1, r2, r2
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	415b      	adcs	r3, r3
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a9c:	4641      	mov	r1, r8
 8002a9e:	1851      	adds	r1, r2, r1
 8002aa0:	6039      	str	r1, [r7, #0]
 8002aa2:	4649      	mov	r1, r9
 8002aa4:	414b      	adcs	r3, r1
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	00cb      	lsls	r3, r1, #3
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002abe:	4651      	mov	r1, sl
 8002ac0:	00ca      	lsls	r2, r1, #3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	4642      	mov	r2, r8
 8002aca:	189b      	adds	r3, r3, r2
 8002acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ace:	464b      	mov	r3, r9
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	eb42 0303 	adc.w	r3, r2, r3
 8002ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ae2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ae4:	f04f 0200 	mov.w	r2, #0
 8002ae8:	f04f 0300 	mov.w	r3, #0
 8002aec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002af0:	4649      	mov	r1, r9
 8002af2:	008b      	lsls	r3, r1, #2
 8002af4:	4641      	mov	r1, r8
 8002af6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002afa:	4641      	mov	r1, r8
 8002afc:	008a      	lsls	r2, r1, #2
 8002afe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b02:	f7fe f859 	bl	8000bb8 <__aeabi_uldivmod>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b40 <UART_SetConfig+0x4e4>)
 8002b0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b10:	095b      	lsrs	r3, r3, #5
 8002b12:	2164      	movs	r1, #100	@ 0x64
 8002b14:	fb01 f303 	mul.w	r3, r1, r3
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	3332      	adds	r3, #50	@ 0x32
 8002b1e:	4a08      	ldr	r2, [pc, #32]	@ (8002b40 <UART_SetConfig+0x4e4>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	f003 020f 	and.w	r2, r3, #15
 8002b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4422      	add	r2, r4
 8002b32:	609a      	str	r2, [r3, #8]
}
 8002b34:	bf00      	nop
 8002b36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b40:	51eb851f 	.word	0x51eb851f

08002b44 <__cvt>:
 8002b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b48:	ec57 6b10 	vmov	r6, r7, d0
 8002b4c:	2f00      	cmp	r7, #0
 8002b4e:	460c      	mov	r4, r1
 8002b50:	4619      	mov	r1, r3
 8002b52:	463b      	mov	r3, r7
 8002b54:	bfbb      	ittet	lt
 8002b56:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002b5a:	461f      	movlt	r7, r3
 8002b5c:	2300      	movge	r3, #0
 8002b5e:	232d      	movlt	r3, #45	@ 0x2d
 8002b60:	700b      	strb	r3, [r1, #0]
 8002b62:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b64:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002b68:	4691      	mov	r9, r2
 8002b6a:	f023 0820 	bic.w	r8, r3, #32
 8002b6e:	bfbc      	itt	lt
 8002b70:	4632      	movlt	r2, r6
 8002b72:	4616      	movlt	r6, r2
 8002b74:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002b78:	d005      	beq.n	8002b86 <__cvt+0x42>
 8002b7a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002b7e:	d100      	bne.n	8002b82 <__cvt+0x3e>
 8002b80:	3401      	adds	r4, #1
 8002b82:	2102      	movs	r1, #2
 8002b84:	e000      	b.n	8002b88 <__cvt+0x44>
 8002b86:	2103      	movs	r1, #3
 8002b88:	ab03      	add	r3, sp, #12
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	ab02      	add	r3, sp, #8
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	ec47 6b10 	vmov	d0, r6, r7
 8002b94:	4653      	mov	r3, sl
 8002b96:	4622      	mov	r2, r4
 8002b98:	f000 fe5a 	bl	8003850 <_dtoa_r>
 8002b9c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	d119      	bne.n	8002bd8 <__cvt+0x94>
 8002ba4:	f019 0f01 	tst.w	r9, #1
 8002ba8:	d00e      	beq.n	8002bc8 <__cvt+0x84>
 8002baa:	eb00 0904 	add.w	r9, r0, r4
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	4639      	mov	r1, r7
 8002bb6:	f7fd ff8f 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bba:	b108      	cbz	r0, 8002bc0 <__cvt+0x7c>
 8002bbc:	f8cd 900c 	str.w	r9, [sp, #12]
 8002bc0:	2230      	movs	r2, #48	@ 0x30
 8002bc2:	9b03      	ldr	r3, [sp, #12]
 8002bc4:	454b      	cmp	r3, r9
 8002bc6:	d31e      	bcc.n	8002c06 <__cvt+0xc2>
 8002bc8:	9b03      	ldr	r3, [sp, #12]
 8002bca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002bcc:	1b5b      	subs	r3, r3, r5
 8002bce:	4628      	mov	r0, r5
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	b004      	add	sp, #16
 8002bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002bdc:	eb00 0904 	add.w	r9, r0, r4
 8002be0:	d1e5      	bne.n	8002bae <__cvt+0x6a>
 8002be2:	7803      	ldrb	r3, [r0, #0]
 8002be4:	2b30      	cmp	r3, #48	@ 0x30
 8002be6:	d10a      	bne.n	8002bfe <__cvt+0xba>
 8002be8:	2200      	movs	r2, #0
 8002bea:	2300      	movs	r3, #0
 8002bec:	4630      	mov	r0, r6
 8002bee:	4639      	mov	r1, r7
 8002bf0:	f7fd ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 8002bf4:	b918      	cbnz	r0, 8002bfe <__cvt+0xba>
 8002bf6:	f1c4 0401 	rsb	r4, r4, #1
 8002bfa:	f8ca 4000 	str.w	r4, [sl]
 8002bfe:	f8da 3000 	ldr.w	r3, [sl]
 8002c02:	4499      	add	r9, r3
 8002c04:	e7d3      	b.n	8002bae <__cvt+0x6a>
 8002c06:	1c59      	adds	r1, r3, #1
 8002c08:	9103      	str	r1, [sp, #12]
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e7d9      	b.n	8002bc2 <__cvt+0x7e>

08002c0e <__exponent>:
 8002c0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c10:	2900      	cmp	r1, #0
 8002c12:	bfba      	itte	lt
 8002c14:	4249      	neglt	r1, r1
 8002c16:	232d      	movlt	r3, #45	@ 0x2d
 8002c18:	232b      	movge	r3, #43	@ 0x2b
 8002c1a:	2909      	cmp	r1, #9
 8002c1c:	7002      	strb	r2, [r0, #0]
 8002c1e:	7043      	strb	r3, [r0, #1]
 8002c20:	dd29      	ble.n	8002c76 <__exponent+0x68>
 8002c22:	f10d 0307 	add.w	r3, sp, #7
 8002c26:	461d      	mov	r5, r3
 8002c28:	270a      	movs	r7, #10
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	fbb1 f6f7 	udiv	r6, r1, r7
 8002c30:	fb07 1416 	mls	r4, r7, r6, r1
 8002c34:	3430      	adds	r4, #48	@ 0x30
 8002c36:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002c3a:	460c      	mov	r4, r1
 8002c3c:	2c63      	cmp	r4, #99	@ 0x63
 8002c3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8002c42:	4631      	mov	r1, r6
 8002c44:	dcf1      	bgt.n	8002c2a <__exponent+0x1c>
 8002c46:	3130      	adds	r1, #48	@ 0x30
 8002c48:	1e94      	subs	r4, r2, #2
 8002c4a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002c4e:	1c41      	adds	r1, r0, #1
 8002c50:	4623      	mov	r3, r4
 8002c52:	42ab      	cmp	r3, r5
 8002c54:	d30a      	bcc.n	8002c6c <__exponent+0x5e>
 8002c56:	f10d 0309 	add.w	r3, sp, #9
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	42ac      	cmp	r4, r5
 8002c5e:	bf88      	it	hi
 8002c60:	2300      	movhi	r3, #0
 8002c62:	3302      	adds	r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	1a18      	subs	r0, r3, r0
 8002c68:	b003      	add	sp, #12
 8002c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c6c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002c70:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002c74:	e7ed      	b.n	8002c52 <__exponent+0x44>
 8002c76:	2330      	movs	r3, #48	@ 0x30
 8002c78:	3130      	adds	r1, #48	@ 0x30
 8002c7a:	7083      	strb	r3, [r0, #2]
 8002c7c:	70c1      	strb	r1, [r0, #3]
 8002c7e:	1d03      	adds	r3, r0, #4
 8002c80:	e7f1      	b.n	8002c66 <__exponent+0x58>
	...

08002c84 <_printf_float>:
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b08d      	sub	sp, #52	@ 0x34
 8002c8a:	460c      	mov	r4, r1
 8002c8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002c90:	4616      	mov	r6, r2
 8002c92:	461f      	mov	r7, r3
 8002c94:	4605      	mov	r5, r0
 8002c96:	f000 fcdb 	bl	8003650 <_localeconv_r>
 8002c9a:	6803      	ldr	r3, [r0, #0]
 8002c9c:	9304      	str	r3, [sp, #16]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd faee 	bl	8000280 <strlen>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	930a      	str	r3, [sp, #40]	@ 0x28
 8002ca8:	f8d8 3000 	ldr.w	r3, [r8]
 8002cac:	9005      	str	r0, [sp, #20]
 8002cae:	3307      	adds	r3, #7
 8002cb0:	f023 0307 	bic.w	r3, r3, #7
 8002cb4:	f103 0208 	add.w	r2, r3, #8
 8002cb8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002cbc:	f8d4 b000 	ldr.w	fp, [r4]
 8002cc0:	f8c8 2000 	str.w	r2, [r8]
 8002cc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002cc8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002ccc:	9307      	str	r3, [sp, #28]
 8002cce:	f8cd 8018 	str.w	r8, [sp, #24]
 8002cd2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002cd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cda:	4b9c      	ldr	r3, [pc, #624]	@ (8002f4c <_printf_float+0x2c8>)
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	f7fd ff2c 	bl	8000b3c <__aeabi_dcmpun>
 8002ce4:	bb70      	cbnz	r0, 8002d44 <_printf_float+0xc0>
 8002ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002cea:	4b98      	ldr	r3, [pc, #608]	@ (8002f4c <_printf_float+0x2c8>)
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	f7fd ff06 	bl	8000b00 <__aeabi_dcmple>
 8002cf4:	bb30      	cbnz	r0, 8002d44 <_printf_float+0xc0>
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	4640      	mov	r0, r8
 8002cfc:	4649      	mov	r1, r9
 8002cfe:	f7fd fef5 	bl	8000aec <__aeabi_dcmplt>
 8002d02:	b110      	cbz	r0, 8002d0a <_printf_float+0x86>
 8002d04:	232d      	movs	r3, #45	@ 0x2d
 8002d06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d0a:	4a91      	ldr	r2, [pc, #580]	@ (8002f50 <_printf_float+0x2cc>)
 8002d0c:	4b91      	ldr	r3, [pc, #580]	@ (8002f54 <_printf_float+0x2d0>)
 8002d0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002d12:	bf94      	ite	ls
 8002d14:	4690      	movls	r8, r2
 8002d16:	4698      	movhi	r8, r3
 8002d18:	2303      	movs	r3, #3
 8002d1a:	6123      	str	r3, [r4, #16]
 8002d1c:	f02b 0304 	bic.w	r3, fp, #4
 8002d20:	6023      	str	r3, [r4, #0]
 8002d22:	f04f 0900 	mov.w	r9, #0
 8002d26:	9700      	str	r7, [sp, #0]
 8002d28:	4633      	mov	r3, r6
 8002d2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002d2c:	4621      	mov	r1, r4
 8002d2e:	4628      	mov	r0, r5
 8002d30:	f000 f9d2 	bl	80030d8 <_printf_common>
 8002d34:	3001      	adds	r0, #1
 8002d36:	f040 808d 	bne.w	8002e54 <_printf_float+0x1d0>
 8002d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3e:	b00d      	add	sp, #52	@ 0x34
 8002d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d44:	4642      	mov	r2, r8
 8002d46:	464b      	mov	r3, r9
 8002d48:	4640      	mov	r0, r8
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	f7fd fef6 	bl	8000b3c <__aeabi_dcmpun>
 8002d50:	b140      	cbz	r0, 8002d64 <_printf_float+0xe0>
 8002d52:	464b      	mov	r3, r9
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bfbc      	itt	lt
 8002d58:	232d      	movlt	r3, #45	@ 0x2d
 8002d5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002d5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f58 <_printf_float+0x2d4>)
 8002d60:	4b7e      	ldr	r3, [pc, #504]	@ (8002f5c <_printf_float+0x2d8>)
 8002d62:	e7d4      	b.n	8002d0e <_printf_float+0x8a>
 8002d64:	6863      	ldr	r3, [r4, #4]
 8002d66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002d6a:	9206      	str	r2, [sp, #24]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	d13b      	bne.n	8002de8 <_printf_float+0x164>
 8002d70:	2306      	movs	r3, #6
 8002d72:	6063      	str	r3, [r4, #4]
 8002d74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002d78:	2300      	movs	r3, #0
 8002d7a:	6022      	str	r2, [r4, #0]
 8002d7c:	9303      	str	r3, [sp, #12]
 8002d7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8002d80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002d84:	ab09      	add	r3, sp, #36	@ 0x24
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	6861      	ldr	r1, [r4, #4]
 8002d8a:	ec49 8b10 	vmov	d0, r8, r9
 8002d8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002d92:	4628      	mov	r0, r5
 8002d94:	f7ff fed6 	bl	8002b44 <__cvt>
 8002d98:	9b06      	ldr	r3, [sp, #24]
 8002d9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002d9c:	2b47      	cmp	r3, #71	@ 0x47
 8002d9e:	4680      	mov	r8, r0
 8002da0:	d129      	bne.n	8002df6 <_printf_float+0x172>
 8002da2:	1cc8      	adds	r0, r1, #3
 8002da4:	db02      	blt.n	8002dac <_printf_float+0x128>
 8002da6:	6863      	ldr	r3, [r4, #4]
 8002da8:	4299      	cmp	r1, r3
 8002daa:	dd41      	ble.n	8002e30 <_printf_float+0x1ac>
 8002dac:	f1aa 0a02 	sub.w	sl, sl, #2
 8002db0:	fa5f fa8a 	uxtb.w	sl, sl
 8002db4:	3901      	subs	r1, #1
 8002db6:	4652      	mov	r2, sl
 8002db8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002dbc:	9109      	str	r1, [sp, #36]	@ 0x24
 8002dbe:	f7ff ff26 	bl	8002c0e <__exponent>
 8002dc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002dc4:	1813      	adds	r3, r2, r0
 8002dc6:	2a01      	cmp	r2, #1
 8002dc8:	4681      	mov	r9, r0
 8002dca:	6123      	str	r3, [r4, #16]
 8002dcc:	dc02      	bgt.n	8002dd4 <_printf_float+0x150>
 8002dce:	6822      	ldr	r2, [r4, #0]
 8002dd0:	07d2      	lsls	r2, r2, #31
 8002dd2:	d501      	bpl.n	8002dd8 <_printf_float+0x154>
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	6123      	str	r3, [r4, #16]
 8002dd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0a2      	beq.n	8002d26 <_printf_float+0xa2>
 8002de0:	232d      	movs	r3, #45	@ 0x2d
 8002de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002de6:	e79e      	b.n	8002d26 <_printf_float+0xa2>
 8002de8:	9a06      	ldr	r2, [sp, #24]
 8002dea:	2a47      	cmp	r2, #71	@ 0x47
 8002dec:	d1c2      	bne.n	8002d74 <_printf_float+0xf0>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d1c0      	bne.n	8002d74 <_printf_float+0xf0>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e7bd      	b.n	8002d72 <_printf_float+0xee>
 8002df6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002dfa:	d9db      	bls.n	8002db4 <_printf_float+0x130>
 8002dfc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002e00:	d118      	bne.n	8002e34 <_printf_float+0x1b0>
 8002e02:	2900      	cmp	r1, #0
 8002e04:	6863      	ldr	r3, [r4, #4]
 8002e06:	dd0b      	ble.n	8002e20 <_printf_float+0x19c>
 8002e08:	6121      	str	r1, [r4, #16]
 8002e0a:	b913      	cbnz	r3, 8002e12 <_printf_float+0x18e>
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	07d0      	lsls	r0, r2, #31
 8002e10:	d502      	bpl.n	8002e18 <_printf_float+0x194>
 8002e12:	3301      	adds	r3, #1
 8002e14:	440b      	add	r3, r1
 8002e16:	6123      	str	r3, [r4, #16]
 8002e18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002e1a:	f04f 0900 	mov.w	r9, #0
 8002e1e:	e7db      	b.n	8002dd8 <_printf_float+0x154>
 8002e20:	b913      	cbnz	r3, 8002e28 <_printf_float+0x1a4>
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	07d2      	lsls	r2, r2, #31
 8002e26:	d501      	bpl.n	8002e2c <_printf_float+0x1a8>
 8002e28:	3302      	adds	r3, #2
 8002e2a:	e7f4      	b.n	8002e16 <_printf_float+0x192>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e7f2      	b.n	8002e16 <_printf_float+0x192>
 8002e30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002e36:	4299      	cmp	r1, r3
 8002e38:	db05      	blt.n	8002e46 <_printf_float+0x1c2>
 8002e3a:	6823      	ldr	r3, [r4, #0]
 8002e3c:	6121      	str	r1, [r4, #16]
 8002e3e:	07d8      	lsls	r0, r3, #31
 8002e40:	d5ea      	bpl.n	8002e18 <_printf_float+0x194>
 8002e42:	1c4b      	adds	r3, r1, #1
 8002e44:	e7e7      	b.n	8002e16 <_printf_float+0x192>
 8002e46:	2900      	cmp	r1, #0
 8002e48:	bfd4      	ite	le
 8002e4a:	f1c1 0202 	rsble	r2, r1, #2
 8002e4e:	2201      	movgt	r2, #1
 8002e50:	4413      	add	r3, r2
 8002e52:	e7e0      	b.n	8002e16 <_printf_float+0x192>
 8002e54:	6823      	ldr	r3, [r4, #0]
 8002e56:	055a      	lsls	r2, r3, #21
 8002e58:	d407      	bmi.n	8002e6a <_printf_float+0x1e6>
 8002e5a:	6923      	ldr	r3, [r4, #16]
 8002e5c:	4642      	mov	r2, r8
 8002e5e:	4631      	mov	r1, r6
 8002e60:	4628      	mov	r0, r5
 8002e62:	47b8      	blx	r7
 8002e64:	3001      	adds	r0, #1
 8002e66:	d12b      	bne.n	8002ec0 <_printf_float+0x23c>
 8002e68:	e767      	b.n	8002d3a <_printf_float+0xb6>
 8002e6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002e6e:	f240 80dd 	bls.w	800302c <_printf_float+0x3a8>
 8002e72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002e76:	2200      	movs	r2, #0
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f7fd fe2d 	bl	8000ad8 <__aeabi_dcmpeq>
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d033      	beq.n	8002eea <_printf_float+0x266>
 8002e82:	4a37      	ldr	r2, [pc, #220]	@ (8002f60 <_printf_float+0x2dc>)
 8002e84:	2301      	movs	r3, #1
 8002e86:	4631      	mov	r1, r6
 8002e88:	4628      	mov	r0, r5
 8002e8a:	47b8      	blx	r7
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	f43f af54 	beq.w	8002d3a <_printf_float+0xb6>
 8002e92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8002e96:	4543      	cmp	r3, r8
 8002e98:	db02      	blt.n	8002ea0 <_printf_float+0x21c>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	07d8      	lsls	r0, r3, #31
 8002e9e:	d50f      	bpl.n	8002ec0 <_printf_float+0x23c>
 8002ea0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	47b8      	blx	r7
 8002eaa:	3001      	adds	r0, #1
 8002eac:	f43f af45 	beq.w	8002d3a <_printf_float+0xb6>
 8002eb0:	f04f 0900 	mov.w	r9, #0
 8002eb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8002eb8:	f104 0a1a 	add.w	sl, r4, #26
 8002ebc:	45c8      	cmp	r8, r9
 8002ebe:	dc09      	bgt.n	8002ed4 <_printf_float+0x250>
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	079b      	lsls	r3, r3, #30
 8002ec4:	f100 8103 	bmi.w	80030ce <_printf_float+0x44a>
 8002ec8:	68e0      	ldr	r0, [r4, #12]
 8002eca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ecc:	4298      	cmp	r0, r3
 8002ece:	bfb8      	it	lt
 8002ed0:	4618      	movlt	r0, r3
 8002ed2:	e734      	b.n	8002d3e <_printf_float+0xba>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	4652      	mov	r2, sl
 8002ed8:	4631      	mov	r1, r6
 8002eda:	4628      	mov	r0, r5
 8002edc:	47b8      	blx	r7
 8002ede:	3001      	adds	r0, #1
 8002ee0:	f43f af2b 	beq.w	8002d3a <_printf_float+0xb6>
 8002ee4:	f109 0901 	add.w	r9, r9, #1
 8002ee8:	e7e8      	b.n	8002ebc <_printf_float+0x238>
 8002eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	dc39      	bgt.n	8002f64 <_printf_float+0x2e0>
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <_printf_float+0x2dc>)
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	4631      	mov	r1, r6
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	47b8      	blx	r7
 8002efa:	3001      	adds	r0, #1
 8002efc:	f43f af1d 	beq.w	8002d3a <_printf_float+0xb6>
 8002f00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002f04:	ea59 0303 	orrs.w	r3, r9, r3
 8002f08:	d102      	bne.n	8002f10 <_printf_float+0x28c>
 8002f0a:	6823      	ldr	r3, [r4, #0]
 8002f0c:	07d9      	lsls	r1, r3, #31
 8002f0e:	d5d7      	bpl.n	8002ec0 <_printf_float+0x23c>
 8002f10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002f14:	4631      	mov	r1, r6
 8002f16:	4628      	mov	r0, r5
 8002f18:	47b8      	blx	r7
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	f43f af0d 	beq.w	8002d3a <_printf_float+0xb6>
 8002f20:	f04f 0a00 	mov.w	sl, #0
 8002f24:	f104 0b1a 	add.w	fp, r4, #26
 8002f28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f2a:	425b      	negs	r3, r3
 8002f2c:	4553      	cmp	r3, sl
 8002f2e:	dc01      	bgt.n	8002f34 <_printf_float+0x2b0>
 8002f30:	464b      	mov	r3, r9
 8002f32:	e793      	b.n	8002e5c <_printf_float+0x1d8>
 8002f34:	2301      	movs	r3, #1
 8002f36:	465a      	mov	r2, fp
 8002f38:	4631      	mov	r1, r6
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	47b8      	blx	r7
 8002f3e:	3001      	adds	r0, #1
 8002f40:	f43f aefb 	beq.w	8002d3a <_printf_float+0xb6>
 8002f44:	f10a 0a01 	add.w	sl, sl, #1
 8002f48:	e7ee      	b.n	8002f28 <_printf_float+0x2a4>
 8002f4a:	bf00      	nop
 8002f4c:	7fefffff 	.word	0x7fefffff
 8002f50:	08005834 	.word	0x08005834
 8002f54:	08005838 	.word	0x08005838
 8002f58:	0800583c 	.word	0x0800583c
 8002f5c:	08005840 	.word	0x08005840
 8002f60:	08005844 	.word	0x08005844
 8002f64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002f6a:	4553      	cmp	r3, sl
 8002f6c:	bfa8      	it	ge
 8002f6e:	4653      	movge	r3, sl
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	4699      	mov	r9, r3
 8002f74:	dc36      	bgt.n	8002fe4 <_printf_float+0x360>
 8002f76:	f04f 0b00 	mov.w	fp, #0
 8002f7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f7e:	f104 021a 	add.w	r2, r4, #26
 8002f82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f84:	9306      	str	r3, [sp, #24]
 8002f86:	eba3 0309 	sub.w	r3, r3, r9
 8002f8a:	455b      	cmp	r3, fp
 8002f8c:	dc31      	bgt.n	8002ff2 <_printf_float+0x36e>
 8002f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f90:	459a      	cmp	sl, r3
 8002f92:	dc3a      	bgt.n	800300a <_printf_float+0x386>
 8002f94:	6823      	ldr	r3, [r4, #0]
 8002f96:	07da      	lsls	r2, r3, #31
 8002f98:	d437      	bmi.n	800300a <_printf_float+0x386>
 8002f9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f9c:	ebaa 0903 	sub.w	r9, sl, r3
 8002fa0:	9b06      	ldr	r3, [sp, #24]
 8002fa2:	ebaa 0303 	sub.w	r3, sl, r3
 8002fa6:	4599      	cmp	r9, r3
 8002fa8:	bfa8      	it	ge
 8002faa:	4699      	movge	r9, r3
 8002fac:	f1b9 0f00 	cmp.w	r9, #0
 8002fb0:	dc33      	bgt.n	800301a <_printf_float+0x396>
 8002fb2:	f04f 0800 	mov.w	r8, #0
 8002fb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002fba:	f104 0b1a 	add.w	fp, r4, #26
 8002fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002fc0:	ebaa 0303 	sub.w	r3, sl, r3
 8002fc4:	eba3 0309 	sub.w	r3, r3, r9
 8002fc8:	4543      	cmp	r3, r8
 8002fca:	f77f af79 	ble.w	8002ec0 <_printf_float+0x23c>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	465a      	mov	r2, fp
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b8      	blx	r7
 8002fd8:	3001      	adds	r0, #1
 8002fda:	f43f aeae 	beq.w	8002d3a <_printf_float+0xb6>
 8002fde:	f108 0801 	add.w	r8, r8, #1
 8002fe2:	e7ec      	b.n	8002fbe <_printf_float+0x33a>
 8002fe4:	4642      	mov	r2, r8
 8002fe6:	4631      	mov	r1, r6
 8002fe8:	4628      	mov	r0, r5
 8002fea:	47b8      	blx	r7
 8002fec:	3001      	adds	r0, #1
 8002fee:	d1c2      	bne.n	8002f76 <_printf_float+0x2f2>
 8002ff0:	e6a3      	b.n	8002d3a <_printf_float+0xb6>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4631      	mov	r1, r6
 8002ff6:	4628      	mov	r0, r5
 8002ff8:	9206      	str	r2, [sp, #24]
 8002ffa:	47b8      	blx	r7
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	f43f ae9c 	beq.w	8002d3a <_printf_float+0xb6>
 8003002:	9a06      	ldr	r2, [sp, #24]
 8003004:	f10b 0b01 	add.w	fp, fp, #1
 8003008:	e7bb      	b.n	8002f82 <_printf_float+0x2fe>
 800300a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800300e:	4631      	mov	r1, r6
 8003010:	4628      	mov	r0, r5
 8003012:	47b8      	blx	r7
 8003014:	3001      	adds	r0, #1
 8003016:	d1c0      	bne.n	8002f9a <_printf_float+0x316>
 8003018:	e68f      	b.n	8002d3a <_printf_float+0xb6>
 800301a:	9a06      	ldr	r2, [sp, #24]
 800301c:	464b      	mov	r3, r9
 800301e:	4442      	add	r2, r8
 8003020:	4631      	mov	r1, r6
 8003022:	4628      	mov	r0, r5
 8003024:	47b8      	blx	r7
 8003026:	3001      	adds	r0, #1
 8003028:	d1c3      	bne.n	8002fb2 <_printf_float+0x32e>
 800302a:	e686      	b.n	8002d3a <_printf_float+0xb6>
 800302c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003030:	f1ba 0f01 	cmp.w	sl, #1
 8003034:	dc01      	bgt.n	800303a <_printf_float+0x3b6>
 8003036:	07db      	lsls	r3, r3, #31
 8003038:	d536      	bpl.n	80030a8 <_printf_float+0x424>
 800303a:	2301      	movs	r3, #1
 800303c:	4642      	mov	r2, r8
 800303e:	4631      	mov	r1, r6
 8003040:	4628      	mov	r0, r5
 8003042:	47b8      	blx	r7
 8003044:	3001      	adds	r0, #1
 8003046:	f43f ae78 	beq.w	8002d3a <_printf_float+0xb6>
 800304a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800304e:	4631      	mov	r1, r6
 8003050:	4628      	mov	r0, r5
 8003052:	47b8      	blx	r7
 8003054:	3001      	adds	r0, #1
 8003056:	f43f ae70 	beq.w	8002d3a <_printf_float+0xb6>
 800305a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800305e:	2200      	movs	r2, #0
 8003060:	2300      	movs	r3, #0
 8003062:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003066:	f7fd fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800306a:	b9c0      	cbnz	r0, 800309e <_printf_float+0x41a>
 800306c:	4653      	mov	r3, sl
 800306e:	f108 0201 	add.w	r2, r8, #1
 8003072:	4631      	mov	r1, r6
 8003074:	4628      	mov	r0, r5
 8003076:	47b8      	blx	r7
 8003078:	3001      	adds	r0, #1
 800307a:	d10c      	bne.n	8003096 <_printf_float+0x412>
 800307c:	e65d      	b.n	8002d3a <_printf_float+0xb6>
 800307e:	2301      	movs	r3, #1
 8003080:	465a      	mov	r2, fp
 8003082:	4631      	mov	r1, r6
 8003084:	4628      	mov	r0, r5
 8003086:	47b8      	blx	r7
 8003088:	3001      	adds	r0, #1
 800308a:	f43f ae56 	beq.w	8002d3a <_printf_float+0xb6>
 800308e:	f108 0801 	add.w	r8, r8, #1
 8003092:	45d0      	cmp	r8, sl
 8003094:	dbf3      	blt.n	800307e <_printf_float+0x3fa>
 8003096:	464b      	mov	r3, r9
 8003098:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800309c:	e6df      	b.n	8002e5e <_printf_float+0x1da>
 800309e:	f04f 0800 	mov.w	r8, #0
 80030a2:	f104 0b1a 	add.w	fp, r4, #26
 80030a6:	e7f4      	b.n	8003092 <_printf_float+0x40e>
 80030a8:	2301      	movs	r3, #1
 80030aa:	4642      	mov	r2, r8
 80030ac:	e7e1      	b.n	8003072 <_printf_float+0x3ee>
 80030ae:	2301      	movs	r3, #1
 80030b0:	464a      	mov	r2, r9
 80030b2:	4631      	mov	r1, r6
 80030b4:	4628      	mov	r0, r5
 80030b6:	47b8      	blx	r7
 80030b8:	3001      	adds	r0, #1
 80030ba:	f43f ae3e 	beq.w	8002d3a <_printf_float+0xb6>
 80030be:	f108 0801 	add.w	r8, r8, #1
 80030c2:	68e3      	ldr	r3, [r4, #12]
 80030c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80030c6:	1a5b      	subs	r3, r3, r1
 80030c8:	4543      	cmp	r3, r8
 80030ca:	dcf0      	bgt.n	80030ae <_printf_float+0x42a>
 80030cc:	e6fc      	b.n	8002ec8 <_printf_float+0x244>
 80030ce:	f04f 0800 	mov.w	r8, #0
 80030d2:	f104 0919 	add.w	r9, r4, #25
 80030d6:	e7f4      	b.n	80030c2 <_printf_float+0x43e>

080030d8 <_printf_common>:
 80030d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030dc:	4616      	mov	r6, r2
 80030de:	4698      	mov	r8, r3
 80030e0:	688a      	ldr	r2, [r1, #8]
 80030e2:	690b      	ldr	r3, [r1, #16]
 80030e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030e8:	4293      	cmp	r3, r2
 80030ea:	bfb8      	it	lt
 80030ec:	4613      	movlt	r3, r2
 80030ee:	6033      	str	r3, [r6, #0]
 80030f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030f4:	4607      	mov	r7, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	b10a      	cbz	r2, 80030fe <_printf_common+0x26>
 80030fa:	3301      	adds	r3, #1
 80030fc:	6033      	str	r3, [r6, #0]
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	0699      	lsls	r1, r3, #26
 8003102:	bf42      	ittt	mi
 8003104:	6833      	ldrmi	r3, [r6, #0]
 8003106:	3302      	addmi	r3, #2
 8003108:	6033      	strmi	r3, [r6, #0]
 800310a:	6825      	ldr	r5, [r4, #0]
 800310c:	f015 0506 	ands.w	r5, r5, #6
 8003110:	d106      	bne.n	8003120 <_printf_common+0x48>
 8003112:	f104 0a19 	add.w	sl, r4, #25
 8003116:	68e3      	ldr	r3, [r4, #12]
 8003118:	6832      	ldr	r2, [r6, #0]
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	42ab      	cmp	r3, r5
 800311e:	dc26      	bgt.n	800316e <_printf_common+0x96>
 8003120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003124:	6822      	ldr	r2, [r4, #0]
 8003126:	3b00      	subs	r3, #0
 8003128:	bf18      	it	ne
 800312a:	2301      	movne	r3, #1
 800312c:	0692      	lsls	r2, r2, #26
 800312e:	d42b      	bmi.n	8003188 <_printf_common+0xb0>
 8003130:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003134:	4641      	mov	r1, r8
 8003136:	4638      	mov	r0, r7
 8003138:	47c8      	blx	r9
 800313a:	3001      	adds	r0, #1
 800313c:	d01e      	beq.n	800317c <_printf_common+0xa4>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	6922      	ldr	r2, [r4, #16]
 8003142:	f003 0306 	and.w	r3, r3, #6
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf02      	ittt	eq
 800314a:	68e5      	ldreq	r5, [r4, #12]
 800314c:	6833      	ldreq	r3, [r6, #0]
 800314e:	1aed      	subeq	r5, r5, r3
 8003150:	68a3      	ldr	r3, [r4, #8]
 8003152:	bf0c      	ite	eq
 8003154:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003158:	2500      	movne	r5, #0
 800315a:	4293      	cmp	r3, r2
 800315c:	bfc4      	itt	gt
 800315e:	1a9b      	subgt	r3, r3, r2
 8003160:	18ed      	addgt	r5, r5, r3
 8003162:	2600      	movs	r6, #0
 8003164:	341a      	adds	r4, #26
 8003166:	42b5      	cmp	r5, r6
 8003168:	d11a      	bne.n	80031a0 <_printf_common+0xc8>
 800316a:	2000      	movs	r0, #0
 800316c:	e008      	b.n	8003180 <_printf_common+0xa8>
 800316e:	2301      	movs	r3, #1
 8003170:	4652      	mov	r2, sl
 8003172:	4641      	mov	r1, r8
 8003174:	4638      	mov	r0, r7
 8003176:	47c8      	blx	r9
 8003178:	3001      	adds	r0, #1
 800317a:	d103      	bne.n	8003184 <_printf_common+0xac>
 800317c:	f04f 30ff 	mov.w	r0, #4294967295
 8003180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003184:	3501      	adds	r5, #1
 8003186:	e7c6      	b.n	8003116 <_printf_common+0x3e>
 8003188:	18e1      	adds	r1, r4, r3
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	2030      	movs	r0, #48	@ 0x30
 800318e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003192:	4422      	add	r2, r4
 8003194:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003198:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800319c:	3302      	adds	r3, #2
 800319e:	e7c7      	b.n	8003130 <_printf_common+0x58>
 80031a0:	2301      	movs	r3, #1
 80031a2:	4622      	mov	r2, r4
 80031a4:	4641      	mov	r1, r8
 80031a6:	4638      	mov	r0, r7
 80031a8:	47c8      	blx	r9
 80031aa:	3001      	adds	r0, #1
 80031ac:	d0e6      	beq.n	800317c <_printf_common+0xa4>
 80031ae:	3601      	adds	r6, #1
 80031b0:	e7d9      	b.n	8003166 <_printf_common+0x8e>
	...

080031b4 <_printf_i>:
 80031b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031b8:	7e0f      	ldrb	r7, [r1, #24]
 80031ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80031bc:	2f78      	cmp	r7, #120	@ 0x78
 80031be:	4691      	mov	r9, r2
 80031c0:	4680      	mov	r8, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	469a      	mov	sl, r3
 80031c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80031ca:	d807      	bhi.n	80031dc <_printf_i+0x28>
 80031cc:	2f62      	cmp	r7, #98	@ 0x62
 80031ce:	d80a      	bhi.n	80031e6 <_printf_i+0x32>
 80031d0:	2f00      	cmp	r7, #0
 80031d2:	f000 80d2 	beq.w	800337a <_printf_i+0x1c6>
 80031d6:	2f58      	cmp	r7, #88	@ 0x58
 80031d8:	f000 80b9 	beq.w	800334e <_printf_i+0x19a>
 80031dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031e4:	e03a      	b.n	800325c <_printf_i+0xa8>
 80031e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031ea:	2b15      	cmp	r3, #21
 80031ec:	d8f6      	bhi.n	80031dc <_printf_i+0x28>
 80031ee:	a101      	add	r1, pc, #4	@ (adr r1, 80031f4 <_printf_i+0x40>)
 80031f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031f4:	0800324d 	.word	0x0800324d
 80031f8:	08003261 	.word	0x08003261
 80031fc:	080031dd 	.word	0x080031dd
 8003200:	080031dd 	.word	0x080031dd
 8003204:	080031dd 	.word	0x080031dd
 8003208:	080031dd 	.word	0x080031dd
 800320c:	08003261 	.word	0x08003261
 8003210:	080031dd 	.word	0x080031dd
 8003214:	080031dd 	.word	0x080031dd
 8003218:	080031dd 	.word	0x080031dd
 800321c:	080031dd 	.word	0x080031dd
 8003220:	08003361 	.word	0x08003361
 8003224:	0800328b 	.word	0x0800328b
 8003228:	0800331b 	.word	0x0800331b
 800322c:	080031dd 	.word	0x080031dd
 8003230:	080031dd 	.word	0x080031dd
 8003234:	08003383 	.word	0x08003383
 8003238:	080031dd 	.word	0x080031dd
 800323c:	0800328b 	.word	0x0800328b
 8003240:	080031dd 	.word	0x080031dd
 8003244:	080031dd 	.word	0x080031dd
 8003248:	08003323 	.word	0x08003323
 800324c:	6833      	ldr	r3, [r6, #0]
 800324e:	1d1a      	adds	r2, r3, #4
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6032      	str	r2, [r6, #0]
 8003254:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003258:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800325c:	2301      	movs	r3, #1
 800325e:	e09d      	b.n	800339c <_printf_i+0x1e8>
 8003260:	6833      	ldr	r3, [r6, #0]
 8003262:	6820      	ldr	r0, [r4, #0]
 8003264:	1d19      	adds	r1, r3, #4
 8003266:	6031      	str	r1, [r6, #0]
 8003268:	0606      	lsls	r6, r0, #24
 800326a:	d501      	bpl.n	8003270 <_printf_i+0xbc>
 800326c:	681d      	ldr	r5, [r3, #0]
 800326e:	e003      	b.n	8003278 <_printf_i+0xc4>
 8003270:	0645      	lsls	r5, r0, #25
 8003272:	d5fb      	bpl.n	800326c <_printf_i+0xb8>
 8003274:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003278:	2d00      	cmp	r5, #0
 800327a:	da03      	bge.n	8003284 <_printf_i+0xd0>
 800327c:	232d      	movs	r3, #45	@ 0x2d
 800327e:	426d      	negs	r5, r5
 8003280:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003284:	4859      	ldr	r0, [pc, #356]	@ (80033ec <_printf_i+0x238>)
 8003286:	230a      	movs	r3, #10
 8003288:	e011      	b.n	80032ae <_printf_i+0xfa>
 800328a:	6821      	ldr	r1, [r4, #0]
 800328c:	6833      	ldr	r3, [r6, #0]
 800328e:	0608      	lsls	r0, r1, #24
 8003290:	f853 5b04 	ldr.w	r5, [r3], #4
 8003294:	d402      	bmi.n	800329c <_printf_i+0xe8>
 8003296:	0649      	lsls	r1, r1, #25
 8003298:	bf48      	it	mi
 800329a:	b2ad      	uxthmi	r5, r5
 800329c:	2f6f      	cmp	r7, #111	@ 0x6f
 800329e:	4853      	ldr	r0, [pc, #332]	@ (80033ec <_printf_i+0x238>)
 80032a0:	6033      	str	r3, [r6, #0]
 80032a2:	bf14      	ite	ne
 80032a4:	230a      	movne	r3, #10
 80032a6:	2308      	moveq	r3, #8
 80032a8:	2100      	movs	r1, #0
 80032aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80032ae:	6866      	ldr	r6, [r4, #4]
 80032b0:	60a6      	str	r6, [r4, #8]
 80032b2:	2e00      	cmp	r6, #0
 80032b4:	bfa2      	ittt	ge
 80032b6:	6821      	ldrge	r1, [r4, #0]
 80032b8:	f021 0104 	bicge.w	r1, r1, #4
 80032bc:	6021      	strge	r1, [r4, #0]
 80032be:	b90d      	cbnz	r5, 80032c4 <_printf_i+0x110>
 80032c0:	2e00      	cmp	r6, #0
 80032c2:	d04b      	beq.n	800335c <_printf_i+0x1a8>
 80032c4:	4616      	mov	r6, r2
 80032c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80032ca:	fb03 5711 	mls	r7, r3, r1, r5
 80032ce:	5dc7      	ldrb	r7, [r0, r7]
 80032d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80032d4:	462f      	mov	r7, r5
 80032d6:	42bb      	cmp	r3, r7
 80032d8:	460d      	mov	r5, r1
 80032da:	d9f4      	bls.n	80032c6 <_printf_i+0x112>
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d10b      	bne.n	80032f8 <_printf_i+0x144>
 80032e0:	6823      	ldr	r3, [r4, #0]
 80032e2:	07df      	lsls	r7, r3, #31
 80032e4:	d508      	bpl.n	80032f8 <_printf_i+0x144>
 80032e6:	6923      	ldr	r3, [r4, #16]
 80032e8:	6861      	ldr	r1, [r4, #4]
 80032ea:	4299      	cmp	r1, r3
 80032ec:	bfde      	ittt	le
 80032ee:	2330      	movle	r3, #48	@ 0x30
 80032f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032f8:	1b92      	subs	r2, r2, r6
 80032fa:	6122      	str	r2, [r4, #16]
 80032fc:	f8cd a000 	str.w	sl, [sp]
 8003300:	464b      	mov	r3, r9
 8003302:	aa03      	add	r2, sp, #12
 8003304:	4621      	mov	r1, r4
 8003306:	4640      	mov	r0, r8
 8003308:	f7ff fee6 	bl	80030d8 <_printf_common>
 800330c:	3001      	adds	r0, #1
 800330e:	d14a      	bne.n	80033a6 <_printf_i+0x1f2>
 8003310:	f04f 30ff 	mov.w	r0, #4294967295
 8003314:	b004      	add	sp, #16
 8003316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800331a:	6823      	ldr	r3, [r4, #0]
 800331c:	f043 0320 	orr.w	r3, r3, #32
 8003320:	6023      	str	r3, [r4, #0]
 8003322:	4833      	ldr	r0, [pc, #204]	@ (80033f0 <_printf_i+0x23c>)
 8003324:	2778      	movs	r7, #120	@ 0x78
 8003326:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	6831      	ldr	r1, [r6, #0]
 800332e:	061f      	lsls	r7, r3, #24
 8003330:	f851 5b04 	ldr.w	r5, [r1], #4
 8003334:	d402      	bmi.n	800333c <_printf_i+0x188>
 8003336:	065f      	lsls	r7, r3, #25
 8003338:	bf48      	it	mi
 800333a:	b2ad      	uxthmi	r5, r5
 800333c:	6031      	str	r1, [r6, #0]
 800333e:	07d9      	lsls	r1, r3, #31
 8003340:	bf44      	itt	mi
 8003342:	f043 0320 	orrmi.w	r3, r3, #32
 8003346:	6023      	strmi	r3, [r4, #0]
 8003348:	b11d      	cbz	r5, 8003352 <_printf_i+0x19e>
 800334a:	2310      	movs	r3, #16
 800334c:	e7ac      	b.n	80032a8 <_printf_i+0xf4>
 800334e:	4827      	ldr	r0, [pc, #156]	@ (80033ec <_printf_i+0x238>)
 8003350:	e7e9      	b.n	8003326 <_printf_i+0x172>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	f023 0320 	bic.w	r3, r3, #32
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	e7f6      	b.n	800334a <_printf_i+0x196>
 800335c:	4616      	mov	r6, r2
 800335e:	e7bd      	b.n	80032dc <_printf_i+0x128>
 8003360:	6833      	ldr	r3, [r6, #0]
 8003362:	6825      	ldr	r5, [r4, #0]
 8003364:	6961      	ldr	r1, [r4, #20]
 8003366:	1d18      	adds	r0, r3, #4
 8003368:	6030      	str	r0, [r6, #0]
 800336a:	062e      	lsls	r6, r5, #24
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	d501      	bpl.n	8003374 <_printf_i+0x1c0>
 8003370:	6019      	str	r1, [r3, #0]
 8003372:	e002      	b.n	800337a <_printf_i+0x1c6>
 8003374:	0668      	lsls	r0, r5, #25
 8003376:	d5fb      	bpl.n	8003370 <_printf_i+0x1bc>
 8003378:	8019      	strh	r1, [r3, #0]
 800337a:	2300      	movs	r3, #0
 800337c:	6123      	str	r3, [r4, #16]
 800337e:	4616      	mov	r6, r2
 8003380:	e7bc      	b.n	80032fc <_printf_i+0x148>
 8003382:	6833      	ldr	r3, [r6, #0]
 8003384:	1d1a      	adds	r2, r3, #4
 8003386:	6032      	str	r2, [r6, #0]
 8003388:	681e      	ldr	r6, [r3, #0]
 800338a:	6862      	ldr	r2, [r4, #4]
 800338c:	2100      	movs	r1, #0
 800338e:	4630      	mov	r0, r6
 8003390:	f7fc ff26 	bl	80001e0 <memchr>
 8003394:	b108      	cbz	r0, 800339a <_printf_i+0x1e6>
 8003396:	1b80      	subs	r0, r0, r6
 8003398:	6060      	str	r0, [r4, #4]
 800339a:	6863      	ldr	r3, [r4, #4]
 800339c:	6123      	str	r3, [r4, #16]
 800339e:	2300      	movs	r3, #0
 80033a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80033a4:	e7aa      	b.n	80032fc <_printf_i+0x148>
 80033a6:	6923      	ldr	r3, [r4, #16]
 80033a8:	4632      	mov	r2, r6
 80033aa:	4649      	mov	r1, r9
 80033ac:	4640      	mov	r0, r8
 80033ae:	47d0      	blx	sl
 80033b0:	3001      	adds	r0, #1
 80033b2:	d0ad      	beq.n	8003310 <_printf_i+0x15c>
 80033b4:	6823      	ldr	r3, [r4, #0]
 80033b6:	079b      	lsls	r3, r3, #30
 80033b8:	d413      	bmi.n	80033e2 <_printf_i+0x22e>
 80033ba:	68e0      	ldr	r0, [r4, #12]
 80033bc:	9b03      	ldr	r3, [sp, #12]
 80033be:	4298      	cmp	r0, r3
 80033c0:	bfb8      	it	lt
 80033c2:	4618      	movlt	r0, r3
 80033c4:	e7a6      	b.n	8003314 <_printf_i+0x160>
 80033c6:	2301      	movs	r3, #1
 80033c8:	4632      	mov	r2, r6
 80033ca:	4649      	mov	r1, r9
 80033cc:	4640      	mov	r0, r8
 80033ce:	47d0      	blx	sl
 80033d0:	3001      	adds	r0, #1
 80033d2:	d09d      	beq.n	8003310 <_printf_i+0x15c>
 80033d4:	3501      	adds	r5, #1
 80033d6:	68e3      	ldr	r3, [r4, #12]
 80033d8:	9903      	ldr	r1, [sp, #12]
 80033da:	1a5b      	subs	r3, r3, r1
 80033dc:	42ab      	cmp	r3, r5
 80033de:	dcf2      	bgt.n	80033c6 <_printf_i+0x212>
 80033e0:	e7eb      	b.n	80033ba <_printf_i+0x206>
 80033e2:	2500      	movs	r5, #0
 80033e4:	f104 0619 	add.w	r6, r4, #25
 80033e8:	e7f5      	b.n	80033d6 <_printf_i+0x222>
 80033ea:	bf00      	nop
 80033ec:	08005846 	.word	0x08005846
 80033f0:	08005857 	.word	0x08005857

080033f4 <std>:
 80033f4:	2300      	movs	r3, #0
 80033f6:	b510      	push	{r4, lr}
 80033f8:	4604      	mov	r4, r0
 80033fa:	e9c0 3300 	strd	r3, r3, [r0]
 80033fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003402:	6083      	str	r3, [r0, #8]
 8003404:	8181      	strh	r1, [r0, #12]
 8003406:	6643      	str	r3, [r0, #100]	@ 0x64
 8003408:	81c2      	strh	r2, [r0, #14]
 800340a:	6183      	str	r3, [r0, #24]
 800340c:	4619      	mov	r1, r3
 800340e:	2208      	movs	r2, #8
 8003410:	305c      	adds	r0, #92	@ 0x5c
 8003412:	f000 f914 	bl	800363e <memset>
 8003416:	4b0d      	ldr	r3, [pc, #52]	@ (800344c <std+0x58>)
 8003418:	6263      	str	r3, [r4, #36]	@ 0x24
 800341a:	4b0d      	ldr	r3, [pc, #52]	@ (8003450 <std+0x5c>)
 800341c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <std+0x60>)
 8003420:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003422:	4b0d      	ldr	r3, [pc, #52]	@ (8003458 <std+0x64>)
 8003424:	6323      	str	r3, [r4, #48]	@ 0x30
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <std+0x68>)
 8003428:	6224      	str	r4, [r4, #32]
 800342a:	429c      	cmp	r4, r3
 800342c:	d006      	beq.n	800343c <std+0x48>
 800342e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003432:	4294      	cmp	r4, r2
 8003434:	d002      	beq.n	800343c <std+0x48>
 8003436:	33d0      	adds	r3, #208	@ 0xd0
 8003438:	429c      	cmp	r4, r3
 800343a:	d105      	bne.n	8003448 <std+0x54>
 800343c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003444:	f000 b978 	b.w	8003738 <__retarget_lock_init_recursive>
 8003448:	bd10      	pop	{r4, pc}
 800344a:	bf00      	nop
 800344c:	080035b9 	.word	0x080035b9
 8003450:	080035db 	.word	0x080035db
 8003454:	08003613 	.word	0x08003613
 8003458:	08003637 	.word	0x08003637
 800345c:	20000240 	.word	0x20000240

08003460 <stdio_exit_handler>:
 8003460:	4a02      	ldr	r2, [pc, #8]	@ (800346c <stdio_exit_handler+0xc>)
 8003462:	4903      	ldr	r1, [pc, #12]	@ (8003470 <stdio_exit_handler+0x10>)
 8003464:	4803      	ldr	r0, [pc, #12]	@ (8003474 <stdio_exit_handler+0x14>)
 8003466:	f000 b869 	b.w	800353c <_fwalk_sglue>
 800346a:	bf00      	nop
 800346c:	2000000c 	.word	0x2000000c
 8003470:	08005095 	.word	0x08005095
 8003474:	2000001c 	.word	0x2000001c

08003478 <cleanup_stdio>:
 8003478:	6841      	ldr	r1, [r0, #4]
 800347a:	4b0c      	ldr	r3, [pc, #48]	@ (80034ac <cleanup_stdio+0x34>)
 800347c:	4299      	cmp	r1, r3
 800347e:	b510      	push	{r4, lr}
 8003480:	4604      	mov	r4, r0
 8003482:	d001      	beq.n	8003488 <cleanup_stdio+0x10>
 8003484:	f001 fe06 	bl	8005094 <_fflush_r>
 8003488:	68a1      	ldr	r1, [r4, #8]
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <cleanup_stdio+0x38>)
 800348c:	4299      	cmp	r1, r3
 800348e:	d002      	beq.n	8003496 <cleanup_stdio+0x1e>
 8003490:	4620      	mov	r0, r4
 8003492:	f001 fdff 	bl	8005094 <_fflush_r>
 8003496:	68e1      	ldr	r1, [r4, #12]
 8003498:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <cleanup_stdio+0x3c>)
 800349a:	4299      	cmp	r1, r3
 800349c:	d004      	beq.n	80034a8 <cleanup_stdio+0x30>
 800349e:	4620      	mov	r0, r4
 80034a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034a4:	f001 bdf6 	b.w	8005094 <_fflush_r>
 80034a8:	bd10      	pop	{r4, pc}
 80034aa:	bf00      	nop
 80034ac:	20000240 	.word	0x20000240
 80034b0:	200002a8 	.word	0x200002a8
 80034b4:	20000310 	.word	0x20000310

080034b8 <global_stdio_init.part.0>:
 80034b8:	b510      	push	{r4, lr}
 80034ba:	4b0b      	ldr	r3, [pc, #44]	@ (80034e8 <global_stdio_init.part.0+0x30>)
 80034bc:	4c0b      	ldr	r4, [pc, #44]	@ (80034ec <global_stdio_init.part.0+0x34>)
 80034be:	4a0c      	ldr	r2, [pc, #48]	@ (80034f0 <global_stdio_init.part.0+0x38>)
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	4620      	mov	r0, r4
 80034c4:	2200      	movs	r2, #0
 80034c6:	2104      	movs	r1, #4
 80034c8:	f7ff ff94 	bl	80033f4 <std>
 80034cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80034d0:	2201      	movs	r2, #1
 80034d2:	2109      	movs	r1, #9
 80034d4:	f7ff ff8e 	bl	80033f4 <std>
 80034d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80034dc:	2202      	movs	r2, #2
 80034de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034e2:	2112      	movs	r1, #18
 80034e4:	f7ff bf86 	b.w	80033f4 <std>
 80034e8:	20000378 	.word	0x20000378
 80034ec:	20000240 	.word	0x20000240
 80034f0:	08003461 	.word	0x08003461

080034f4 <__sfp_lock_acquire>:
 80034f4:	4801      	ldr	r0, [pc, #4]	@ (80034fc <__sfp_lock_acquire+0x8>)
 80034f6:	f000 b920 	b.w	800373a <__retarget_lock_acquire_recursive>
 80034fa:	bf00      	nop
 80034fc:	20000381 	.word	0x20000381

08003500 <__sfp_lock_release>:
 8003500:	4801      	ldr	r0, [pc, #4]	@ (8003508 <__sfp_lock_release+0x8>)
 8003502:	f000 b91b 	b.w	800373c <__retarget_lock_release_recursive>
 8003506:	bf00      	nop
 8003508:	20000381 	.word	0x20000381

0800350c <__sinit>:
 800350c:	b510      	push	{r4, lr}
 800350e:	4604      	mov	r4, r0
 8003510:	f7ff fff0 	bl	80034f4 <__sfp_lock_acquire>
 8003514:	6a23      	ldr	r3, [r4, #32]
 8003516:	b11b      	cbz	r3, 8003520 <__sinit+0x14>
 8003518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800351c:	f7ff bff0 	b.w	8003500 <__sfp_lock_release>
 8003520:	4b04      	ldr	r3, [pc, #16]	@ (8003534 <__sinit+0x28>)
 8003522:	6223      	str	r3, [r4, #32]
 8003524:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <__sinit+0x2c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1f5      	bne.n	8003518 <__sinit+0xc>
 800352c:	f7ff ffc4 	bl	80034b8 <global_stdio_init.part.0>
 8003530:	e7f2      	b.n	8003518 <__sinit+0xc>
 8003532:	bf00      	nop
 8003534:	08003479 	.word	0x08003479
 8003538:	20000378 	.word	0x20000378

0800353c <_fwalk_sglue>:
 800353c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003540:	4607      	mov	r7, r0
 8003542:	4688      	mov	r8, r1
 8003544:	4614      	mov	r4, r2
 8003546:	2600      	movs	r6, #0
 8003548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800354c:	f1b9 0901 	subs.w	r9, r9, #1
 8003550:	d505      	bpl.n	800355e <_fwalk_sglue+0x22>
 8003552:	6824      	ldr	r4, [r4, #0]
 8003554:	2c00      	cmp	r4, #0
 8003556:	d1f7      	bne.n	8003548 <_fwalk_sglue+0xc>
 8003558:	4630      	mov	r0, r6
 800355a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800355e:	89ab      	ldrh	r3, [r5, #12]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d907      	bls.n	8003574 <_fwalk_sglue+0x38>
 8003564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003568:	3301      	adds	r3, #1
 800356a:	d003      	beq.n	8003574 <_fwalk_sglue+0x38>
 800356c:	4629      	mov	r1, r5
 800356e:	4638      	mov	r0, r7
 8003570:	47c0      	blx	r8
 8003572:	4306      	orrs	r6, r0
 8003574:	3568      	adds	r5, #104	@ 0x68
 8003576:	e7e9      	b.n	800354c <_fwalk_sglue+0x10>

08003578 <siprintf>:
 8003578:	b40e      	push	{r1, r2, r3}
 800357a:	b500      	push	{lr}
 800357c:	b09c      	sub	sp, #112	@ 0x70
 800357e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003580:	9002      	str	r0, [sp, #8]
 8003582:	9006      	str	r0, [sp, #24]
 8003584:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003588:	4809      	ldr	r0, [pc, #36]	@ (80035b0 <siprintf+0x38>)
 800358a:	9107      	str	r1, [sp, #28]
 800358c:	9104      	str	r1, [sp, #16]
 800358e:	4909      	ldr	r1, [pc, #36]	@ (80035b4 <siprintf+0x3c>)
 8003590:	f853 2b04 	ldr.w	r2, [r3], #4
 8003594:	9105      	str	r1, [sp, #20]
 8003596:	6800      	ldr	r0, [r0, #0]
 8003598:	9301      	str	r3, [sp, #4]
 800359a:	a902      	add	r1, sp, #8
 800359c:	f001 fbfa 	bl	8004d94 <_svfiprintf_r>
 80035a0:	9b02      	ldr	r3, [sp, #8]
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
 80035a6:	b01c      	add	sp, #112	@ 0x70
 80035a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80035ac:	b003      	add	sp, #12
 80035ae:	4770      	bx	lr
 80035b0:	20000018 	.word	0x20000018
 80035b4:	ffff0208 	.word	0xffff0208

080035b8 <__sread>:
 80035b8:	b510      	push	{r4, lr}
 80035ba:	460c      	mov	r4, r1
 80035bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035c0:	f000 f86c 	bl	800369c <_read_r>
 80035c4:	2800      	cmp	r0, #0
 80035c6:	bfab      	itete	ge
 80035c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80035ca:	89a3      	ldrhlt	r3, [r4, #12]
 80035cc:	181b      	addge	r3, r3, r0
 80035ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80035d2:	bfac      	ite	ge
 80035d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80035d6:	81a3      	strhlt	r3, [r4, #12]
 80035d8:	bd10      	pop	{r4, pc}

080035da <__swrite>:
 80035da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035de:	461f      	mov	r7, r3
 80035e0:	898b      	ldrh	r3, [r1, #12]
 80035e2:	05db      	lsls	r3, r3, #23
 80035e4:	4605      	mov	r5, r0
 80035e6:	460c      	mov	r4, r1
 80035e8:	4616      	mov	r6, r2
 80035ea:	d505      	bpl.n	80035f8 <__swrite+0x1e>
 80035ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035f0:	2302      	movs	r3, #2
 80035f2:	2200      	movs	r2, #0
 80035f4:	f000 f840 	bl	8003678 <_lseek_r>
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80035fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	4632      	mov	r2, r6
 8003606:	463b      	mov	r3, r7
 8003608:	4628      	mov	r0, r5
 800360a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800360e:	f000 b857 	b.w	80036c0 <_write_r>

08003612 <__sseek>:
 8003612:	b510      	push	{r4, lr}
 8003614:	460c      	mov	r4, r1
 8003616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800361a:	f000 f82d 	bl	8003678 <_lseek_r>
 800361e:	1c43      	adds	r3, r0, #1
 8003620:	89a3      	ldrh	r3, [r4, #12]
 8003622:	bf15      	itete	ne
 8003624:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003626:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800362a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800362e:	81a3      	strheq	r3, [r4, #12]
 8003630:	bf18      	it	ne
 8003632:	81a3      	strhne	r3, [r4, #12]
 8003634:	bd10      	pop	{r4, pc}

08003636 <__sclose>:
 8003636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800363a:	f000 b80d 	b.w	8003658 <_close_r>

0800363e <memset>:
 800363e:	4402      	add	r2, r0
 8003640:	4603      	mov	r3, r0
 8003642:	4293      	cmp	r3, r2
 8003644:	d100      	bne.n	8003648 <memset+0xa>
 8003646:	4770      	bx	lr
 8003648:	f803 1b01 	strb.w	r1, [r3], #1
 800364c:	e7f9      	b.n	8003642 <memset+0x4>
	...

08003650 <_localeconv_r>:
 8003650:	4800      	ldr	r0, [pc, #0]	@ (8003654 <_localeconv_r+0x4>)
 8003652:	4770      	bx	lr
 8003654:	20000158 	.word	0x20000158

08003658 <_close_r>:
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4d06      	ldr	r5, [pc, #24]	@ (8003674 <_close_r+0x1c>)
 800365c:	2300      	movs	r3, #0
 800365e:	4604      	mov	r4, r0
 8003660:	4608      	mov	r0, r1
 8003662:	602b      	str	r3, [r5, #0]
 8003664:	f7fd fe63 	bl	800132e <_close>
 8003668:	1c43      	adds	r3, r0, #1
 800366a:	d102      	bne.n	8003672 <_close_r+0x1a>
 800366c:	682b      	ldr	r3, [r5, #0]
 800366e:	b103      	cbz	r3, 8003672 <_close_r+0x1a>
 8003670:	6023      	str	r3, [r4, #0]
 8003672:	bd38      	pop	{r3, r4, r5, pc}
 8003674:	2000037c 	.word	0x2000037c

08003678 <_lseek_r>:
 8003678:	b538      	push	{r3, r4, r5, lr}
 800367a:	4d07      	ldr	r5, [pc, #28]	@ (8003698 <_lseek_r+0x20>)
 800367c:	4604      	mov	r4, r0
 800367e:	4608      	mov	r0, r1
 8003680:	4611      	mov	r1, r2
 8003682:	2200      	movs	r2, #0
 8003684:	602a      	str	r2, [r5, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	f7fd fe78 	bl	800137c <_lseek>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	d102      	bne.n	8003696 <_lseek_r+0x1e>
 8003690:	682b      	ldr	r3, [r5, #0]
 8003692:	b103      	cbz	r3, 8003696 <_lseek_r+0x1e>
 8003694:	6023      	str	r3, [r4, #0]
 8003696:	bd38      	pop	{r3, r4, r5, pc}
 8003698:	2000037c 	.word	0x2000037c

0800369c <_read_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	4d07      	ldr	r5, [pc, #28]	@ (80036bc <_read_r+0x20>)
 80036a0:	4604      	mov	r4, r0
 80036a2:	4608      	mov	r0, r1
 80036a4:	4611      	mov	r1, r2
 80036a6:	2200      	movs	r2, #0
 80036a8:	602a      	str	r2, [r5, #0]
 80036aa:	461a      	mov	r2, r3
 80036ac:	f7fd fe06 	bl	80012bc <_read>
 80036b0:	1c43      	adds	r3, r0, #1
 80036b2:	d102      	bne.n	80036ba <_read_r+0x1e>
 80036b4:	682b      	ldr	r3, [r5, #0]
 80036b6:	b103      	cbz	r3, 80036ba <_read_r+0x1e>
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	bd38      	pop	{r3, r4, r5, pc}
 80036bc:	2000037c 	.word	0x2000037c

080036c0 <_write_r>:
 80036c0:	b538      	push	{r3, r4, r5, lr}
 80036c2:	4d07      	ldr	r5, [pc, #28]	@ (80036e0 <_write_r+0x20>)
 80036c4:	4604      	mov	r4, r0
 80036c6:	4608      	mov	r0, r1
 80036c8:	4611      	mov	r1, r2
 80036ca:	2200      	movs	r2, #0
 80036cc:	602a      	str	r2, [r5, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	f7fd fe11 	bl	80012f6 <_write>
 80036d4:	1c43      	adds	r3, r0, #1
 80036d6:	d102      	bne.n	80036de <_write_r+0x1e>
 80036d8:	682b      	ldr	r3, [r5, #0]
 80036da:	b103      	cbz	r3, 80036de <_write_r+0x1e>
 80036dc:	6023      	str	r3, [r4, #0]
 80036de:	bd38      	pop	{r3, r4, r5, pc}
 80036e0:	2000037c 	.word	0x2000037c

080036e4 <__errno>:
 80036e4:	4b01      	ldr	r3, [pc, #4]	@ (80036ec <__errno+0x8>)
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000018 	.word	0x20000018

080036f0 <__libc_init_array>:
 80036f0:	b570      	push	{r4, r5, r6, lr}
 80036f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003728 <__libc_init_array+0x38>)
 80036f4:	4c0d      	ldr	r4, [pc, #52]	@ (800372c <__libc_init_array+0x3c>)
 80036f6:	1b64      	subs	r4, r4, r5
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	2600      	movs	r6, #0
 80036fc:	42a6      	cmp	r6, r4
 80036fe:	d109      	bne.n	8003714 <__libc_init_array+0x24>
 8003700:	4d0b      	ldr	r5, [pc, #44]	@ (8003730 <__libc_init_array+0x40>)
 8003702:	4c0c      	ldr	r4, [pc, #48]	@ (8003734 <__libc_init_array+0x44>)
 8003704:	f002 f864 	bl	80057d0 <_init>
 8003708:	1b64      	subs	r4, r4, r5
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2600      	movs	r6, #0
 800370e:	42a6      	cmp	r6, r4
 8003710:	d105      	bne.n	800371e <__libc_init_array+0x2e>
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	f855 3b04 	ldr.w	r3, [r5], #4
 8003718:	4798      	blx	r3
 800371a:	3601      	adds	r6, #1
 800371c:	e7ee      	b.n	80036fc <__libc_init_array+0xc>
 800371e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003722:	4798      	blx	r3
 8003724:	3601      	adds	r6, #1
 8003726:	e7f2      	b.n	800370e <__libc_init_array+0x1e>
 8003728:	08005bb0 	.word	0x08005bb0
 800372c:	08005bb0 	.word	0x08005bb0
 8003730:	08005bb0 	.word	0x08005bb0
 8003734:	08005bb4 	.word	0x08005bb4

08003738 <__retarget_lock_init_recursive>:
 8003738:	4770      	bx	lr

0800373a <__retarget_lock_acquire_recursive>:
 800373a:	4770      	bx	lr

0800373c <__retarget_lock_release_recursive>:
 800373c:	4770      	bx	lr

0800373e <quorem>:
 800373e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003742:	6903      	ldr	r3, [r0, #16]
 8003744:	690c      	ldr	r4, [r1, #16]
 8003746:	42a3      	cmp	r3, r4
 8003748:	4607      	mov	r7, r0
 800374a:	db7e      	blt.n	800384a <quorem+0x10c>
 800374c:	3c01      	subs	r4, #1
 800374e:	f101 0814 	add.w	r8, r1, #20
 8003752:	00a3      	lsls	r3, r4, #2
 8003754:	f100 0514 	add.w	r5, r0, #20
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003768:	3301      	adds	r3, #1
 800376a:	429a      	cmp	r2, r3
 800376c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003770:	fbb2 f6f3 	udiv	r6, r2, r3
 8003774:	d32e      	bcc.n	80037d4 <quorem+0x96>
 8003776:	f04f 0a00 	mov.w	sl, #0
 800377a:	46c4      	mov	ip, r8
 800377c:	46ae      	mov	lr, r5
 800377e:	46d3      	mov	fp, sl
 8003780:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003784:	b298      	uxth	r0, r3
 8003786:	fb06 a000 	mla	r0, r6, r0, sl
 800378a:	0c02      	lsrs	r2, r0, #16
 800378c:	0c1b      	lsrs	r3, r3, #16
 800378e:	fb06 2303 	mla	r3, r6, r3, r2
 8003792:	f8de 2000 	ldr.w	r2, [lr]
 8003796:	b280      	uxth	r0, r0
 8003798:	b292      	uxth	r2, r2
 800379a:	1a12      	subs	r2, r2, r0
 800379c:	445a      	add	r2, fp
 800379e:	f8de 0000 	ldr.w	r0, [lr]
 80037a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80037ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80037b0:	b292      	uxth	r2, r2
 80037b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80037b6:	45e1      	cmp	r9, ip
 80037b8:	f84e 2b04 	str.w	r2, [lr], #4
 80037bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80037c0:	d2de      	bcs.n	8003780 <quorem+0x42>
 80037c2:	9b00      	ldr	r3, [sp, #0]
 80037c4:	58eb      	ldr	r3, [r5, r3]
 80037c6:	b92b      	cbnz	r3, 80037d4 <quorem+0x96>
 80037c8:	9b01      	ldr	r3, [sp, #4]
 80037ca:	3b04      	subs	r3, #4
 80037cc:	429d      	cmp	r5, r3
 80037ce:	461a      	mov	r2, r3
 80037d0:	d32f      	bcc.n	8003832 <quorem+0xf4>
 80037d2:	613c      	str	r4, [r7, #16]
 80037d4:	4638      	mov	r0, r7
 80037d6:	f001 f979 	bl	8004acc <__mcmp>
 80037da:	2800      	cmp	r0, #0
 80037dc:	db25      	blt.n	800382a <quorem+0xec>
 80037de:	4629      	mov	r1, r5
 80037e0:	2000      	movs	r0, #0
 80037e2:	f858 2b04 	ldr.w	r2, [r8], #4
 80037e6:	f8d1 c000 	ldr.w	ip, [r1]
 80037ea:	fa1f fe82 	uxth.w	lr, r2
 80037ee:	fa1f f38c 	uxth.w	r3, ip
 80037f2:	eba3 030e 	sub.w	r3, r3, lr
 80037f6:	4403      	add	r3, r0
 80037f8:	0c12      	lsrs	r2, r2, #16
 80037fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80037fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003802:	b29b      	uxth	r3, r3
 8003804:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003808:	45c1      	cmp	r9, r8
 800380a:	f841 3b04 	str.w	r3, [r1], #4
 800380e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003812:	d2e6      	bcs.n	80037e2 <quorem+0xa4>
 8003814:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003818:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800381c:	b922      	cbnz	r2, 8003828 <quorem+0xea>
 800381e:	3b04      	subs	r3, #4
 8003820:	429d      	cmp	r5, r3
 8003822:	461a      	mov	r2, r3
 8003824:	d30b      	bcc.n	800383e <quorem+0x100>
 8003826:	613c      	str	r4, [r7, #16]
 8003828:	3601      	adds	r6, #1
 800382a:	4630      	mov	r0, r6
 800382c:	b003      	add	sp, #12
 800382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	3b04      	subs	r3, #4
 8003836:	2a00      	cmp	r2, #0
 8003838:	d1cb      	bne.n	80037d2 <quorem+0x94>
 800383a:	3c01      	subs	r4, #1
 800383c:	e7c6      	b.n	80037cc <quorem+0x8e>
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	3b04      	subs	r3, #4
 8003842:	2a00      	cmp	r2, #0
 8003844:	d1ef      	bne.n	8003826 <quorem+0xe8>
 8003846:	3c01      	subs	r4, #1
 8003848:	e7ea      	b.n	8003820 <quorem+0xe2>
 800384a:	2000      	movs	r0, #0
 800384c:	e7ee      	b.n	800382c <quorem+0xee>
	...

08003850 <_dtoa_r>:
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	69c7      	ldr	r7, [r0, #28]
 8003856:	b099      	sub	sp, #100	@ 0x64
 8003858:	ed8d 0b02 	vstr	d0, [sp, #8]
 800385c:	ec55 4b10 	vmov	r4, r5, d0
 8003860:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8003862:	9109      	str	r1, [sp, #36]	@ 0x24
 8003864:	4683      	mov	fp, r0
 8003866:	920e      	str	r2, [sp, #56]	@ 0x38
 8003868:	9313      	str	r3, [sp, #76]	@ 0x4c
 800386a:	b97f      	cbnz	r7, 800388c <_dtoa_r+0x3c>
 800386c:	2010      	movs	r0, #16
 800386e:	f000 fdfd 	bl	800446c <malloc>
 8003872:	4602      	mov	r2, r0
 8003874:	f8cb 001c 	str.w	r0, [fp, #28]
 8003878:	b920      	cbnz	r0, 8003884 <_dtoa_r+0x34>
 800387a:	4ba7      	ldr	r3, [pc, #668]	@ (8003b18 <_dtoa_r+0x2c8>)
 800387c:	21ef      	movs	r1, #239	@ 0xef
 800387e:	48a7      	ldr	r0, [pc, #668]	@ (8003b1c <_dtoa_r+0x2cc>)
 8003880:	f001 fc68 	bl	8005154 <__assert_func>
 8003884:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003888:	6007      	str	r7, [r0, #0]
 800388a:	60c7      	str	r7, [r0, #12]
 800388c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	b159      	cbz	r1, 80038ac <_dtoa_r+0x5c>
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	604a      	str	r2, [r1, #4]
 8003898:	2301      	movs	r3, #1
 800389a:	4093      	lsls	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
 800389e:	4658      	mov	r0, fp
 80038a0:	f000 feda 	bl	8004658 <_Bfree>
 80038a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	1e2b      	subs	r3, r5, #0
 80038ae:	bfb9      	ittee	lt
 80038b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80038b4:	9303      	strlt	r3, [sp, #12]
 80038b6:	2300      	movge	r3, #0
 80038b8:	6033      	strge	r3, [r6, #0]
 80038ba:	9f03      	ldr	r7, [sp, #12]
 80038bc:	4b98      	ldr	r3, [pc, #608]	@ (8003b20 <_dtoa_r+0x2d0>)
 80038be:	bfbc      	itt	lt
 80038c0:	2201      	movlt	r2, #1
 80038c2:	6032      	strlt	r2, [r6, #0]
 80038c4:	43bb      	bics	r3, r7
 80038c6:	d112      	bne.n	80038ee <_dtoa_r+0x9e>
 80038c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80038ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80038d4:	4323      	orrs	r3, r4
 80038d6:	f000 854d 	beq.w	8004374 <_dtoa_r+0xb24>
 80038da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80038dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8003b34 <_dtoa_r+0x2e4>
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 854f 	beq.w	8004384 <_dtoa_r+0xb34>
 80038e6:	f10a 0303 	add.w	r3, sl, #3
 80038ea:	f000 bd49 	b.w	8004380 <_dtoa_r+0xb30>
 80038ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80038f2:	2200      	movs	r2, #0
 80038f4:	ec51 0b17 	vmov	r0, r1, d7
 80038f8:	2300      	movs	r3, #0
 80038fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80038fe:	f7fd f8eb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003902:	4680      	mov	r8, r0
 8003904:	b158      	cbz	r0, 800391e <_dtoa_r+0xce>
 8003906:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8003908:	2301      	movs	r3, #1
 800390a:	6013      	str	r3, [r2, #0]
 800390c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800390e:	b113      	cbz	r3, 8003916 <_dtoa_r+0xc6>
 8003910:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8003912:	4b84      	ldr	r3, [pc, #528]	@ (8003b24 <_dtoa_r+0x2d4>)
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8003b38 <_dtoa_r+0x2e8>
 800391a:	f000 bd33 	b.w	8004384 <_dtoa_r+0xb34>
 800391e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8003922:	aa16      	add	r2, sp, #88	@ 0x58
 8003924:	a917      	add	r1, sp, #92	@ 0x5c
 8003926:	4658      	mov	r0, fp
 8003928:	f001 f980 	bl	8004c2c <__d2b>
 800392c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8003930:	4681      	mov	r9, r0
 8003932:	2e00      	cmp	r6, #0
 8003934:	d077      	beq.n	8003a26 <_dtoa_r+0x1d6>
 8003936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003938:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800393c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003940:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003944:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003948:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800394c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003950:	4619      	mov	r1, r3
 8003952:	2200      	movs	r2, #0
 8003954:	4b74      	ldr	r3, [pc, #464]	@ (8003b28 <_dtoa_r+0x2d8>)
 8003956:	f7fc fc9f 	bl	8000298 <__aeabi_dsub>
 800395a:	a369      	add	r3, pc, #420	@ (adr r3, 8003b00 <_dtoa_r+0x2b0>)
 800395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003960:	f7fc fe52 	bl	8000608 <__aeabi_dmul>
 8003964:	a368      	add	r3, pc, #416	@ (adr r3, 8003b08 <_dtoa_r+0x2b8>)
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f7fc fc97 	bl	800029c <__adddf3>
 800396e:	4604      	mov	r4, r0
 8003970:	4630      	mov	r0, r6
 8003972:	460d      	mov	r5, r1
 8003974:	f7fc fdde 	bl	8000534 <__aeabi_i2d>
 8003978:	a365      	add	r3, pc, #404	@ (adr r3, 8003b10 <_dtoa_r+0x2c0>)
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f7fc fe43 	bl	8000608 <__aeabi_dmul>
 8003982:	4602      	mov	r2, r0
 8003984:	460b      	mov	r3, r1
 8003986:	4620      	mov	r0, r4
 8003988:	4629      	mov	r1, r5
 800398a:	f7fc fc87 	bl	800029c <__adddf3>
 800398e:	4604      	mov	r4, r0
 8003990:	460d      	mov	r5, r1
 8003992:	f7fd f8e9 	bl	8000b68 <__aeabi_d2iz>
 8003996:	2200      	movs	r2, #0
 8003998:	4607      	mov	r7, r0
 800399a:	2300      	movs	r3, #0
 800399c:	4620      	mov	r0, r4
 800399e:	4629      	mov	r1, r5
 80039a0:	f7fd f8a4 	bl	8000aec <__aeabi_dcmplt>
 80039a4:	b140      	cbz	r0, 80039b8 <_dtoa_r+0x168>
 80039a6:	4638      	mov	r0, r7
 80039a8:	f7fc fdc4 	bl	8000534 <__aeabi_i2d>
 80039ac:	4622      	mov	r2, r4
 80039ae:	462b      	mov	r3, r5
 80039b0:	f7fd f892 	bl	8000ad8 <__aeabi_dcmpeq>
 80039b4:	b900      	cbnz	r0, 80039b8 <_dtoa_r+0x168>
 80039b6:	3f01      	subs	r7, #1
 80039b8:	2f16      	cmp	r7, #22
 80039ba:	d851      	bhi.n	8003a60 <_dtoa_r+0x210>
 80039bc:	4b5b      	ldr	r3, [pc, #364]	@ (8003b2c <_dtoa_r+0x2dc>)
 80039be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80039c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80039ca:	f7fd f88f 	bl	8000aec <__aeabi_dcmplt>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d048      	beq.n	8003a64 <_dtoa_r+0x214>
 80039d2:	3f01      	subs	r7, #1
 80039d4:	2300      	movs	r3, #0
 80039d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80039d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80039da:	1b9b      	subs	r3, r3, r6
 80039dc:	1e5a      	subs	r2, r3, #1
 80039de:	bf44      	itt	mi
 80039e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80039e4:	2300      	movmi	r3, #0
 80039e6:	9208      	str	r2, [sp, #32]
 80039e8:	bf54      	ite	pl
 80039ea:	f04f 0800 	movpl.w	r8, #0
 80039ee:	9308      	strmi	r3, [sp, #32]
 80039f0:	2f00      	cmp	r7, #0
 80039f2:	db39      	blt.n	8003a68 <_dtoa_r+0x218>
 80039f4:	9b08      	ldr	r3, [sp, #32]
 80039f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80039f8:	443b      	add	r3, r7
 80039fa:	9308      	str	r3, [sp, #32]
 80039fc:	2300      	movs	r3, #0
 80039fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a02:	2b09      	cmp	r3, #9
 8003a04:	d864      	bhi.n	8003ad0 <_dtoa_r+0x280>
 8003a06:	2b05      	cmp	r3, #5
 8003a08:	bfc4      	itt	gt
 8003a0a:	3b04      	subgt	r3, #4
 8003a0c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8003a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a10:	f1a3 0302 	sub.w	r3, r3, #2
 8003a14:	bfcc      	ite	gt
 8003a16:	2400      	movgt	r4, #0
 8003a18:	2401      	movle	r4, #1
 8003a1a:	2b03      	cmp	r3, #3
 8003a1c:	d863      	bhi.n	8003ae6 <_dtoa_r+0x296>
 8003a1e:	e8df f003 	tbb	[pc, r3]
 8003a22:	372a      	.short	0x372a
 8003a24:	5535      	.short	0x5535
 8003a26:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8003a2a:	441e      	add	r6, r3
 8003a2c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	bfc1      	itttt	gt
 8003a34:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003a38:	409f      	lslgt	r7, r3
 8003a3a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003a3e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003a42:	bfd6      	itet	le
 8003a44:	f1c3 0320 	rsble	r3, r3, #32
 8003a48:	ea47 0003 	orrgt.w	r0, r7, r3
 8003a4c:	fa04 f003 	lslle.w	r0, r4, r3
 8003a50:	f7fc fd60 	bl	8000514 <__aeabi_ui2d>
 8003a54:	2201      	movs	r2, #1
 8003a56:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003a5a:	3e01      	subs	r6, #1
 8003a5c:	9214      	str	r2, [sp, #80]	@ 0x50
 8003a5e:	e777      	b.n	8003950 <_dtoa_r+0x100>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e7b8      	b.n	80039d6 <_dtoa_r+0x186>
 8003a64:	9012      	str	r0, [sp, #72]	@ 0x48
 8003a66:	e7b7      	b.n	80039d8 <_dtoa_r+0x188>
 8003a68:	427b      	negs	r3, r7
 8003a6a:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	eba8 0807 	sub.w	r8, r8, r7
 8003a72:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003a74:	e7c4      	b.n	8003a00 <_dtoa_r+0x1b0>
 8003a76:	2300      	movs	r3, #0
 8003a78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	dc35      	bgt.n	8003aec <_dtoa_r+0x29c>
 8003a80:	2301      	movs	r3, #1
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	9307      	str	r3, [sp, #28]
 8003a86:	461a      	mov	r2, r3
 8003a88:	920e      	str	r2, [sp, #56]	@ 0x38
 8003a8a:	e00b      	b.n	8003aa4 <_dtoa_r+0x254>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e7f3      	b.n	8003a78 <_dtoa_r+0x228>
 8003a90:	2300      	movs	r3, #0
 8003a92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003a94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	9307      	str	r3, [sp, #28]
 8003aa0:	bfb8      	it	lt
 8003aa2:	2301      	movlt	r3, #1
 8003aa4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	2204      	movs	r2, #4
 8003aac:	f102 0514 	add.w	r5, r2, #20
 8003ab0:	429d      	cmp	r5, r3
 8003ab2:	d91f      	bls.n	8003af4 <_dtoa_r+0x2a4>
 8003ab4:	6041      	str	r1, [r0, #4]
 8003ab6:	4658      	mov	r0, fp
 8003ab8:	f000 fd8e 	bl	80045d8 <_Balloc>
 8003abc:	4682      	mov	sl, r0
 8003abe:	2800      	cmp	r0, #0
 8003ac0:	d13c      	bne.n	8003b3c <_dtoa_r+0x2ec>
 8003ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8003b30 <_dtoa_r+0x2e0>)
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	f240 11af 	movw	r1, #431	@ 0x1af
 8003aca:	e6d8      	b.n	800387e <_dtoa_r+0x2e>
 8003acc:	2301      	movs	r3, #1
 8003ace:	e7e0      	b.n	8003a92 <_dtoa_r+0x242>
 8003ad0:	2401      	movs	r4, #1
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ad6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	9307      	str	r3, [sp, #28]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2312      	movs	r3, #18
 8003ae4:	e7d0      	b.n	8003a88 <_dtoa_r+0x238>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003aea:	e7f5      	b.n	8003ad8 <_dtoa_r+0x288>
 8003aec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	9307      	str	r3, [sp, #28]
 8003af2:	e7d7      	b.n	8003aa4 <_dtoa_r+0x254>
 8003af4:	3101      	adds	r1, #1
 8003af6:	0052      	lsls	r2, r2, #1
 8003af8:	e7d8      	b.n	8003aac <_dtoa_r+0x25c>
 8003afa:	bf00      	nop
 8003afc:	f3af 8000 	nop.w
 8003b00:	636f4361 	.word	0x636f4361
 8003b04:	3fd287a7 	.word	0x3fd287a7
 8003b08:	8b60c8b3 	.word	0x8b60c8b3
 8003b0c:	3fc68a28 	.word	0x3fc68a28
 8003b10:	509f79fb 	.word	0x509f79fb
 8003b14:	3fd34413 	.word	0x3fd34413
 8003b18:	08005875 	.word	0x08005875
 8003b1c:	0800588c 	.word	0x0800588c
 8003b20:	7ff00000 	.word	0x7ff00000
 8003b24:	08005845 	.word	0x08005845
 8003b28:	3ff80000 	.word	0x3ff80000
 8003b2c:	08005988 	.word	0x08005988
 8003b30:	080058e4 	.word	0x080058e4
 8003b34:	08005871 	.word	0x08005871
 8003b38:	08005844 	.word	0x08005844
 8003b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003b40:	6018      	str	r0, [r3, #0]
 8003b42:	9b07      	ldr	r3, [sp, #28]
 8003b44:	2b0e      	cmp	r3, #14
 8003b46:	f200 80a4 	bhi.w	8003c92 <_dtoa_r+0x442>
 8003b4a:	2c00      	cmp	r4, #0
 8003b4c:	f000 80a1 	beq.w	8003c92 <_dtoa_r+0x442>
 8003b50:	2f00      	cmp	r7, #0
 8003b52:	dd33      	ble.n	8003bbc <_dtoa_r+0x36c>
 8003b54:	4bad      	ldr	r3, [pc, #692]	@ (8003e0c <_dtoa_r+0x5bc>)
 8003b56:	f007 020f 	and.w	r2, r7, #15
 8003b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003b5e:	ed93 7b00 	vldr	d7, [r3]
 8003b62:	05f8      	lsls	r0, r7, #23
 8003b64:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003b68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003b6c:	d516      	bpl.n	8003b9c <_dtoa_r+0x34c>
 8003b6e:	4ba8      	ldr	r3, [pc, #672]	@ (8003e10 <_dtoa_r+0x5c0>)
 8003b70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003b74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b78:	f7fc fe70 	bl	800085c <__aeabi_ddiv>
 8003b7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b80:	f004 040f 	and.w	r4, r4, #15
 8003b84:	2603      	movs	r6, #3
 8003b86:	4da2      	ldr	r5, [pc, #648]	@ (8003e10 <_dtoa_r+0x5c0>)
 8003b88:	b954      	cbnz	r4, 8003ba0 <_dtoa_r+0x350>
 8003b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b92:	f7fc fe63 	bl	800085c <__aeabi_ddiv>
 8003b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003b9a:	e028      	b.n	8003bee <_dtoa_r+0x39e>
 8003b9c:	2602      	movs	r6, #2
 8003b9e:	e7f2      	b.n	8003b86 <_dtoa_r+0x336>
 8003ba0:	07e1      	lsls	r1, r4, #31
 8003ba2:	d508      	bpl.n	8003bb6 <_dtoa_r+0x366>
 8003ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003ba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003bac:	f7fc fd2c 	bl	8000608 <__aeabi_dmul>
 8003bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003bb4:	3601      	adds	r6, #1
 8003bb6:	1064      	asrs	r4, r4, #1
 8003bb8:	3508      	adds	r5, #8
 8003bba:	e7e5      	b.n	8003b88 <_dtoa_r+0x338>
 8003bbc:	f000 80d2 	beq.w	8003d64 <_dtoa_r+0x514>
 8003bc0:	427c      	negs	r4, r7
 8003bc2:	4b92      	ldr	r3, [pc, #584]	@ (8003e0c <_dtoa_r+0x5bc>)
 8003bc4:	4d92      	ldr	r5, [pc, #584]	@ (8003e10 <_dtoa_r+0x5c0>)
 8003bc6:	f004 020f 	and.w	r2, r4, #15
 8003bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003bd6:	f7fc fd17 	bl	8000608 <__aeabi_dmul>
 8003bda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003bde:	1124      	asrs	r4, r4, #4
 8003be0:	2300      	movs	r3, #0
 8003be2:	2602      	movs	r6, #2
 8003be4:	2c00      	cmp	r4, #0
 8003be6:	f040 80b2 	bne.w	8003d4e <_dtoa_r+0x4fe>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1d3      	bne.n	8003b96 <_dtoa_r+0x346>
 8003bee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8003bf0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 80b7 	beq.w	8003d68 <_dtoa_r+0x518>
 8003bfa:	4b86      	ldr	r3, [pc, #536]	@ (8003e14 <_dtoa_r+0x5c4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	4620      	mov	r0, r4
 8003c00:	4629      	mov	r1, r5
 8003c02:	f7fc ff73 	bl	8000aec <__aeabi_dcmplt>
 8003c06:	2800      	cmp	r0, #0
 8003c08:	f000 80ae 	beq.w	8003d68 <_dtoa_r+0x518>
 8003c0c:	9b07      	ldr	r3, [sp, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 80aa 	beq.w	8003d68 <_dtoa_r+0x518>
 8003c14:	9b00      	ldr	r3, [sp, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dd37      	ble.n	8003c8a <_dtoa_r+0x43a>
 8003c1a:	1e7b      	subs	r3, r7, #1
 8003c1c:	9304      	str	r3, [sp, #16]
 8003c1e:	4620      	mov	r0, r4
 8003c20:	4b7d      	ldr	r3, [pc, #500]	@ (8003e18 <_dtoa_r+0x5c8>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	4629      	mov	r1, r5
 8003c26:	f7fc fcef 	bl	8000608 <__aeabi_dmul>
 8003c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c2e:	9c00      	ldr	r4, [sp, #0]
 8003c30:	3601      	adds	r6, #1
 8003c32:	4630      	mov	r0, r6
 8003c34:	f7fc fc7e 	bl	8000534 <__aeabi_i2d>
 8003c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c3c:	f7fc fce4 	bl	8000608 <__aeabi_dmul>
 8003c40:	4b76      	ldr	r3, [pc, #472]	@ (8003e1c <_dtoa_r+0x5cc>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	f7fc fb2a 	bl	800029c <__adddf3>
 8003c48:	4605      	mov	r5, r0
 8003c4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8003c4e:	2c00      	cmp	r4, #0
 8003c50:	f040 808d 	bne.w	8003d6e <_dtoa_r+0x51e>
 8003c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c58:	4b71      	ldr	r3, [pc, #452]	@ (8003e20 <_dtoa_r+0x5d0>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f7fc fb1c 	bl	8000298 <__aeabi_dsub>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c68:	462a      	mov	r2, r5
 8003c6a:	4633      	mov	r3, r6
 8003c6c:	f7fc ff5c 	bl	8000b28 <__aeabi_dcmpgt>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	f040 828b 	bne.w	800418c <_dtoa_r+0x93c>
 8003c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7a:	462a      	mov	r2, r5
 8003c7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8003c80:	f7fc ff34 	bl	8000aec <__aeabi_dcmplt>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f040 8128 	bne.w	8003eda <_dtoa_r+0x68a>
 8003c8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8003c8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003c92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f2c0 815a 	blt.w	8003f4e <_dtoa_r+0x6fe>
 8003c9a:	2f0e      	cmp	r7, #14
 8003c9c:	f300 8157 	bgt.w	8003f4e <_dtoa_r+0x6fe>
 8003ca0:	4b5a      	ldr	r3, [pc, #360]	@ (8003e0c <_dtoa_r+0x5bc>)
 8003ca2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003ca6:	ed93 7b00 	vldr	d7, [r3]
 8003caa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	ed8d 7b00 	vstr	d7, [sp]
 8003cb2:	da03      	bge.n	8003cbc <_dtoa_r+0x46c>
 8003cb4:	9b07      	ldr	r3, [sp, #28]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f340 8101 	ble.w	8003ebe <_dtoa_r+0x66e>
 8003cbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003cc0:	4656      	mov	r6, sl
 8003cc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cc6:	4620      	mov	r0, r4
 8003cc8:	4629      	mov	r1, r5
 8003cca:	f7fc fdc7 	bl	800085c <__aeabi_ddiv>
 8003cce:	f7fc ff4b 	bl	8000b68 <__aeabi_d2iz>
 8003cd2:	4680      	mov	r8, r0
 8003cd4:	f7fc fc2e 	bl	8000534 <__aeabi_i2d>
 8003cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cdc:	f7fc fc94 	bl	8000608 <__aeabi_dmul>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	4629      	mov	r1, r5
 8003ce8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8003cec:	f7fc fad4 	bl	8000298 <__aeabi_dsub>
 8003cf0:	f806 4b01 	strb.w	r4, [r6], #1
 8003cf4:	9d07      	ldr	r5, [sp, #28]
 8003cf6:	eba6 040a 	sub.w	r4, r6, sl
 8003cfa:	42a5      	cmp	r5, r4
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	f040 8117 	bne.w	8003f32 <_dtoa_r+0x6e2>
 8003d04:	f7fc faca 	bl	800029c <__adddf3>
 8003d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d0c:	4604      	mov	r4, r0
 8003d0e:	460d      	mov	r5, r1
 8003d10:	f7fc ff0a 	bl	8000b28 <__aeabi_dcmpgt>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f040 80f9 	bne.w	8003f0c <_dtoa_r+0x6bc>
 8003d1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fed9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d26:	b118      	cbz	r0, 8003d30 <_dtoa_r+0x4e0>
 8003d28:	f018 0f01 	tst.w	r8, #1
 8003d2c:	f040 80ee 	bne.w	8003f0c <_dtoa_r+0x6bc>
 8003d30:	4649      	mov	r1, r9
 8003d32:	4658      	mov	r0, fp
 8003d34:	f000 fc90 	bl	8004658 <_Bfree>
 8003d38:	2300      	movs	r3, #0
 8003d3a:	7033      	strb	r3, [r6, #0]
 8003d3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8003d3e:	3701      	adds	r7, #1
 8003d40:	601f      	str	r7, [r3, #0]
 8003d42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 831d 	beq.w	8004384 <_dtoa_r+0xb34>
 8003d4a:	601e      	str	r6, [r3, #0]
 8003d4c:	e31a      	b.n	8004384 <_dtoa_r+0xb34>
 8003d4e:	07e2      	lsls	r2, r4, #31
 8003d50:	d505      	bpl.n	8003d5e <_dtoa_r+0x50e>
 8003d52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003d56:	f7fc fc57 	bl	8000608 <__aeabi_dmul>
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	1064      	asrs	r4, r4, #1
 8003d60:	3508      	adds	r5, #8
 8003d62:	e73f      	b.n	8003be4 <_dtoa_r+0x394>
 8003d64:	2602      	movs	r6, #2
 8003d66:	e742      	b.n	8003bee <_dtoa_r+0x39e>
 8003d68:	9c07      	ldr	r4, [sp, #28]
 8003d6a:	9704      	str	r7, [sp, #16]
 8003d6c:	e761      	b.n	8003c32 <_dtoa_r+0x3e2>
 8003d6e:	4b27      	ldr	r3, [pc, #156]	@ (8003e0c <_dtoa_r+0x5bc>)
 8003d70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003d72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003d76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003d7a:	4454      	add	r4, sl
 8003d7c:	2900      	cmp	r1, #0
 8003d7e:	d053      	beq.n	8003e28 <_dtoa_r+0x5d8>
 8003d80:	4928      	ldr	r1, [pc, #160]	@ (8003e24 <_dtoa_r+0x5d4>)
 8003d82:	2000      	movs	r0, #0
 8003d84:	f7fc fd6a 	bl	800085c <__aeabi_ddiv>
 8003d88:	4633      	mov	r3, r6
 8003d8a:	462a      	mov	r2, r5
 8003d8c:	f7fc fa84 	bl	8000298 <__aeabi_dsub>
 8003d90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003d94:	4656      	mov	r6, sl
 8003d96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d9a:	f7fc fee5 	bl	8000b68 <__aeabi_d2iz>
 8003d9e:	4605      	mov	r5, r0
 8003da0:	f7fc fbc8 	bl	8000534 <__aeabi_i2d>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dac:	f7fc fa74 	bl	8000298 <__aeabi_dsub>
 8003db0:	3530      	adds	r5, #48	@ 0x30
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003dba:	f806 5b01 	strb.w	r5, [r6], #1
 8003dbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003dc2:	f7fc fe93 	bl	8000aec <__aeabi_dcmplt>
 8003dc6:	2800      	cmp	r0, #0
 8003dc8:	d171      	bne.n	8003eae <_dtoa_r+0x65e>
 8003dca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003dce:	4911      	ldr	r1, [pc, #68]	@ (8003e14 <_dtoa_r+0x5c4>)
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	f7fc fa61 	bl	8000298 <__aeabi_dsub>
 8003dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003dda:	f7fc fe87 	bl	8000aec <__aeabi_dcmplt>
 8003dde:	2800      	cmp	r0, #0
 8003de0:	f040 8095 	bne.w	8003f0e <_dtoa_r+0x6be>
 8003de4:	42a6      	cmp	r6, r4
 8003de6:	f43f af50 	beq.w	8003c8a <_dtoa_r+0x43a>
 8003dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003dee:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <_dtoa_r+0x5c8>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	f7fc fc09 	bl	8000608 <__aeabi_dmul>
 8003df6:	4b08      	ldr	r3, [pc, #32]	@ (8003e18 <_dtoa_r+0x5c8>)
 8003df8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e02:	f7fc fc01 	bl	8000608 <__aeabi_dmul>
 8003e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e0a:	e7c4      	b.n	8003d96 <_dtoa_r+0x546>
 8003e0c:	08005988 	.word	0x08005988
 8003e10:	08005960 	.word	0x08005960
 8003e14:	3ff00000 	.word	0x3ff00000
 8003e18:	40240000 	.word	0x40240000
 8003e1c:	401c0000 	.word	0x401c0000
 8003e20:	40140000 	.word	0x40140000
 8003e24:	3fe00000 	.word	0x3fe00000
 8003e28:	4631      	mov	r1, r6
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7fc fbec 	bl	8000608 <__aeabi_dmul>
 8003e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003e34:	9415      	str	r4, [sp, #84]	@ 0x54
 8003e36:	4656      	mov	r6, sl
 8003e38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e3c:	f7fc fe94 	bl	8000b68 <__aeabi_d2iz>
 8003e40:	4605      	mov	r5, r0
 8003e42:	f7fc fb77 	bl	8000534 <__aeabi_i2d>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e4e:	f7fc fa23 	bl	8000298 <__aeabi_dsub>
 8003e52:	3530      	adds	r5, #48	@ 0x30
 8003e54:	f806 5b01 	strb.w	r5, [r6], #1
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	42a6      	cmp	r6, r4
 8003e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	d124      	bne.n	8003eb2 <_dtoa_r+0x662>
 8003e68:	4bac      	ldr	r3, [pc, #688]	@ (800411c <_dtoa_r+0x8cc>)
 8003e6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003e6e:	f7fc fa15 	bl	800029c <__adddf3>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e7a:	f7fc fe55 	bl	8000b28 <__aeabi_dcmpgt>
 8003e7e:	2800      	cmp	r0, #0
 8003e80:	d145      	bne.n	8003f0e <_dtoa_r+0x6be>
 8003e82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003e86:	49a5      	ldr	r1, [pc, #660]	@ (800411c <_dtoa_r+0x8cc>)
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7fc fa05 	bl	8000298 <__aeabi_dsub>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e96:	f7fc fe29 	bl	8000aec <__aeabi_dcmplt>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	f43f aef5 	beq.w	8003c8a <_dtoa_r+0x43a>
 8003ea0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8003ea2:	1e73      	subs	r3, r6, #1
 8003ea4:	9315      	str	r3, [sp, #84]	@ 0x54
 8003ea6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003eaa:	2b30      	cmp	r3, #48	@ 0x30
 8003eac:	d0f8      	beq.n	8003ea0 <_dtoa_r+0x650>
 8003eae:	9f04      	ldr	r7, [sp, #16]
 8003eb0:	e73e      	b.n	8003d30 <_dtoa_r+0x4e0>
 8003eb2:	4b9b      	ldr	r3, [pc, #620]	@ (8004120 <_dtoa_r+0x8d0>)
 8003eb4:	f7fc fba8 	bl	8000608 <__aeabi_dmul>
 8003eb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003ebc:	e7bc      	b.n	8003e38 <_dtoa_r+0x5e8>
 8003ebe:	d10c      	bne.n	8003eda <_dtoa_r+0x68a>
 8003ec0:	4b98      	ldr	r3, [pc, #608]	@ (8004124 <_dtoa_r+0x8d4>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ec8:	f7fc fb9e 	bl	8000608 <__aeabi_dmul>
 8003ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ed0:	f7fc fe20 	bl	8000b14 <__aeabi_dcmpge>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	f000 8157 	beq.w	8004188 <_dtoa_r+0x938>
 8003eda:	2400      	movs	r4, #0
 8003edc:	4625      	mov	r5, r4
 8003ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	9304      	str	r3, [sp, #16]
 8003ee4:	4656      	mov	r6, sl
 8003ee6:	2700      	movs	r7, #0
 8003ee8:	4621      	mov	r1, r4
 8003eea:	4658      	mov	r0, fp
 8003eec:	f000 fbb4 	bl	8004658 <_Bfree>
 8003ef0:	2d00      	cmp	r5, #0
 8003ef2:	d0dc      	beq.n	8003eae <_dtoa_r+0x65e>
 8003ef4:	b12f      	cbz	r7, 8003f02 <_dtoa_r+0x6b2>
 8003ef6:	42af      	cmp	r7, r5
 8003ef8:	d003      	beq.n	8003f02 <_dtoa_r+0x6b2>
 8003efa:	4639      	mov	r1, r7
 8003efc:	4658      	mov	r0, fp
 8003efe:	f000 fbab 	bl	8004658 <_Bfree>
 8003f02:	4629      	mov	r1, r5
 8003f04:	4658      	mov	r0, fp
 8003f06:	f000 fba7 	bl	8004658 <_Bfree>
 8003f0a:	e7d0      	b.n	8003eae <_dtoa_r+0x65e>
 8003f0c:	9704      	str	r7, [sp, #16]
 8003f0e:	4633      	mov	r3, r6
 8003f10:	461e      	mov	r6, r3
 8003f12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003f16:	2a39      	cmp	r2, #57	@ 0x39
 8003f18:	d107      	bne.n	8003f2a <_dtoa_r+0x6da>
 8003f1a:	459a      	cmp	sl, r3
 8003f1c:	d1f8      	bne.n	8003f10 <_dtoa_r+0x6c0>
 8003f1e:	9a04      	ldr	r2, [sp, #16]
 8003f20:	3201      	adds	r2, #1
 8003f22:	9204      	str	r2, [sp, #16]
 8003f24:	2230      	movs	r2, #48	@ 0x30
 8003f26:	f88a 2000 	strb.w	r2, [sl]
 8003f2a:	781a      	ldrb	r2, [r3, #0]
 8003f2c:	3201      	adds	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]
 8003f30:	e7bd      	b.n	8003eae <_dtoa_r+0x65e>
 8003f32:	4b7b      	ldr	r3, [pc, #492]	@ (8004120 <_dtoa_r+0x8d0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	f7fc fb67 	bl	8000608 <__aeabi_dmul>
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4604      	mov	r4, r0
 8003f40:	460d      	mov	r5, r1
 8003f42:	f7fc fdc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	f43f aebb 	beq.w	8003cc2 <_dtoa_r+0x472>
 8003f4c:	e6f0      	b.n	8003d30 <_dtoa_r+0x4e0>
 8003f4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	f000 80db 	beq.w	800410c <_dtoa_r+0x8bc>
 8003f56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f58:	2a01      	cmp	r2, #1
 8003f5a:	f300 80bf 	bgt.w	80040dc <_dtoa_r+0x88c>
 8003f5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8003f60:	2a00      	cmp	r2, #0
 8003f62:	f000 80b7 	beq.w	80040d4 <_dtoa_r+0x884>
 8003f66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8003f6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003f6c:	4646      	mov	r6, r8
 8003f6e:	9a08      	ldr	r2, [sp, #32]
 8003f70:	2101      	movs	r1, #1
 8003f72:	441a      	add	r2, r3
 8003f74:	4658      	mov	r0, fp
 8003f76:	4498      	add	r8, r3
 8003f78:	9208      	str	r2, [sp, #32]
 8003f7a:	f000 fc21 	bl	80047c0 <__i2b>
 8003f7e:	4605      	mov	r5, r0
 8003f80:	b15e      	cbz	r6, 8003f9a <_dtoa_r+0x74a>
 8003f82:	9b08      	ldr	r3, [sp, #32]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	dd08      	ble.n	8003f9a <_dtoa_r+0x74a>
 8003f88:	42b3      	cmp	r3, r6
 8003f8a:	9a08      	ldr	r2, [sp, #32]
 8003f8c:	bfa8      	it	ge
 8003f8e:	4633      	movge	r3, r6
 8003f90:	eba8 0803 	sub.w	r8, r8, r3
 8003f94:	1af6      	subs	r6, r6, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	9308      	str	r3, [sp, #32]
 8003f9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f9c:	b1f3      	cbz	r3, 8003fdc <_dtoa_r+0x78c>
 8003f9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80b7 	beq.w	8004114 <_dtoa_r+0x8c4>
 8003fa6:	b18c      	cbz	r4, 8003fcc <_dtoa_r+0x77c>
 8003fa8:	4629      	mov	r1, r5
 8003faa:	4622      	mov	r2, r4
 8003fac:	4658      	mov	r0, fp
 8003fae:	f000 fcc7 	bl	8004940 <__pow5mult>
 8003fb2:	464a      	mov	r2, r9
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4605      	mov	r5, r0
 8003fb8:	4658      	mov	r0, fp
 8003fba:	f000 fc17 	bl	80047ec <__multiply>
 8003fbe:	4649      	mov	r1, r9
 8003fc0:	9004      	str	r0, [sp, #16]
 8003fc2:	4658      	mov	r0, fp
 8003fc4:	f000 fb48 	bl	8004658 <_Bfree>
 8003fc8:	9b04      	ldr	r3, [sp, #16]
 8003fca:	4699      	mov	r9, r3
 8003fcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003fce:	1b1a      	subs	r2, r3, r4
 8003fd0:	d004      	beq.n	8003fdc <_dtoa_r+0x78c>
 8003fd2:	4649      	mov	r1, r9
 8003fd4:	4658      	mov	r0, fp
 8003fd6:	f000 fcb3 	bl	8004940 <__pow5mult>
 8003fda:	4681      	mov	r9, r0
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4658      	mov	r0, fp
 8003fe0:	f000 fbee 	bl	80047c0 <__i2b>
 8003fe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003fe6:	4604      	mov	r4, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 81cf 	beq.w	800438c <_dtoa_r+0xb3c>
 8003fee:	461a      	mov	r2, r3
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	4658      	mov	r0, fp
 8003ff4:	f000 fca4 	bl	8004940 <__pow5mult>
 8003ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	4604      	mov	r4, r0
 8003ffe:	f300 8095 	bgt.w	800412c <_dtoa_r+0x8dc>
 8004002:	9b02      	ldr	r3, [sp, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 8087 	bne.w	8004118 <_dtoa_r+0x8c8>
 800400a:	9b03      	ldr	r3, [sp, #12]
 800400c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004010:	2b00      	cmp	r3, #0
 8004012:	f040 8089 	bne.w	8004128 <_dtoa_r+0x8d8>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800401c:	0d1b      	lsrs	r3, r3, #20
 800401e:	051b      	lsls	r3, r3, #20
 8004020:	b12b      	cbz	r3, 800402e <_dtoa_r+0x7de>
 8004022:	9b08      	ldr	r3, [sp, #32]
 8004024:	3301      	adds	r3, #1
 8004026:	9308      	str	r3, [sp, #32]
 8004028:	f108 0801 	add.w	r8, r8, #1
 800402c:	2301      	movs	r3, #1
 800402e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004030:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 81b0 	beq.w	8004398 <_dtoa_r+0xb48>
 8004038:	6923      	ldr	r3, [r4, #16]
 800403a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800403e:	6918      	ldr	r0, [r3, #16]
 8004040:	f000 fb72 	bl	8004728 <__hi0bits>
 8004044:	f1c0 0020 	rsb	r0, r0, #32
 8004048:	9b08      	ldr	r3, [sp, #32]
 800404a:	4418      	add	r0, r3
 800404c:	f010 001f 	ands.w	r0, r0, #31
 8004050:	d077      	beq.n	8004142 <_dtoa_r+0x8f2>
 8004052:	f1c0 0320 	rsb	r3, r0, #32
 8004056:	2b04      	cmp	r3, #4
 8004058:	dd6b      	ble.n	8004132 <_dtoa_r+0x8e2>
 800405a:	9b08      	ldr	r3, [sp, #32]
 800405c:	f1c0 001c 	rsb	r0, r0, #28
 8004060:	4403      	add	r3, r0
 8004062:	4480      	add	r8, r0
 8004064:	4406      	add	r6, r0
 8004066:	9308      	str	r3, [sp, #32]
 8004068:	f1b8 0f00 	cmp.w	r8, #0
 800406c:	dd05      	ble.n	800407a <_dtoa_r+0x82a>
 800406e:	4649      	mov	r1, r9
 8004070:	4642      	mov	r2, r8
 8004072:	4658      	mov	r0, fp
 8004074:	f000 fcbe 	bl	80049f4 <__lshift>
 8004078:	4681      	mov	r9, r0
 800407a:	9b08      	ldr	r3, [sp, #32]
 800407c:	2b00      	cmp	r3, #0
 800407e:	dd05      	ble.n	800408c <_dtoa_r+0x83c>
 8004080:	4621      	mov	r1, r4
 8004082:	461a      	mov	r2, r3
 8004084:	4658      	mov	r0, fp
 8004086:	f000 fcb5 	bl	80049f4 <__lshift>
 800408a:	4604      	mov	r4, r0
 800408c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800408e:	2b00      	cmp	r3, #0
 8004090:	d059      	beq.n	8004146 <_dtoa_r+0x8f6>
 8004092:	4621      	mov	r1, r4
 8004094:	4648      	mov	r0, r9
 8004096:	f000 fd19 	bl	8004acc <__mcmp>
 800409a:	2800      	cmp	r0, #0
 800409c:	da53      	bge.n	8004146 <_dtoa_r+0x8f6>
 800409e:	1e7b      	subs	r3, r7, #1
 80040a0:	9304      	str	r3, [sp, #16]
 80040a2:	4649      	mov	r1, r9
 80040a4:	2300      	movs	r3, #0
 80040a6:	220a      	movs	r2, #10
 80040a8:	4658      	mov	r0, fp
 80040aa:	f000 faf7 	bl	800469c <__multadd>
 80040ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80040b0:	4681      	mov	r9, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 8172 	beq.w	800439c <_dtoa_r+0xb4c>
 80040b8:	2300      	movs	r3, #0
 80040ba:	4629      	mov	r1, r5
 80040bc:	220a      	movs	r2, #10
 80040be:	4658      	mov	r0, fp
 80040c0:	f000 faec 	bl	800469c <__multadd>
 80040c4:	9b00      	ldr	r3, [sp, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	4605      	mov	r5, r0
 80040ca:	dc67      	bgt.n	800419c <_dtoa_r+0x94c>
 80040cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	dc41      	bgt.n	8004156 <_dtoa_r+0x906>
 80040d2:	e063      	b.n	800419c <_dtoa_r+0x94c>
 80040d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80040d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80040da:	e746      	b.n	8003f6a <_dtoa_r+0x71a>
 80040dc:	9b07      	ldr	r3, [sp, #28]
 80040de:	1e5c      	subs	r4, r3, #1
 80040e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040e2:	42a3      	cmp	r3, r4
 80040e4:	bfbf      	itttt	lt
 80040e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80040e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80040ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80040ec:	1ae3      	sublt	r3, r4, r3
 80040ee:	bfb4      	ite	lt
 80040f0:	18d2      	addlt	r2, r2, r3
 80040f2:	1b1c      	subge	r4, r3, r4
 80040f4:	9b07      	ldr	r3, [sp, #28]
 80040f6:	bfbc      	itt	lt
 80040f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80040fa:	2400      	movlt	r4, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bfb5      	itete	lt
 8004100:	eba8 0603 	sublt.w	r6, r8, r3
 8004104:	9b07      	ldrge	r3, [sp, #28]
 8004106:	2300      	movlt	r3, #0
 8004108:	4646      	movge	r6, r8
 800410a:	e730      	b.n	8003f6e <_dtoa_r+0x71e>
 800410c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800410e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004110:	4646      	mov	r6, r8
 8004112:	e735      	b.n	8003f80 <_dtoa_r+0x730>
 8004114:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004116:	e75c      	b.n	8003fd2 <_dtoa_r+0x782>
 8004118:	2300      	movs	r3, #0
 800411a:	e788      	b.n	800402e <_dtoa_r+0x7de>
 800411c:	3fe00000 	.word	0x3fe00000
 8004120:	40240000 	.word	0x40240000
 8004124:	40140000 	.word	0x40140000
 8004128:	9b02      	ldr	r3, [sp, #8]
 800412a:	e780      	b.n	800402e <_dtoa_r+0x7de>
 800412c:	2300      	movs	r3, #0
 800412e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004130:	e782      	b.n	8004038 <_dtoa_r+0x7e8>
 8004132:	d099      	beq.n	8004068 <_dtoa_r+0x818>
 8004134:	9a08      	ldr	r2, [sp, #32]
 8004136:	331c      	adds	r3, #28
 8004138:	441a      	add	r2, r3
 800413a:	4498      	add	r8, r3
 800413c:	441e      	add	r6, r3
 800413e:	9208      	str	r2, [sp, #32]
 8004140:	e792      	b.n	8004068 <_dtoa_r+0x818>
 8004142:	4603      	mov	r3, r0
 8004144:	e7f6      	b.n	8004134 <_dtoa_r+0x8e4>
 8004146:	9b07      	ldr	r3, [sp, #28]
 8004148:	9704      	str	r7, [sp, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	dc20      	bgt.n	8004190 <_dtoa_r+0x940>
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004152:	2b02      	cmp	r3, #2
 8004154:	dd1e      	ble.n	8004194 <_dtoa_r+0x944>
 8004156:	9b00      	ldr	r3, [sp, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f47f aec0 	bne.w	8003ede <_dtoa_r+0x68e>
 800415e:	4621      	mov	r1, r4
 8004160:	2205      	movs	r2, #5
 8004162:	4658      	mov	r0, fp
 8004164:	f000 fa9a 	bl	800469c <__multadd>
 8004168:	4601      	mov	r1, r0
 800416a:	4604      	mov	r4, r0
 800416c:	4648      	mov	r0, r9
 800416e:	f000 fcad 	bl	8004acc <__mcmp>
 8004172:	2800      	cmp	r0, #0
 8004174:	f77f aeb3 	ble.w	8003ede <_dtoa_r+0x68e>
 8004178:	4656      	mov	r6, sl
 800417a:	2331      	movs	r3, #49	@ 0x31
 800417c:	f806 3b01 	strb.w	r3, [r6], #1
 8004180:	9b04      	ldr	r3, [sp, #16]
 8004182:	3301      	adds	r3, #1
 8004184:	9304      	str	r3, [sp, #16]
 8004186:	e6ae      	b.n	8003ee6 <_dtoa_r+0x696>
 8004188:	9c07      	ldr	r4, [sp, #28]
 800418a:	9704      	str	r7, [sp, #16]
 800418c:	4625      	mov	r5, r4
 800418e:	e7f3      	b.n	8004178 <_dtoa_r+0x928>
 8004190:	9b07      	ldr	r3, [sp, #28]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8104 	beq.w	80043a4 <_dtoa_r+0xb54>
 800419c:	2e00      	cmp	r6, #0
 800419e:	dd05      	ble.n	80041ac <_dtoa_r+0x95c>
 80041a0:	4629      	mov	r1, r5
 80041a2:	4632      	mov	r2, r6
 80041a4:	4658      	mov	r0, fp
 80041a6:	f000 fc25 	bl	80049f4 <__lshift>
 80041aa:	4605      	mov	r5, r0
 80041ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d05a      	beq.n	8004268 <_dtoa_r+0xa18>
 80041b2:	6869      	ldr	r1, [r5, #4]
 80041b4:	4658      	mov	r0, fp
 80041b6:	f000 fa0f 	bl	80045d8 <_Balloc>
 80041ba:	4606      	mov	r6, r0
 80041bc:	b928      	cbnz	r0, 80041ca <_dtoa_r+0x97a>
 80041be:	4b84      	ldr	r3, [pc, #528]	@ (80043d0 <_dtoa_r+0xb80>)
 80041c0:	4602      	mov	r2, r0
 80041c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80041c6:	f7ff bb5a 	b.w	800387e <_dtoa_r+0x2e>
 80041ca:	692a      	ldr	r2, [r5, #16]
 80041cc:	3202      	adds	r2, #2
 80041ce:	0092      	lsls	r2, r2, #2
 80041d0:	f105 010c 	add.w	r1, r5, #12
 80041d4:	300c      	adds	r0, #12
 80041d6:	f000 ffaf 	bl	8005138 <memcpy>
 80041da:	2201      	movs	r2, #1
 80041dc:	4631      	mov	r1, r6
 80041de:	4658      	mov	r0, fp
 80041e0:	f000 fc08 	bl	80049f4 <__lshift>
 80041e4:	f10a 0301 	add.w	r3, sl, #1
 80041e8:	9307      	str	r3, [sp, #28]
 80041ea:	9b00      	ldr	r3, [sp, #0]
 80041ec:	4453      	add	r3, sl
 80041ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80041f0:	9b02      	ldr	r3, [sp, #8]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	462f      	mov	r7, r5
 80041f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80041fa:	4605      	mov	r5, r0
 80041fc:	9b07      	ldr	r3, [sp, #28]
 80041fe:	4621      	mov	r1, r4
 8004200:	3b01      	subs	r3, #1
 8004202:	4648      	mov	r0, r9
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	f7ff fa9a 	bl	800373e <quorem>
 800420a:	4639      	mov	r1, r7
 800420c:	9002      	str	r0, [sp, #8]
 800420e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004212:	4648      	mov	r0, r9
 8004214:	f000 fc5a 	bl	8004acc <__mcmp>
 8004218:	462a      	mov	r2, r5
 800421a:	9008      	str	r0, [sp, #32]
 800421c:	4621      	mov	r1, r4
 800421e:	4658      	mov	r0, fp
 8004220:	f000 fc70 	bl	8004b04 <__mdiff>
 8004224:	68c2      	ldr	r2, [r0, #12]
 8004226:	4606      	mov	r6, r0
 8004228:	bb02      	cbnz	r2, 800426c <_dtoa_r+0xa1c>
 800422a:	4601      	mov	r1, r0
 800422c:	4648      	mov	r0, r9
 800422e:	f000 fc4d 	bl	8004acc <__mcmp>
 8004232:	4602      	mov	r2, r0
 8004234:	4631      	mov	r1, r6
 8004236:	4658      	mov	r0, fp
 8004238:	920e      	str	r2, [sp, #56]	@ 0x38
 800423a:	f000 fa0d 	bl	8004658 <_Bfree>
 800423e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004240:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004242:	9e07      	ldr	r6, [sp, #28]
 8004244:	ea43 0102 	orr.w	r1, r3, r2
 8004248:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800424a:	4319      	orrs	r1, r3
 800424c:	d110      	bne.n	8004270 <_dtoa_r+0xa20>
 800424e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004252:	d029      	beq.n	80042a8 <_dtoa_r+0xa58>
 8004254:	9b08      	ldr	r3, [sp, #32]
 8004256:	2b00      	cmp	r3, #0
 8004258:	dd02      	ble.n	8004260 <_dtoa_r+0xa10>
 800425a:	9b02      	ldr	r3, [sp, #8]
 800425c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004260:	9b00      	ldr	r3, [sp, #0]
 8004262:	f883 8000 	strb.w	r8, [r3]
 8004266:	e63f      	b.n	8003ee8 <_dtoa_r+0x698>
 8004268:	4628      	mov	r0, r5
 800426a:	e7bb      	b.n	80041e4 <_dtoa_r+0x994>
 800426c:	2201      	movs	r2, #1
 800426e:	e7e1      	b.n	8004234 <_dtoa_r+0x9e4>
 8004270:	9b08      	ldr	r3, [sp, #32]
 8004272:	2b00      	cmp	r3, #0
 8004274:	db04      	blt.n	8004280 <_dtoa_r+0xa30>
 8004276:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004278:	430b      	orrs	r3, r1
 800427a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800427c:	430b      	orrs	r3, r1
 800427e:	d120      	bne.n	80042c2 <_dtoa_r+0xa72>
 8004280:	2a00      	cmp	r2, #0
 8004282:	dded      	ble.n	8004260 <_dtoa_r+0xa10>
 8004284:	4649      	mov	r1, r9
 8004286:	2201      	movs	r2, #1
 8004288:	4658      	mov	r0, fp
 800428a:	f000 fbb3 	bl	80049f4 <__lshift>
 800428e:	4621      	mov	r1, r4
 8004290:	4681      	mov	r9, r0
 8004292:	f000 fc1b 	bl	8004acc <__mcmp>
 8004296:	2800      	cmp	r0, #0
 8004298:	dc03      	bgt.n	80042a2 <_dtoa_r+0xa52>
 800429a:	d1e1      	bne.n	8004260 <_dtoa_r+0xa10>
 800429c:	f018 0f01 	tst.w	r8, #1
 80042a0:	d0de      	beq.n	8004260 <_dtoa_r+0xa10>
 80042a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80042a6:	d1d8      	bne.n	800425a <_dtoa_r+0xa0a>
 80042a8:	9a00      	ldr	r2, [sp, #0]
 80042aa:	2339      	movs	r3, #57	@ 0x39
 80042ac:	7013      	strb	r3, [r2, #0]
 80042ae:	4633      	mov	r3, r6
 80042b0:	461e      	mov	r6, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80042b8:	2a39      	cmp	r2, #57	@ 0x39
 80042ba:	d052      	beq.n	8004362 <_dtoa_r+0xb12>
 80042bc:	3201      	adds	r2, #1
 80042be:	701a      	strb	r2, [r3, #0]
 80042c0:	e612      	b.n	8003ee8 <_dtoa_r+0x698>
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	dd07      	ble.n	80042d6 <_dtoa_r+0xa86>
 80042c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80042ca:	d0ed      	beq.n	80042a8 <_dtoa_r+0xa58>
 80042cc:	9a00      	ldr	r2, [sp, #0]
 80042ce:	f108 0301 	add.w	r3, r8, #1
 80042d2:	7013      	strb	r3, [r2, #0]
 80042d4:	e608      	b.n	8003ee8 <_dtoa_r+0x698>
 80042d6:	9b07      	ldr	r3, [sp, #28]
 80042d8:	9a07      	ldr	r2, [sp, #28]
 80042da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80042de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d028      	beq.n	8004336 <_dtoa_r+0xae6>
 80042e4:	4649      	mov	r1, r9
 80042e6:	2300      	movs	r3, #0
 80042e8:	220a      	movs	r2, #10
 80042ea:	4658      	mov	r0, fp
 80042ec:	f000 f9d6 	bl	800469c <__multadd>
 80042f0:	42af      	cmp	r7, r5
 80042f2:	4681      	mov	r9, r0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	f04f 020a 	mov.w	r2, #10
 80042fc:	4639      	mov	r1, r7
 80042fe:	4658      	mov	r0, fp
 8004300:	d107      	bne.n	8004312 <_dtoa_r+0xac2>
 8004302:	f000 f9cb 	bl	800469c <__multadd>
 8004306:	4607      	mov	r7, r0
 8004308:	4605      	mov	r5, r0
 800430a:	9b07      	ldr	r3, [sp, #28]
 800430c:	3301      	adds	r3, #1
 800430e:	9307      	str	r3, [sp, #28]
 8004310:	e774      	b.n	80041fc <_dtoa_r+0x9ac>
 8004312:	f000 f9c3 	bl	800469c <__multadd>
 8004316:	4629      	mov	r1, r5
 8004318:	4607      	mov	r7, r0
 800431a:	2300      	movs	r3, #0
 800431c:	220a      	movs	r2, #10
 800431e:	4658      	mov	r0, fp
 8004320:	f000 f9bc 	bl	800469c <__multadd>
 8004324:	4605      	mov	r5, r0
 8004326:	e7f0      	b.n	800430a <_dtoa_r+0xaba>
 8004328:	9b00      	ldr	r3, [sp, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	bfcc      	ite	gt
 800432e:	461e      	movgt	r6, r3
 8004330:	2601      	movle	r6, #1
 8004332:	4456      	add	r6, sl
 8004334:	2700      	movs	r7, #0
 8004336:	4649      	mov	r1, r9
 8004338:	2201      	movs	r2, #1
 800433a:	4658      	mov	r0, fp
 800433c:	f000 fb5a 	bl	80049f4 <__lshift>
 8004340:	4621      	mov	r1, r4
 8004342:	4681      	mov	r9, r0
 8004344:	f000 fbc2 	bl	8004acc <__mcmp>
 8004348:	2800      	cmp	r0, #0
 800434a:	dcb0      	bgt.n	80042ae <_dtoa_r+0xa5e>
 800434c:	d102      	bne.n	8004354 <_dtoa_r+0xb04>
 800434e:	f018 0f01 	tst.w	r8, #1
 8004352:	d1ac      	bne.n	80042ae <_dtoa_r+0xa5e>
 8004354:	4633      	mov	r3, r6
 8004356:	461e      	mov	r6, r3
 8004358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800435c:	2a30      	cmp	r2, #48	@ 0x30
 800435e:	d0fa      	beq.n	8004356 <_dtoa_r+0xb06>
 8004360:	e5c2      	b.n	8003ee8 <_dtoa_r+0x698>
 8004362:	459a      	cmp	sl, r3
 8004364:	d1a4      	bne.n	80042b0 <_dtoa_r+0xa60>
 8004366:	9b04      	ldr	r3, [sp, #16]
 8004368:	3301      	adds	r3, #1
 800436a:	9304      	str	r3, [sp, #16]
 800436c:	2331      	movs	r3, #49	@ 0x31
 800436e:	f88a 3000 	strb.w	r3, [sl]
 8004372:	e5b9      	b.n	8003ee8 <_dtoa_r+0x698>
 8004374:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004376:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80043d4 <_dtoa_r+0xb84>
 800437a:	b11b      	cbz	r3, 8004384 <_dtoa_r+0xb34>
 800437c:	f10a 0308 	add.w	r3, sl, #8
 8004380:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4650      	mov	r0, sl
 8004386:	b019      	add	sp, #100	@ 0x64
 8004388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800438c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800438e:	2b01      	cmp	r3, #1
 8004390:	f77f ae37 	ble.w	8004002 <_dtoa_r+0x7b2>
 8004394:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004396:	930a      	str	r3, [sp, #40]	@ 0x28
 8004398:	2001      	movs	r0, #1
 800439a:	e655      	b.n	8004048 <_dtoa_r+0x7f8>
 800439c:	9b00      	ldr	r3, [sp, #0]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f77f aed6 	ble.w	8004150 <_dtoa_r+0x900>
 80043a4:	4656      	mov	r6, sl
 80043a6:	4621      	mov	r1, r4
 80043a8:	4648      	mov	r0, r9
 80043aa:	f7ff f9c8 	bl	800373e <quorem>
 80043ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80043b2:	f806 8b01 	strb.w	r8, [r6], #1
 80043b6:	9b00      	ldr	r3, [sp, #0]
 80043b8:	eba6 020a 	sub.w	r2, r6, sl
 80043bc:	4293      	cmp	r3, r2
 80043be:	ddb3      	ble.n	8004328 <_dtoa_r+0xad8>
 80043c0:	4649      	mov	r1, r9
 80043c2:	2300      	movs	r3, #0
 80043c4:	220a      	movs	r2, #10
 80043c6:	4658      	mov	r0, fp
 80043c8:	f000 f968 	bl	800469c <__multadd>
 80043cc:	4681      	mov	r9, r0
 80043ce:	e7ea      	b.n	80043a6 <_dtoa_r+0xb56>
 80043d0:	080058e4 	.word	0x080058e4
 80043d4:	08005868 	.word	0x08005868

080043d8 <_free_r>:
 80043d8:	b538      	push	{r3, r4, r5, lr}
 80043da:	4605      	mov	r5, r0
 80043dc:	2900      	cmp	r1, #0
 80043de:	d041      	beq.n	8004464 <_free_r+0x8c>
 80043e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e4:	1f0c      	subs	r4, r1, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	bfb8      	it	lt
 80043ea:	18e4      	addlt	r4, r4, r3
 80043ec:	f000 f8e8 	bl	80045c0 <__malloc_lock>
 80043f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004468 <_free_r+0x90>)
 80043f2:	6813      	ldr	r3, [r2, #0]
 80043f4:	b933      	cbnz	r3, 8004404 <_free_r+0x2c>
 80043f6:	6063      	str	r3, [r4, #4]
 80043f8:	6014      	str	r4, [r2, #0]
 80043fa:	4628      	mov	r0, r5
 80043fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004400:	f000 b8e4 	b.w	80045cc <__malloc_unlock>
 8004404:	42a3      	cmp	r3, r4
 8004406:	d908      	bls.n	800441a <_free_r+0x42>
 8004408:	6820      	ldr	r0, [r4, #0]
 800440a:	1821      	adds	r1, r4, r0
 800440c:	428b      	cmp	r3, r1
 800440e:	bf01      	itttt	eq
 8004410:	6819      	ldreq	r1, [r3, #0]
 8004412:	685b      	ldreq	r3, [r3, #4]
 8004414:	1809      	addeq	r1, r1, r0
 8004416:	6021      	streq	r1, [r4, #0]
 8004418:	e7ed      	b.n	80043f6 <_free_r+0x1e>
 800441a:	461a      	mov	r2, r3
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	b10b      	cbz	r3, 8004424 <_free_r+0x4c>
 8004420:	42a3      	cmp	r3, r4
 8004422:	d9fa      	bls.n	800441a <_free_r+0x42>
 8004424:	6811      	ldr	r1, [r2, #0]
 8004426:	1850      	adds	r0, r2, r1
 8004428:	42a0      	cmp	r0, r4
 800442a:	d10b      	bne.n	8004444 <_free_r+0x6c>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	4401      	add	r1, r0
 8004430:	1850      	adds	r0, r2, r1
 8004432:	4283      	cmp	r3, r0
 8004434:	6011      	str	r1, [r2, #0]
 8004436:	d1e0      	bne.n	80043fa <_free_r+0x22>
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6053      	str	r3, [r2, #4]
 800443e:	4408      	add	r0, r1
 8004440:	6010      	str	r0, [r2, #0]
 8004442:	e7da      	b.n	80043fa <_free_r+0x22>
 8004444:	d902      	bls.n	800444c <_free_r+0x74>
 8004446:	230c      	movs	r3, #12
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	e7d6      	b.n	80043fa <_free_r+0x22>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	1821      	adds	r1, r4, r0
 8004450:	428b      	cmp	r3, r1
 8004452:	bf04      	itt	eq
 8004454:	6819      	ldreq	r1, [r3, #0]
 8004456:	685b      	ldreq	r3, [r3, #4]
 8004458:	6063      	str	r3, [r4, #4]
 800445a:	bf04      	itt	eq
 800445c:	1809      	addeq	r1, r1, r0
 800445e:	6021      	streq	r1, [r4, #0]
 8004460:	6054      	str	r4, [r2, #4]
 8004462:	e7ca      	b.n	80043fa <_free_r+0x22>
 8004464:	bd38      	pop	{r3, r4, r5, pc}
 8004466:	bf00      	nop
 8004468:	20000388 	.word	0x20000388

0800446c <malloc>:
 800446c:	4b02      	ldr	r3, [pc, #8]	@ (8004478 <malloc+0xc>)
 800446e:	4601      	mov	r1, r0
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f000 b825 	b.w	80044c0 <_malloc_r>
 8004476:	bf00      	nop
 8004478:	20000018 	.word	0x20000018

0800447c <sbrk_aligned>:
 800447c:	b570      	push	{r4, r5, r6, lr}
 800447e:	4e0f      	ldr	r6, [pc, #60]	@ (80044bc <sbrk_aligned+0x40>)
 8004480:	460c      	mov	r4, r1
 8004482:	6831      	ldr	r1, [r6, #0]
 8004484:	4605      	mov	r5, r0
 8004486:	b911      	cbnz	r1, 800448e <sbrk_aligned+0x12>
 8004488:	f000 fe46 	bl	8005118 <_sbrk_r>
 800448c:	6030      	str	r0, [r6, #0]
 800448e:	4621      	mov	r1, r4
 8004490:	4628      	mov	r0, r5
 8004492:	f000 fe41 	bl	8005118 <_sbrk_r>
 8004496:	1c43      	adds	r3, r0, #1
 8004498:	d103      	bne.n	80044a2 <sbrk_aligned+0x26>
 800449a:	f04f 34ff 	mov.w	r4, #4294967295
 800449e:	4620      	mov	r0, r4
 80044a0:	bd70      	pop	{r4, r5, r6, pc}
 80044a2:	1cc4      	adds	r4, r0, #3
 80044a4:	f024 0403 	bic.w	r4, r4, #3
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d0f8      	beq.n	800449e <sbrk_aligned+0x22>
 80044ac:	1a21      	subs	r1, r4, r0
 80044ae:	4628      	mov	r0, r5
 80044b0:	f000 fe32 	bl	8005118 <_sbrk_r>
 80044b4:	3001      	adds	r0, #1
 80044b6:	d1f2      	bne.n	800449e <sbrk_aligned+0x22>
 80044b8:	e7ef      	b.n	800449a <sbrk_aligned+0x1e>
 80044ba:	bf00      	nop
 80044bc:	20000384 	.word	0x20000384

080044c0 <_malloc_r>:
 80044c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c4:	1ccd      	adds	r5, r1, #3
 80044c6:	f025 0503 	bic.w	r5, r5, #3
 80044ca:	3508      	adds	r5, #8
 80044cc:	2d0c      	cmp	r5, #12
 80044ce:	bf38      	it	cc
 80044d0:	250c      	movcc	r5, #12
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	4606      	mov	r6, r0
 80044d6:	db01      	blt.n	80044dc <_malloc_r+0x1c>
 80044d8:	42a9      	cmp	r1, r5
 80044da:	d904      	bls.n	80044e6 <_malloc_r+0x26>
 80044dc:	230c      	movs	r3, #12
 80044de:	6033      	str	r3, [r6, #0]
 80044e0:	2000      	movs	r0, #0
 80044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045bc <_malloc_r+0xfc>
 80044ea:	f000 f869 	bl	80045c0 <__malloc_lock>
 80044ee:	f8d8 3000 	ldr.w	r3, [r8]
 80044f2:	461c      	mov	r4, r3
 80044f4:	bb44      	cbnz	r4, 8004548 <_malloc_r+0x88>
 80044f6:	4629      	mov	r1, r5
 80044f8:	4630      	mov	r0, r6
 80044fa:	f7ff ffbf 	bl	800447c <sbrk_aligned>
 80044fe:	1c43      	adds	r3, r0, #1
 8004500:	4604      	mov	r4, r0
 8004502:	d158      	bne.n	80045b6 <_malloc_r+0xf6>
 8004504:	f8d8 4000 	ldr.w	r4, [r8]
 8004508:	4627      	mov	r7, r4
 800450a:	2f00      	cmp	r7, #0
 800450c:	d143      	bne.n	8004596 <_malloc_r+0xd6>
 800450e:	2c00      	cmp	r4, #0
 8004510:	d04b      	beq.n	80045aa <_malloc_r+0xea>
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	4639      	mov	r1, r7
 8004516:	4630      	mov	r0, r6
 8004518:	eb04 0903 	add.w	r9, r4, r3
 800451c:	f000 fdfc 	bl	8005118 <_sbrk_r>
 8004520:	4581      	cmp	r9, r0
 8004522:	d142      	bne.n	80045aa <_malloc_r+0xea>
 8004524:	6821      	ldr	r1, [r4, #0]
 8004526:	1a6d      	subs	r5, r5, r1
 8004528:	4629      	mov	r1, r5
 800452a:	4630      	mov	r0, r6
 800452c:	f7ff ffa6 	bl	800447c <sbrk_aligned>
 8004530:	3001      	adds	r0, #1
 8004532:	d03a      	beq.n	80045aa <_malloc_r+0xea>
 8004534:	6823      	ldr	r3, [r4, #0]
 8004536:	442b      	add	r3, r5
 8004538:	6023      	str	r3, [r4, #0]
 800453a:	f8d8 3000 	ldr.w	r3, [r8]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	bb62      	cbnz	r2, 800459c <_malloc_r+0xdc>
 8004542:	f8c8 7000 	str.w	r7, [r8]
 8004546:	e00f      	b.n	8004568 <_malloc_r+0xa8>
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	1b52      	subs	r2, r2, r5
 800454c:	d420      	bmi.n	8004590 <_malloc_r+0xd0>
 800454e:	2a0b      	cmp	r2, #11
 8004550:	d917      	bls.n	8004582 <_malloc_r+0xc2>
 8004552:	1961      	adds	r1, r4, r5
 8004554:	42a3      	cmp	r3, r4
 8004556:	6025      	str	r5, [r4, #0]
 8004558:	bf18      	it	ne
 800455a:	6059      	strne	r1, [r3, #4]
 800455c:	6863      	ldr	r3, [r4, #4]
 800455e:	bf08      	it	eq
 8004560:	f8c8 1000 	streq.w	r1, [r8]
 8004564:	5162      	str	r2, [r4, r5]
 8004566:	604b      	str	r3, [r1, #4]
 8004568:	4630      	mov	r0, r6
 800456a:	f000 f82f 	bl	80045cc <__malloc_unlock>
 800456e:	f104 000b 	add.w	r0, r4, #11
 8004572:	1d23      	adds	r3, r4, #4
 8004574:	f020 0007 	bic.w	r0, r0, #7
 8004578:	1ac2      	subs	r2, r0, r3
 800457a:	bf1c      	itt	ne
 800457c:	1a1b      	subne	r3, r3, r0
 800457e:	50a3      	strne	r3, [r4, r2]
 8004580:	e7af      	b.n	80044e2 <_malloc_r+0x22>
 8004582:	6862      	ldr	r2, [r4, #4]
 8004584:	42a3      	cmp	r3, r4
 8004586:	bf0c      	ite	eq
 8004588:	f8c8 2000 	streq.w	r2, [r8]
 800458c:	605a      	strne	r2, [r3, #4]
 800458e:	e7eb      	b.n	8004568 <_malloc_r+0xa8>
 8004590:	4623      	mov	r3, r4
 8004592:	6864      	ldr	r4, [r4, #4]
 8004594:	e7ae      	b.n	80044f4 <_malloc_r+0x34>
 8004596:	463c      	mov	r4, r7
 8004598:	687f      	ldr	r7, [r7, #4]
 800459a:	e7b6      	b.n	800450a <_malloc_r+0x4a>
 800459c:	461a      	mov	r2, r3
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	d1fb      	bne.n	800459c <_malloc_r+0xdc>
 80045a4:	2300      	movs	r3, #0
 80045a6:	6053      	str	r3, [r2, #4]
 80045a8:	e7de      	b.n	8004568 <_malloc_r+0xa8>
 80045aa:	230c      	movs	r3, #12
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	4630      	mov	r0, r6
 80045b0:	f000 f80c 	bl	80045cc <__malloc_unlock>
 80045b4:	e794      	b.n	80044e0 <_malloc_r+0x20>
 80045b6:	6005      	str	r5, [r0, #0]
 80045b8:	e7d6      	b.n	8004568 <_malloc_r+0xa8>
 80045ba:	bf00      	nop
 80045bc:	20000388 	.word	0x20000388

080045c0 <__malloc_lock>:
 80045c0:	4801      	ldr	r0, [pc, #4]	@ (80045c8 <__malloc_lock+0x8>)
 80045c2:	f7ff b8ba 	b.w	800373a <__retarget_lock_acquire_recursive>
 80045c6:	bf00      	nop
 80045c8:	20000380 	.word	0x20000380

080045cc <__malloc_unlock>:
 80045cc:	4801      	ldr	r0, [pc, #4]	@ (80045d4 <__malloc_unlock+0x8>)
 80045ce:	f7ff b8b5 	b.w	800373c <__retarget_lock_release_recursive>
 80045d2:	bf00      	nop
 80045d4:	20000380 	.word	0x20000380

080045d8 <_Balloc>:
 80045d8:	b570      	push	{r4, r5, r6, lr}
 80045da:	69c6      	ldr	r6, [r0, #28]
 80045dc:	4604      	mov	r4, r0
 80045de:	460d      	mov	r5, r1
 80045e0:	b976      	cbnz	r6, 8004600 <_Balloc+0x28>
 80045e2:	2010      	movs	r0, #16
 80045e4:	f7ff ff42 	bl	800446c <malloc>
 80045e8:	4602      	mov	r2, r0
 80045ea:	61e0      	str	r0, [r4, #28]
 80045ec:	b920      	cbnz	r0, 80045f8 <_Balloc+0x20>
 80045ee:	4b18      	ldr	r3, [pc, #96]	@ (8004650 <_Balloc+0x78>)
 80045f0:	4818      	ldr	r0, [pc, #96]	@ (8004654 <_Balloc+0x7c>)
 80045f2:	216b      	movs	r1, #107	@ 0x6b
 80045f4:	f000 fdae 	bl	8005154 <__assert_func>
 80045f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80045fc:	6006      	str	r6, [r0, #0]
 80045fe:	60c6      	str	r6, [r0, #12]
 8004600:	69e6      	ldr	r6, [r4, #28]
 8004602:	68f3      	ldr	r3, [r6, #12]
 8004604:	b183      	cbz	r3, 8004628 <_Balloc+0x50>
 8004606:	69e3      	ldr	r3, [r4, #28]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800460e:	b9b8      	cbnz	r0, 8004640 <_Balloc+0x68>
 8004610:	2101      	movs	r1, #1
 8004612:	fa01 f605 	lsl.w	r6, r1, r5
 8004616:	1d72      	adds	r2, r6, #5
 8004618:	0092      	lsls	r2, r2, #2
 800461a:	4620      	mov	r0, r4
 800461c:	f000 fdb8 	bl	8005190 <_calloc_r>
 8004620:	b160      	cbz	r0, 800463c <_Balloc+0x64>
 8004622:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004626:	e00e      	b.n	8004646 <_Balloc+0x6e>
 8004628:	2221      	movs	r2, #33	@ 0x21
 800462a:	2104      	movs	r1, #4
 800462c:	4620      	mov	r0, r4
 800462e:	f000 fdaf 	bl	8005190 <_calloc_r>
 8004632:	69e3      	ldr	r3, [r4, #28]
 8004634:	60f0      	str	r0, [r6, #12]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1e4      	bne.n	8004606 <_Balloc+0x2e>
 800463c:	2000      	movs	r0, #0
 800463e:	bd70      	pop	{r4, r5, r6, pc}
 8004640:	6802      	ldr	r2, [r0, #0]
 8004642:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004646:	2300      	movs	r3, #0
 8004648:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800464c:	e7f7      	b.n	800463e <_Balloc+0x66>
 800464e:	bf00      	nop
 8004650:	08005875 	.word	0x08005875
 8004654:	080058f5 	.word	0x080058f5

08004658 <_Bfree>:
 8004658:	b570      	push	{r4, r5, r6, lr}
 800465a:	69c6      	ldr	r6, [r0, #28]
 800465c:	4605      	mov	r5, r0
 800465e:	460c      	mov	r4, r1
 8004660:	b976      	cbnz	r6, 8004680 <_Bfree+0x28>
 8004662:	2010      	movs	r0, #16
 8004664:	f7ff ff02 	bl	800446c <malloc>
 8004668:	4602      	mov	r2, r0
 800466a:	61e8      	str	r0, [r5, #28]
 800466c:	b920      	cbnz	r0, 8004678 <_Bfree+0x20>
 800466e:	4b09      	ldr	r3, [pc, #36]	@ (8004694 <_Bfree+0x3c>)
 8004670:	4809      	ldr	r0, [pc, #36]	@ (8004698 <_Bfree+0x40>)
 8004672:	218f      	movs	r1, #143	@ 0x8f
 8004674:	f000 fd6e 	bl	8005154 <__assert_func>
 8004678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800467c:	6006      	str	r6, [r0, #0]
 800467e:	60c6      	str	r6, [r0, #12]
 8004680:	b13c      	cbz	r4, 8004692 <_Bfree+0x3a>
 8004682:	69eb      	ldr	r3, [r5, #28]
 8004684:	6862      	ldr	r2, [r4, #4]
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800468c:	6021      	str	r1, [r4, #0]
 800468e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004692:	bd70      	pop	{r4, r5, r6, pc}
 8004694:	08005875 	.word	0x08005875
 8004698:	080058f5 	.word	0x080058f5

0800469c <__multadd>:
 800469c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046a0:	690d      	ldr	r5, [r1, #16]
 80046a2:	4607      	mov	r7, r0
 80046a4:	460c      	mov	r4, r1
 80046a6:	461e      	mov	r6, r3
 80046a8:	f101 0c14 	add.w	ip, r1, #20
 80046ac:	2000      	movs	r0, #0
 80046ae:	f8dc 3000 	ldr.w	r3, [ip]
 80046b2:	b299      	uxth	r1, r3
 80046b4:	fb02 6101 	mla	r1, r2, r1, r6
 80046b8:	0c1e      	lsrs	r6, r3, #16
 80046ba:	0c0b      	lsrs	r3, r1, #16
 80046bc:	fb02 3306 	mla	r3, r2, r6, r3
 80046c0:	b289      	uxth	r1, r1
 80046c2:	3001      	adds	r0, #1
 80046c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80046c8:	4285      	cmp	r5, r0
 80046ca:	f84c 1b04 	str.w	r1, [ip], #4
 80046ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80046d2:	dcec      	bgt.n	80046ae <__multadd+0x12>
 80046d4:	b30e      	cbz	r6, 800471a <__multadd+0x7e>
 80046d6:	68a3      	ldr	r3, [r4, #8]
 80046d8:	42ab      	cmp	r3, r5
 80046da:	dc19      	bgt.n	8004710 <__multadd+0x74>
 80046dc:	6861      	ldr	r1, [r4, #4]
 80046de:	4638      	mov	r0, r7
 80046e0:	3101      	adds	r1, #1
 80046e2:	f7ff ff79 	bl	80045d8 <_Balloc>
 80046e6:	4680      	mov	r8, r0
 80046e8:	b928      	cbnz	r0, 80046f6 <__multadd+0x5a>
 80046ea:	4602      	mov	r2, r0
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <__multadd+0x84>)
 80046ee:	480d      	ldr	r0, [pc, #52]	@ (8004724 <__multadd+0x88>)
 80046f0:	21ba      	movs	r1, #186	@ 0xba
 80046f2:	f000 fd2f 	bl	8005154 <__assert_func>
 80046f6:	6922      	ldr	r2, [r4, #16]
 80046f8:	3202      	adds	r2, #2
 80046fa:	f104 010c 	add.w	r1, r4, #12
 80046fe:	0092      	lsls	r2, r2, #2
 8004700:	300c      	adds	r0, #12
 8004702:	f000 fd19 	bl	8005138 <memcpy>
 8004706:	4621      	mov	r1, r4
 8004708:	4638      	mov	r0, r7
 800470a:	f7ff ffa5 	bl	8004658 <_Bfree>
 800470e:	4644      	mov	r4, r8
 8004710:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004714:	3501      	adds	r5, #1
 8004716:	615e      	str	r6, [r3, #20]
 8004718:	6125      	str	r5, [r4, #16]
 800471a:	4620      	mov	r0, r4
 800471c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004720:	080058e4 	.word	0x080058e4
 8004724:	080058f5 	.word	0x080058f5

08004728 <__hi0bits>:
 8004728:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800472c:	4603      	mov	r3, r0
 800472e:	bf36      	itet	cc
 8004730:	0403      	lslcc	r3, r0, #16
 8004732:	2000      	movcs	r0, #0
 8004734:	2010      	movcc	r0, #16
 8004736:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800473a:	bf3c      	itt	cc
 800473c:	021b      	lslcc	r3, r3, #8
 800473e:	3008      	addcc	r0, #8
 8004740:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004744:	bf3c      	itt	cc
 8004746:	011b      	lslcc	r3, r3, #4
 8004748:	3004      	addcc	r0, #4
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474e:	bf3c      	itt	cc
 8004750:	009b      	lslcc	r3, r3, #2
 8004752:	3002      	addcc	r0, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	db05      	blt.n	8004764 <__hi0bits+0x3c>
 8004758:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800475c:	f100 0001 	add.w	r0, r0, #1
 8004760:	bf08      	it	eq
 8004762:	2020      	moveq	r0, #32
 8004764:	4770      	bx	lr

08004766 <__lo0bits>:
 8004766:	6803      	ldr	r3, [r0, #0]
 8004768:	4602      	mov	r2, r0
 800476a:	f013 0007 	ands.w	r0, r3, #7
 800476e:	d00b      	beq.n	8004788 <__lo0bits+0x22>
 8004770:	07d9      	lsls	r1, r3, #31
 8004772:	d421      	bmi.n	80047b8 <__lo0bits+0x52>
 8004774:	0798      	lsls	r0, r3, #30
 8004776:	bf49      	itett	mi
 8004778:	085b      	lsrmi	r3, r3, #1
 800477a:	089b      	lsrpl	r3, r3, #2
 800477c:	2001      	movmi	r0, #1
 800477e:	6013      	strmi	r3, [r2, #0]
 8004780:	bf5c      	itt	pl
 8004782:	6013      	strpl	r3, [r2, #0]
 8004784:	2002      	movpl	r0, #2
 8004786:	4770      	bx	lr
 8004788:	b299      	uxth	r1, r3
 800478a:	b909      	cbnz	r1, 8004790 <__lo0bits+0x2a>
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	2010      	movs	r0, #16
 8004790:	b2d9      	uxtb	r1, r3
 8004792:	b909      	cbnz	r1, 8004798 <__lo0bits+0x32>
 8004794:	3008      	adds	r0, #8
 8004796:	0a1b      	lsrs	r3, r3, #8
 8004798:	0719      	lsls	r1, r3, #28
 800479a:	bf04      	itt	eq
 800479c:	091b      	lsreq	r3, r3, #4
 800479e:	3004      	addeq	r0, #4
 80047a0:	0799      	lsls	r1, r3, #30
 80047a2:	bf04      	itt	eq
 80047a4:	089b      	lsreq	r3, r3, #2
 80047a6:	3002      	addeq	r0, #2
 80047a8:	07d9      	lsls	r1, r3, #31
 80047aa:	d403      	bmi.n	80047b4 <__lo0bits+0x4e>
 80047ac:	085b      	lsrs	r3, r3, #1
 80047ae:	f100 0001 	add.w	r0, r0, #1
 80047b2:	d003      	beq.n	80047bc <__lo0bits+0x56>
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	4770      	bx	lr
 80047b8:	2000      	movs	r0, #0
 80047ba:	4770      	bx	lr
 80047bc:	2020      	movs	r0, #32
 80047be:	4770      	bx	lr

080047c0 <__i2b>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	460c      	mov	r4, r1
 80047c4:	2101      	movs	r1, #1
 80047c6:	f7ff ff07 	bl	80045d8 <_Balloc>
 80047ca:	4602      	mov	r2, r0
 80047cc:	b928      	cbnz	r0, 80047da <__i2b+0x1a>
 80047ce:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <__i2b+0x24>)
 80047d0:	4805      	ldr	r0, [pc, #20]	@ (80047e8 <__i2b+0x28>)
 80047d2:	f240 1145 	movw	r1, #325	@ 0x145
 80047d6:	f000 fcbd 	bl	8005154 <__assert_func>
 80047da:	2301      	movs	r3, #1
 80047dc:	6144      	str	r4, [r0, #20]
 80047de:	6103      	str	r3, [r0, #16]
 80047e0:	bd10      	pop	{r4, pc}
 80047e2:	bf00      	nop
 80047e4:	080058e4 	.word	0x080058e4
 80047e8:	080058f5 	.word	0x080058f5

080047ec <__multiply>:
 80047ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	4614      	mov	r4, r2
 80047f2:	690a      	ldr	r2, [r1, #16]
 80047f4:	6923      	ldr	r3, [r4, #16]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	bfa8      	it	ge
 80047fa:	4623      	movge	r3, r4
 80047fc:	460f      	mov	r7, r1
 80047fe:	bfa4      	itt	ge
 8004800:	460c      	movge	r4, r1
 8004802:	461f      	movge	r7, r3
 8004804:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004808:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800480c:	68a3      	ldr	r3, [r4, #8]
 800480e:	6861      	ldr	r1, [r4, #4]
 8004810:	eb0a 0609 	add.w	r6, sl, r9
 8004814:	42b3      	cmp	r3, r6
 8004816:	b085      	sub	sp, #20
 8004818:	bfb8      	it	lt
 800481a:	3101      	addlt	r1, #1
 800481c:	f7ff fedc 	bl	80045d8 <_Balloc>
 8004820:	b930      	cbnz	r0, 8004830 <__multiply+0x44>
 8004822:	4602      	mov	r2, r0
 8004824:	4b44      	ldr	r3, [pc, #272]	@ (8004938 <__multiply+0x14c>)
 8004826:	4845      	ldr	r0, [pc, #276]	@ (800493c <__multiply+0x150>)
 8004828:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800482c:	f000 fc92 	bl	8005154 <__assert_func>
 8004830:	f100 0514 	add.w	r5, r0, #20
 8004834:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004838:	462b      	mov	r3, r5
 800483a:	2200      	movs	r2, #0
 800483c:	4543      	cmp	r3, r8
 800483e:	d321      	bcc.n	8004884 <__multiply+0x98>
 8004840:	f107 0114 	add.w	r1, r7, #20
 8004844:	f104 0214 	add.w	r2, r4, #20
 8004848:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800484c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004850:	9302      	str	r3, [sp, #8]
 8004852:	1b13      	subs	r3, r2, r4
 8004854:	3b15      	subs	r3, #21
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	3304      	adds	r3, #4
 800485c:	f104 0715 	add.w	r7, r4, #21
 8004860:	42ba      	cmp	r2, r7
 8004862:	bf38      	it	cc
 8004864:	2304      	movcc	r3, #4
 8004866:	9301      	str	r3, [sp, #4]
 8004868:	9b02      	ldr	r3, [sp, #8]
 800486a:	9103      	str	r1, [sp, #12]
 800486c:	428b      	cmp	r3, r1
 800486e:	d80c      	bhi.n	800488a <__multiply+0x9e>
 8004870:	2e00      	cmp	r6, #0
 8004872:	dd03      	ble.n	800487c <__multiply+0x90>
 8004874:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05b      	beq.n	8004934 <__multiply+0x148>
 800487c:	6106      	str	r6, [r0, #16]
 800487e:	b005      	add	sp, #20
 8004880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004884:	f843 2b04 	str.w	r2, [r3], #4
 8004888:	e7d8      	b.n	800483c <__multiply+0x50>
 800488a:	f8b1 a000 	ldrh.w	sl, [r1]
 800488e:	f1ba 0f00 	cmp.w	sl, #0
 8004892:	d024      	beq.n	80048de <__multiply+0xf2>
 8004894:	f104 0e14 	add.w	lr, r4, #20
 8004898:	46a9      	mov	r9, r5
 800489a:	f04f 0c00 	mov.w	ip, #0
 800489e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80048a2:	f8d9 3000 	ldr.w	r3, [r9]
 80048a6:	fa1f fb87 	uxth.w	fp, r7
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80048b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80048b4:	f8d9 7000 	ldr.w	r7, [r9]
 80048b8:	4463      	add	r3, ip
 80048ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80048be:	fb0a c70b 	mla	r7, sl, fp, ip
 80048c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80048cc:	4572      	cmp	r2, lr
 80048ce:	f849 3b04 	str.w	r3, [r9], #4
 80048d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80048d6:	d8e2      	bhi.n	800489e <__multiply+0xb2>
 80048d8:	9b01      	ldr	r3, [sp, #4]
 80048da:	f845 c003 	str.w	ip, [r5, r3]
 80048de:	9b03      	ldr	r3, [sp, #12]
 80048e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80048e4:	3104      	adds	r1, #4
 80048e6:	f1b9 0f00 	cmp.w	r9, #0
 80048ea:	d021      	beq.n	8004930 <__multiply+0x144>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	f104 0c14 	add.w	ip, r4, #20
 80048f2:	46ae      	mov	lr, r5
 80048f4:	f04f 0a00 	mov.w	sl, #0
 80048f8:	f8bc b000 	ldrh.w	fp, [ip]
 80048fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004900:	fb09 770b 	mla	r7, r9, fp, r7
 8004904:	4457      	add	r7, sl
 8004906:	b29b      	uxth	r3, r3
 8004908:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800490c:	f84e 3b04 	str.w	r3, [lr], #4
 8004910:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004914:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004918:	f8be 3000 	ldrh.w	r3, [lr]
 800491c:	fb09 330a 	mla	r3, r9, sl, r3
 8004920:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004924:	4562      	cmp	r2, ip
 8004926:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800492a:	d8e5      	bhi.n	80048f8 <__multiply+0x10c>
 800492c:	9f01      	ldr	r7, [sp, #4]
 800492e:	51eb      	str	r3, [r5, r7]
 8004930:	3504      	adds	r5, #4
 8004932:	e799      	b.n	8004868 <__multiply+0x7c>
 8004934:	3e01      	subs	r6, #1
 8004936:	e79b      	b.n	8004870 <__multiply+0x84>
 8004938:	080058e4 	.word	0x080058e4
 800493c:	080058f5 	.word	0x080058f5

08004940 <__pow5mult>:
 8004940:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004944:	4615      	mov	r5, r2
 8004946:	f012 0203 	ands.w	r2, r2, #3
 800494a:	4607      	mov	r7, r0
 800494c:	460e      	mov	r6, r1
 800494e:	d007      	beq.n	8004960 <__pow5mult+0x20>
 8004950:	4c25      	ldr	r4, [pc, #148]	@ (80049e8 <__pow5mult+0xa8>)
 8004952:	3a01      	subs	r2, #1
 8004954:	2300      	movs	r3, #0
 8004956:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800495a:	f7ff fe9f 	bl	800469c <__multadd>
 800495e:	4606      	mov	r6, r0
 8004960:	10ad      	asrs	r5, r5, #2
 8004962:	d03d      	beq.n	80049e0 <__pow5mult+0xa0>
 8004964:	69fc      	ldr	r4, [r7, #28]
 8004966:	b97c      	cbnz	r4, 8004988 <__pow5mult+0x48>
 8004968:	2010      	movs	r0, #16
 800496a:	f7ff fd7f 	bl	800446c <malloc>
 800496e:	4602      	mov	r2, r0
 8004970:	61f8      	str	r0, [r7, #28]
 8004972:	b928      	cbnz	r0, 8004980 <__pow5mult+0x40>
 8004974:	4b1d      	ldr	r3, [pc, #116]	@ (80049ec <__pow5mult+0xac>)
 8004976:	481e      	ldr	r0, [pc, #120]	@ (80049f0 <__pow5mult+0xb0>)
 8004978:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800497c:	f000 fbea 	bl	8005154 <__assert_func>
 8004980:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004984:	6004      	str	r4, [r0, #0]
 8004986:	60c4      	str	r4, [r0, #12]
 8004988:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800498c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004990:	b94c      	cbnz	r4, 80049a6 <__pow5mult+0x66>
 8004992:	f240 2171 	movw	r1, #625	@ 0x271
 8004996:	4638      	mov	r0, r7
 8004998:	f7ff ff12 	bl	80047c0 <__i2b>
 800499c:	2300      	movs	r3, #0
 800499e:	f8c8 0008 	str.w	r0, [r8, #8]
 80049a2:	4604      	mov	r4, r0
 80049a4:	6003      	str	r3, [r0, #0]
 80049a6:	f04f 0900 	mov.w	r9, #0
 80049aa:	07eb      	lsls	r3, r5, #31
 80049ac:	d50a      	bpl.n	80049c4 <__pow5mult+0x84>
 80049ae:	4631      	mov	r1, r6
 80049b0:	4622      	mov	r2, r4
 80049b2:	4638      	mov	r0, r7
 80049b4:	f7ff ff1a 	bl	80047ec <__multiply>
 80049b8:	4631      	mov	r1, r6
 80049ba:	4680      	mov	r8, r0
 80049bc:	4638      	mov	r0, r7
 80049be:	f7ff fe4b 	bl	8004658 <_Bfree>
 80049c2:	4646      	mov	r6, r8
 80049c4:	106d      	asrs	r5, r5, #1
 80049c6:	d00b      	beq.n	80049e0 <__pow5mult+0xa0>
 80049c8:	6820      	ldr	r0, [r4, #0]
 80049ca:	b938      	cbnz	r0, 80049dc <__pow5mult+0x9c>
 80049cc:	4622      	mov	r2, r4
 80049ce:	4621      	mov	r1, r4
 80049d0:	4638      	mov	r0, r7
 80049d2:	f7ff ff0b 	bl	80047ec <__multiply>
 80049d6:	6020      	str	r0, [r4, #0]
 80049d8:	f8c0 9000 	str.w	r9, [r0]
 80049dc:	4604      	mov	r4, r0
 80049de:	e7e4      	b.n	80049aa <__pow5mult+0x6a>
 80049e0:	4630      	mov	r0, r6
 80049e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049e6:	bf00      	nop
 80049e8:	08005950 	.word	0x08005950
 80049ec:	08005875 	.word	0x08005875
 80049f0:	080058f5 	.word	0x080058f5

080049f4 <__lshift>:
 80049f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f8:	460c      	mov	r4, r1
 80049fa:	6849      	ldr	r1, [r1, #4]
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004a02:	68a3      	ldr	r3, [r4, #8]
 8004a04:	4607      	mov	r7, r0
 8004a06:	4691      	mov	r9, r2
 8004a08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a0c:	f108 0601 	add.w	r6, r8, #1
 8004a10:	42b3      	cmp	r3, r6
 8004a12:	db0b      	blt.n	8004a2c <__lshift+0x38>
 8004a14:	4638      	mov	r0, r7
 8004a16:	f7ff fddf 	bl	80045d8 <_Balloc>
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	b948      	cbnz	r0, 8004a32 <__lshift+0x3e>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	4b28      	ldr	r3, [pc, #160]	@ (8004ac4 <__lshift+0xd0>)
 8004a22:	4829      	ldr	r0, [pc, #164]	@ (8004ac8 <__lshift+0xd4>)
 8004a24:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004a28:	f000 fb94 	bl	8005154 <__assert_func>
 8004a2c:	3101      	adds	r1, #1
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	e7ee      	b.n	8004a10 <__lshift+0x1c>
 8004a32:	2300      	movs	r3, #0
 8004a34:	f100 0114 	add.w	r1, r0, #20
 8004a38:	f100 0210 	add.w	r2, r0, #16
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	4553      	cmp	r3, sl
 8004a40:	db33      	blt.n	8004aaa <__lshift+0xb6>
 8004a42:	6920      	ldr	r0, [r4, #16]
 8004a44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004a48:	f104 0314 	add.w	r3, r4, #20
 8004a4c:	f019 091f 	ands.w	r9, r9, #31
 8004a50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004a54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004a58:	d02b      	beq.n	8004ab2 <__lshift+0xbe>
 8004a5a:	f1c9 0e20 	rsb	lr, r9, #32
 8004a5e:	468a      	mov	sl, r1
 8004a60:	2200      	movs	r2, #0
 8004a62:	6818      	ldr	r0, [r3, #0]
 8004a64:	fa00 f009 	lsl.w	r0, r0, r9
 8004a68:	4310      	orrs	r0, r2
 8004a6a:	f84a 0b04 	str.w	r0, [sl], #4
 8004a6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a72:	459c      	cmp	ip, r3
 8004a74:	fa22 f20e 	lsr.w	r2, r2, lr
 8004a78:	d8f3      	bhi.n	8004a62 <__lshift+0x6e>
 8004a7a:	ebac 0304 	sub.w	r3, ip, r4
 8004a7e:	3b15      	subs	r3, #21
 8004a80:	f023 0303 	bic.w	r3, r3, #3
 8004a84:	3304      	adds	r3, #4
 8004a86:	f104 0015 	add.w	r0, r4, #21
 8004a8a:	4584      	cmp	ip, r0
 8004a8c:	bf38      	it	cc
 8004a8e:	2304      	movcc	r3, #4
 8004a90:	50ca      	str	r2, [r1, r3]
 8004a92:	b10a      	cbz	r2, 8004a98 <__lshift+0xa4>
 8004a94:	f108 0602 	add.w	r6, r8, #2
 8004a98:	3e01      	subs	r6, #1
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	612e      	str	r6, [r5, #16]
 8004a9e:	4621      	mov	r1, r4
 8004aa0:	f7ff fdda 	bl	8004658 <_Bfree>
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aaa:	f842 0f04 	str.w	r0, [r2, #4]!
 8004aae:	3301      	adds	r3, #1
 8004ab0:	e7c5      	b.n	8004a3e <__lshift+0x4a>
 8004ab2:	3904      	subs	r1, #4
 8004ab4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ab8:	f841 2f04 	str.w	r2, [r1, #4]!
 8004abc:	459c      	cmp	ip, r3
 8004abe:	d8f9      	bhi.n	8004ab4 <__lshift+0xc0>
 8004ac0:	e7ea      	b.n	8004a98 <__lshift+0xa4>
 8004ac2:	bf00      	nop
 8004ac4:	080058e4 	.word	0x080058e4
 8004ac8:	080058f5 	.word	0x080058f5

08004acc <__mcmp>:
 8004acc:	690a      	ldr	r2, [r1, #16]
 8004ace:	4603      	mov	r3, r0
 8004ad0:	6900      	ldr	r0, [r0, #16]
 8004ad2:	1a80      	subs	r0, r0, r2
 8004ad4:	b530      	push	{r4, r5, lr}
 8004ad6:	d10e      	bne.n	8004af6 <__mcmp+0x2a>
 8004ad8:	3314      	adds	r3, #20
 8004ada:	3114      	adds	r1, #20
 8004adc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004ae0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004ae4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ae8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004aec:	4295      	cmp	r5, r2
 8004aee:	d003      	beq.n	8004af8 <__mcmp+0x2c>
 8004af0:	d205      	bcs.n	8004afe <__mcmp+0x32>
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	bd30      	pop	{r4, r5, pc}
 8004af8:	42a3      	cmp	r3, r4
 8004afa:	d3f3      	bcc.n	8004ae4 <__mcmp+0x18>
 8004afc:	e7fb      	b.n	8004af6 <__mcmp+0x2a>
 8004afe:	2001      	movs	r0, #1
 8004b00:	e7f9      	b.n	8004af6 <__mcmp+0x2a>
	...

08004b04 <__mdiff>:
 8004b04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b08:	4689      	mov	r9, r1
 8004b0a:	4606      	mov	r6, r0
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4648      	mov	r0, r9
 8004b10:	4614      	mov	r4, r2
 8004b12:	f7ff ffdb 	bl	8004acc <__mcmp>
 8004b16:	1e05      	subs	r5, r0, #0
 8004b18:	d112      	bne.n	8004b40 <__mdiff+0x3c>
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7ff fd5b 	bl	80045d8 <_Balloc>
 8004b22:	4602      	mov	r2, r0
 8004b24:	b928      	cbnz	r0, 8004b32 <__mdiff+0x2e>
 8004b26:	4b3f      	ldr	r3, [pc, #252]	@ (8004c24 <__mdiff+0x120>)
 8004b28:	f240 2137 	movw	r1, #567	@ 0x237
 8004b2c:	483e      	ldr	r0, [pc, #248]	@ (8004c28 <__mdiff+0x124>)
 8004b2e:	f000 fb11 	bl	8005154 <__assert_func>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004b38:	4610      	mov	r0, r2
 8004b3a:	b003      	add	sp, #12
 8004b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b40:	bfbc      	itt	lt
 8004b42:	464b      	movlt	r3, r9
 8004b44:	46a1      	movlt	r9, r4
 8004b46:	4630      	mov	r0, r6
 8004b48:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004b4c:	bfba      	itte	lt
 8004b4e:	461c      	movlt	r4, r3
 8004b50:	2501      	movlt	r5, #1
 8004b52:	2500      	movge	r5, #0
 8004b54:	f7ff fd40 	bl	80045d8 <_Balloc>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	b918      	cbnz	r0, 8004b64 <__mdiff+0x60>
 8004b5c:	4b31      	ldr	r3, [pc, #196]	@ (8004c24 <__mdiff+0x120>)
 8004b5e:	f240 2145 	movw	r1, #581	@ 0x245
 8004b62:	e7e3      	b.n	8004b2c <__mdiff+0x28>
 8004b64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004b68:	6926      	ldr	r6, [r4, #16]
 8004b6a:	60c5      	str	r5, [r0, #12]
 8004b6c:	f109 0310 	add.w	r3, r9, #16
 8004b70:	f109 0514 	add.w	r5, r9, #20
 8004b74:	f104 0e14 	add.w	lr, r4, #20
 8004b78:	f100 0b14 	add.w	fp, r0, #20
 8004b7c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004b80:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004b84:	9301      	str	r3, [sp, #4]
 8004b86:	46d9      	mov	r9, fp
 8004b88:	f04f 0c00 	mov.w	ip, #0
 8004b8c:	9b01      	ldr	r3, [sp, #4]
 8004b8e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004b92:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004b96:	9301      	str	r3, [sp, #4]
 8004b98:	fa1f f38a 	uxth.w	r3, sl
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	b283      	uxth	r3, r0
 8004ba0:	1acb      	subs	r3, r1, r3
 8004ba2:	0c00      	lsrs	r0, r0, #16
 8004ba4:	4463      	add	r3, ip
 8004ba6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8004baa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004bb4:	4576      	cmp	r6, lr
 8004bb6:	f849 3b04 	str.w	r3, [r9], #4
 8004bba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004bbe:	d8e5      	bhi.n	8004b8c <__mdiff+0x88>
 8004bc0:	1b33      	subs	r3, r6, r4
 8004bc2:	3b15      	subs	r3, #21
 8004bc4:	f023 0303 	bic.w	r3, r3, #3
 8004bc8:	3415      	adds	r4, #21
 8004bca:	3304      	adds	r3, #4
 8004bcc:	42a6      	cmp	r6, r4
 8004bce:	bf38      	it	cc
 8004bd0:	2304      	movcc	r3, #4
 8004bd2:	441d      	add	r5, r3
 8004bd4:	445b      	add	r3, fp
 8004bd6:	461e      	mov	r6, r3
 8004bd8:	462c      	mov	r4, r5
 8004bda:	4544      	cmp	r4, r8
 8004bdc:	d30e      	bcc.n	8004bfc <__mdiff+0xf8>
 8004bde:	f108 0103 	add.w	r1, r8, #3
 8004be2:	1b49      	subs	r1, r1, r5
 8004be4:	f021 0103 	bic.w	r1, r1, #3
 8004be8:	3d03      	subs	r5, #3
 8004bea:	45a8      	cmp	r8, r5
 8004bec:	bf38      	it	cc
 8004bee:	2100      	movcc	r1, #0
 8004bf0:	440b      	add	r3, r1
 8004bf2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004bf6:	b191      	cbz	r1, 8004c1e <__mdiff+0x11a>
 8004bf8:	6117      	str	r7, [r2, #16]
 8004bfa:	e79d      	b.n	8004b38 <__mdiff+0x34>
 8004bfc:	f854 1b04 	ldr.w	r1, [r4], #4
 8004c00:	46e6      	mov	lr, ip
 8004c02:	0c08      	lsrs	r0, r1, #16
 8004c04:	fa1c fc81 	uxtah	ip, ip, r1
 8004c08:	4471      	add	r1, lr
 8004c0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8004c0e:	b289      	uxth	r1, r1
 8004c10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004c14:	f846 1b04 	str.w	r1, [r6], #4
 8004c18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8004c1c:	e7dd      	b.n	8004bda <__mdiff+0xd6>
 8004c1e:	3f01      	subs	r7, #1
 8004c20:	e7e7      	b.n	8004bf2 <__mdiff+0xee>
 8004c22:	bf00      	nop
 8004c24:	080058e4 	.word	0x080058e4
 8004c28:	080058f5 	.word	0x080058f5

08004c2c <__d2b>:
 8004c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c30:	460f      	mov	r7, r1
 8004c32:	2101      	movs	r1, #1
 8004c34:	ec59 8b10 	vmov	r8, r9, d0
 8004c38:	4616      	mov	r6, r2
 8004c3a:	f7ff fccd 	bl	80045d8 <_Balloc>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	b930      	cbnz	r0, 8004c50 <__d2b+0x24>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b23      	ldr	r3, [pc, #140]	@ (8004cd4 <__d2b+0xa8>)
 8004c46:	4824      	ldr	r0, [pc, #144]	@ (8004cd8 <__d2b+0xac>)
 8004c48:	f240 310f 	movw	r1, #783	@ 0x30f
 8004c4c:	f000 fa82 	bl	8005154 <__assert_func>
 8004c50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004c54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004c58:	b10d      	cbz	r5, 8004c5e <__d2b+0x32>
 8004c5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c5e:	9301      	str	r3, [sp, #4]
 8004c60:	f1b8 0300 	subs.w	r3, r8, #0
 8004c64:	d023      	beq.n	8004cae <__d2b+0x82>
 8004c66:	4668      	mov	r0, sp
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	f7ff fd7c 	bl	8004766 <__lo0bits>
 8004c6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8004c72:	b1d0      	cbz	r0, 8004caa <__d2b+0x7e>
 8004c74:	f1c0 0320 	rsb	r3, r0, #32
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	430b      	orrs	r3, r1
 8004c7e:	40c2      	lsrs	r2, r0
 8004c80:	6163      	str	r3, [r4, #20]
 8004c82:	9201      	str	r2, [sp, #4]
 8004c84:	9b01      	ldr	r3, [sp, #4]
 8004c86:	61a3      	str	r3, [r4, #24]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	bf0c      	ite	eq
 8004c8c:	2201      	moveq	r2, #1
 8004c8e:	2202      	movne	r2, #2
 8004c90:	6122      	str	r2, [r4, #16]
 8004c92:	b1a5      	cbz	r5, 8004cbe <__d2b+0x92>
 8004c94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004c98:	4405      	add	r5, r0
 8004c9a:	603d      	str	r5, [r7, #0]
 8004c9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004ca0:	6030      	str	r0, [r6, #0]
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	b003      	add	sp, #12
 8004ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004caa:	6161      	str	r1, [r4, #20]
 8004cac:	e7ea      	b.n	8004c84 <__d2b+0x58>
 8004cae:	a801      	add	r0, sp, #4
 8004cb0:	f7ff fd59 	bl	8004766 <__lo0bits>
 8004cb4:	9b01      	ldr	r3, [sp, #4]
 8004cb6:	6163      	str	r3, [r4, #20]
 8004cb8:	3020      	adds	r0, #32
 8004cba:	2201      	movs	r2, #1
 8004cbc:	e7e8      	b.n	8004c90 <__d2b+0x64>
 8004cbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004cc2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004cc6:	6038      	str	r0, [r7, #0]
 8004cc8:	6918      	ldr	r0, [r3, #16]
 8004cca:	f7ff fd2d 	bl	8004728 <__hi0bits>
 8004cce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004cd2:	e7e5      	b.n	8004ca0 <__d2b+0x74>
 8004cd4:	080058e4 	.word	0x080058e4
 8004cd8:	080058f5 	.word	0x080058f5

08004cdc <__ssputs_r>:
 8004cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce0:	688e      	ldr	r6, [r1, #8]
 8004ce2:	461f      	mov	r7, r3
 8004ce4:	42be      	cmp	r6, r7
 8004ce6:	680b      	ldr	r3, [r1, #0]
 8004ce8:	4682      	mov	sl, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	4690      	mov	r8, r2
 8004cee:	d82d      	bhi.n	8004d4c <__ssputs_r+0x70>
 8004cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004cf8:	d026      	beq.n	8004d48 <__ssputs_r+0x6c>
 8004cfa:	6965      	ldr	r5, [r4, #20]
 8004cfc:	6909      	ldr	r1, [r1, #16]
 8004cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d02:	eba3 0901 	sub.w	r9, r3, r1
 8004d06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d0a:	1c7b      	adds	r3, r7, #1
 8004d0c:	444b      	add	r3, r9
 8004d0e:	106d      	asrs	r5, r5, #1
 8004d10:	429d      	cmp	r5, r3
 8004d12:	bf38      	it	cc
 8004d14:	461d      	movcc	r5, r3
 8004d16:	0553      	lsls	r3, r2, #21
 8004d18:	d527      	bpl.n	8004d6a <__ssputs_r+0x8e>
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f7ff fbd0 	bl	80044c0 <_malloc_r>
 8004d20:	4606      	mov	r6, r0
 8004d22:	b360      	cbz	r0, 8004d7e <__ssputs_r+0xa2>
 8004d24:	6921      	ldr	r1, [r4, #16]
 8004d26:	464a      	mov	r2, r9
 8004d28:	f000 fa06 	bl	8005138 <memcpy>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d36:	81a3      	strh	r3, [r4, #12]
 8004d38:	6126      	str	r6, [r4, #16]
 8004d3a:	6165      	str	r5, [r4, #20]
 8004d3c:	444e      	add	r6, r9
 8004d3e:	eba5 0509 	sub.w	r5, r5, r9
 8004d42:	6026      	str	r6, [r4, #0]
 8004d44:	60a5      	str	r5, [r4, #8]
 8004d46:	463e      	mov	r6, r7
 8004d48:	42be      	cmp	r6, r7
 8004d4a:	d900      	bls.n	8004d4e <__ssputs_r+0x72>
 8004d4c:	463e      	mov	r6, r7
 8004d4e:	6820      	ldr	r0, [r4, #0]
 8004d50:	4632      	mov	r2, r6
 8004d52:	4641      	mov	r1, r8
 8004d54:	f000 f9c6 	bl	80050e4 <memmove>
 8004d58:	68a3      	ldr	r3, [r4, #8]
 8004d5a:	1b9b      	subs	r3, r3, r6
 8004d5c:	60a3      	str	r3, [r4, #8]
 8004d5e:	6823      	ldr	r3, [r4, #0]
 8004d60:	4433      	add	r3, r6
 8004d62:	6023      	str	r3, [r4, #0]
 8004d64:	2000      	movs	r0, #0
 8004d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6a:	462a      	mov	r2, r5
 8004d6c:	f000 fa36 	bl	80051dc <_realloc_r>
 8004d70:	4606      	mov	r6, r0
 8004d72:	2800      	cmp	r0, #0
 8004d74:	d1e0      	bne.n	8004d38 <__ssputs_r+0x5c>
 8004d76:	6921      	ldr	r1, [r4, #16]
 8004d78:	4650      	mov	r0, sl
 8004d7a:	f7ff fb2d 	bl	80043d8 <_free_r>
 8004d7e:	230c      	movs	r3, #12
 8004d80:	f8ca 3000 	str.w	r3, [sl]
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d8a:	81a3      	strh	r3, [r4, #12]
 8004d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d90:	e7e9      	b.n	8004d66 <__ssputs_r+0x8a>
	...

08004d94 <_svfiprintf_r>:
 8004d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d98:	4698      	mov	r8, r3
 8004d9a:	898b      	ldrh	r3, [r1, #12]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	b09d      	sub	sp, #116	@ 0x74
 8004da0:	4607      	mov	r7, r0
 8004da2:	460d      	mov	r5, r1
 8004da4:	4614      	mov	r4, r2
 8004da6:	d510      	bpl.n	8004dca <_svfiprintf_r+0x36>
 8004da8:	690b      	ldr	r3, [r1, #16]
 8004daa:	b973      	cbnz	r3, 8004dca <_svfiprintf_r+0x36>
 8004dac:	2140      	movs	r1, #64	@ 0x40
 8004dae:	f7ff fb87 	bl	80044c0 <_malloc_r>
 8004db2:	6028      	str	r0, [r5, #0]
 8004db4:	6128      	str	r0, [r5, #16]
 8004db6:	b930      	cbnz	r0, 8004dc6 <_svfiprintf_r+0x32>
 8004db8:	230c      	movs	r3, #12
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc0:	b01d      	add	sp, #116	@ 0x74
 8004dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc6:	2340      	movs	r3, #64	@ 0x40
 8004dc8:	616b      	str	r3, [r5, #20]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dce:	2320      	movs	r3, #32
 8004dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd8:	2330      	movs	r3, #48	@ 0x30
 8004dda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004f78 <_svfiprintf_r+0x1e4>
 8004dde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004de2:	f04f 0901 	mov.w	r9, #1
 8004de6:	4623      	mov	r3, r4
 8004de8:	469a      	mov	sl, r3
 8004dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dee:	b10a      	cbz	r2, 8004df4 <_svfiprintf_r+0x60>
 8004df0:	2a25      	cmp	r2, #37	@ 0x25
 8004df2:	d1f9      	bne.n	8004de8 <_svfiprintf_r+0x54>
 8004df4:	ebba 0b04 	subs.w	fp, sl, r4
 8004df8:	d00b      	beq.n	8004e12 <_svfiprintf_r+0x7e>
 8004dfa:	465b      	mov	r3, fp
 8004dfc:	4622      	mov	r2, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4638      	mov	r0, r7
 8004e02:	f7ff ff6b 	bl	8004cdc <__ssputs_r>
 8004e06:	3001      	adds	r0, #1
 8004e08:	f000 80a7 	beq.w	8004f5a <_svfiprintf_r+0x1c6>
 8004e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e0e:	445a      	add	r2, fp
 8004e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e12:	f89a 3000 	ldrb.w	r3, [sl]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 809f 	beq.w	8004f5a <_svfiprintf_r+0x1c6>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e26:	f10a 0a01 	add.w	sl, sl, #1
 8004e2a:	9304      	str	r3, [sp, #16]
 8004e2c:	9307      	str	r3, [sp, #28]
 8004e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e34:	4654      	mov	r4, sl
 8004e36:	2205      	movs	r2, #5
 8004e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e3c:	484e      	ldr	r0, [pc, #312]	@ (8004f78 <_svfiprintf_r+0x1e4>)
 8004e3e:	f7fb f9cf 	bl	80001e0 <memchr>
 8004e42:	9a04      	ldr	r2, [sp, #16]
 8004e44:	b9d8      	cbnz	r0, 8004e7e <_svfiprintf_r+0xea>
 8004e46:	06d0      	lsls	r0, r2, #27
 8004e48:	bf44      	itt	mi
 8004e4a:	2320      	movmi	r3, #32
 8004e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e50:	0711      	lsls	r1, r2, #28
 8004e52:	bf44      	itt	mi
 8004e54:	232b      	movmi	r3, #43	@ 0x2b
 8004e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8004e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e60:	d015      	beq.n	8004e8e <_svfiprintf_r+0xfa>
 8004e62:	9a07      	ldr	r2, [sp, #28]
 8004e64:	4654      	mov	r4, sl
 8004e66:	2000      	movs	r0, #0
 8004e68:	f04f 0c0a 	mov.w	ip, #10
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e72:	3b30      	subs	r3, #48	@ 0x30
 8004e74:	2b09      	cmp	r3, #9
 8004e76:	d94b      	bls.n	8004f10 <_svfiprintf_r+0x17c>
 8004e78:	b1b0      	cbz	r0, 8004ea8 <_svfiprintf_r+0x114>
 8004e7a:	9207      	str	r2, [sp, #28]
 8004e7c:	e014      	b.n	8004ea8 <_svfiprintf_r+0x114>
 8004e7e:	eba0 0308 	sub.w	r3, r0, r8
 8004e82:	fa09 f303 	lsl.w	r3, r9, r3
 8004e86:	4313      	orrs	r3, r2
 8004e88:	9304      	str	r3, [sp, #16]
 8004e8a:	46a2      	mov	sl, r4
 8004e8c:	e7d2      	b.n	8004e34 <_svfiprintf_r+0xa0>
 8004e8e:	9b03      	ldr	r3, [sp, #12]
 8004e90:	1d19      	adds	r1, r3, #4
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	9103      	str	r1, [sp, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	bfbb      	ittet	lt
 8004e9a:	425b      	neglt	r3, r3
 8004e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8004ea0:	9307      	strge	r3, [sp, #28]
 8004ea2:	9307      	strlt	r3, [sp, #28]
 8004ea4:	bfb8      	it	lt
 8004ea6:	9204      	strlt	r2, [sp, #16]
 8004ea8:	7823      	ldrb	r3, [r4, #0]
 8004eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eac:	d10a      	bne.n	8004ec4 <_svfiprintf_r+0x130>
 8004eae:	7863      	ldrb	r3, [r4, #1]
 8004eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb2:	d132      	bne.n	8004f1a <_svfiprintf_r+0x186>
 8004eb4:	9b03      	ldr	r3, [sp, #12]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	9203      	str	r2, [sp, #12]
 8004ebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ec0:	3402      	adds	r4, #2
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004f88 <_svfiprintf_r+0x1f4>
 8004ec8:	7821      	ldrb	r1, [r4, #0]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	4650      	mov	r0, sl
 8004ece:	f7fb f987 	bl	80001e0 <memchr>
 8004ed2:	b138      	cbz	r0, 8004ee4 <_svfiprintf_r+0x150>
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	eba0 000a 	sub.w	r0, r0, sl
 8004eda:	2240      	movs	r2, #64	@ 0x40
 8004edc:	4082      	lsls	r2, r0
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	3401      	adds	r4, #1
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee8:	4824      	ldr	r0, [pc, #144]	@ (8004f7c <_svfiprintf_r+0x1e8>)
 8004eea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004eee:	2206      	movs	r2, #6
 8004ef0:	f7fb f976 	bl	80001e0 <memchr>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d036      	beq.n	8004f66 <_svfiprintf_r+0x1d2>
 8004ef8:	4b21      	ldr	r3, [pc, #132]	@ (8004f80 <_svfiprintf_r+0x1ec>)
 8004efa:	bb1b      	cbnz	r3, 8004f44 <_svfiprintf_r+0x1b0>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	3307      	adds	r3, #7
 8004f00:	f023 0307 	bic.w	r3, r3, #7
 8004f04:	3308      	adds	r3, #8
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f0a:	4433      	add	r3, r6
 8004f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f0e:	e76a      	b.n	8004de6 <_svfiprintf_r+0x52>
 8004f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f14:	460c      	mov	r4, r1
 8004f16:	2001      	movs	r0, #1
 8004f18:	e7a8      	b.n	8004e6c <_svfiprintf_r+0xd8>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	3401      	adds	r4, #1
 8004f1e:	9305      	str	r3, [sp, #20]
 8004f20:	4619      	mov	r1, r3
 8004f22:	f04f 0c0a 	mov.w	ip, #10
 8004f26:	4620      	mov	r0, r4
 8004f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2c:	3a30      	subs	r2, #48	@ 0x30
 8004f2e:	2a09      	cmp	r2, #9
 8004f30:	d903      	bls.n	8004f3a <_svfiprintf_r+0x1a6>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0c6      	beq.n	8004ec4 <_svfiprintf_r+0x130>
 8004f36:	9105      	str	r1, [sp, #20]
 8004f38:	e7c4      	b.n	8004ec4 <_svfiprintf_r+0x130>
 8004f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f3e:	4604      	mov	r4, r0
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7f0      	b.n	8004f26 <_svfiprintf_r+0x192>
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f84 <_svfiprintf_r+0x1f0>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f7fd fe98 	bl	8002c84 <_printf_float>
 8004f54:	1c42      	adds	r2, r0, #1
 8004f56:	4606      	mov	r6, r0
 8004f58:	d1d6      	bne.n	8004f08 <_svfiprintf_r+0x174>
 8004f5a:	89ab      	ldrh	r3, [r5, #12]
 8004f5c:	065b      	lsls	r3, r3, #25
 8004f5e:	f53f af2d 	bmi.w	8004dbc <_svfiprintf_r+0x28>
 8004f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f64:	e72c      	b.n	8004dc0 <_svfiprintf_r+0x2c>
 8004f66:	ab03      	add	r3, sp, #12
 8004f68:	9300      	str	r3, [sp, #0]
 8004f6a:	462a      	mov	r2, r5
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <_svfiprintf_r+0x1f0>)
 8004f6e:	a904      	add	r1, sp, #16
 8004f70:	4638      	mov	r0, r7
 8004f72:	f7fe f91f 	bl	80031b4 <_printf_i>
 8004f76:	e7ed      	b.n	8004f54 <_svfiprintf_r+0x1c0>
 8004f78:	08005a50 	.word	0x08005a50
 8004f7c:	08005a5a 	.word	0x08005a5a
 8004f80:	08002c85 	.word	0x08002c85
 8004f84:	08004cdd 	.word	0x08004cdd
 8004f88:	08005a56 	.word	0x08005a56

08004f8c <__sflush_r>:
 8004f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	0716      	lsls	r6, r2, #28
 8004f96:	4605      	mov	r5, r0
 8004f98:	460c      	mov	r4, r1
 8004f9a:	d454      	bmi.n	8005046 <__sflush_r+0xba>
 8004f9c:	684b      	ldr	r3, [r1, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	dc02      	bgt.n	8004fa8 <__sflush_r+0x1c>
 8004fa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dd48      	ble.n	800503a <__sflush_r+0xae>
 8004fa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004faa:	2e00      	cmp	r6, #0
 8004fac:	d045      	beq.n	800503a <__sflush_r+0xae>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004fb4:	682f      	ldr	r7, [r5, #0]
 8004fb6:	6a21      	ldr	r1, [r4, #32]
 8004fb8:	602b      	str	r3, [r5, #0]
 8004fba:	d030      	beq.n	800501e <__sflush_r+0x92>
 8004fbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fbe:	89a3      	ldrh	r3, [r4, #12]
 8004fc0:	0759      	lsls	r1, r3, #29
 8004fc2:	d505      	bpl.n	8004fd0 <__sflush_r+0x44>
 8004fc4:	6863      	ldr	r3, [r4, #4]
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fca:	b10b      	cbz	r3, 8004fd0 <__sflush_r+0x44>
 8004fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fce:	1ad2      	subs	r2, r2, r3
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fd4:	6a21      	ldr	r1, [r4, #32]
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	47b0      	blx	r6
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	89a3      	ldrh	r3, [r4, #12]
 8004fde:	d106      	bne.n	8004fee <__sflush_r+0x62>
 8004fe0:	6829      	ldr	r1, [r5, #0]
 8004fe2:	291d      	cmp	r1, #29
 8004fe4:	d82b      	bhi.n	800503e <__sflush_r+0xb2>
 8004fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8005090 <__sflush_r+0x104>)
 8004fe8:	410a      	asrs	r2, r1
 8004fea:	07d6      	lsls	r6, r2, #31
 8004fec:	d427      	bmi.n	800503e <__sflush_r+0xb2>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	6062      	str	r2, [r4, #4]
 8004ff2:	04d9      	lsls	r1, r3, #19
 8004ff4:	6922      	ldr	r2, [r4, #16]
 8004ff6:	6022      	str	r2, [r4, #0]
 8004ff8:	d504      	bpl.n	8005004 <__sflush_r+0x78>
 8004ffa:	1c42      	adds	r2, r0, #1
 8004ffc:	d101      	bne.n	8005002 <__sflush_r+0x76>
 8004ffe:	682b      	ldr	r3, [r5, #0]
 8005000:	b903      	cbnz	r3, 8005004 <__sflush_r+0x78>
 8005002:	6560      	str	r0, [r4, #84]	@ 0x54
 8005004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005006:	602f      	str	r7, [r5, #0]
 8005008:	b1b9      	cbz	r1, 800503a <__sflush_r+0xae>
 800500a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800500e:	4299      	cmp	r1, r3
 8005010:	d002      	beq.n	8005018 <__sflush_r+0x8c>
 8005012:	4628      	mov	r0, r5
 8005014:	f7ff f9e0 	bl	80043d8 <_free_r>
 8005018:	2300      	movs	r3, #0
 800501a:	6363      	str	r3, [r4, #52]	@ 0x34
 800501c:	e00d      	b.n	800503a <__sflush_r+0xae>
 800501e:	2301      	movs	r3, #1
 8005020:	4628      	mov	r0, r5
 8005022:	47b0      	blx	r6
 8005024:	4602      	mov	r2, r0
 8005026:	1c50      	adds	r0, r2, #1
 8005028:	d1c9      	bne.n	8004fbe <__sflush_r+0x32>
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0c6      	beq.n	8004fbe <__sflush_r+0x32>
 8005030:	2b1d      	cmp	r3, #29
 8005032:	d001      	beq.n	8005038 <__sflush_r+0xac>
 8005034:	2b16      	cmp	r3, #22
 8005036:	d11e      	bne.n	8005076 <__sflush_r+0xea>
 8005038:	602f      	str	r7, [r5, #0]
 800503a:	2000      	movs	r0, #0
 800503c:	e022      	b.n	8005084 <__sflush_r+0xf8>
 800503e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005042:	b21b      	sxth	r3, r3
 8005044:	e01b      	b.n	800507e <__sflush_r+0xf2>
 8005046:	690f      	ldr	r7, [r1, #16]
 8005048:	2f00      	cmp	r7, #0
 800504a:	d0f6      	beq.n	800503a <__sflush_r+0xae>
 800504c:	0793      	lsls	r3, r2, #30
 800504e:	680e      	ldr	r6, [r1, #0]
 8005050:	bf08      	it	eq
 8005052:	694b      	ldreq	r3, [r1, #20]
 8005054:	600f      	str	r7, [r1, #0]
 8005056:	bf18      	it	ne
 8005058:	2300      	movne	r3, #0
 800505a:	eba6 0807 	sub.w	r8, r6, r7
 800505e:	608b      	str	r3, [r1, #8]
 8005060:	f1b8 0f00 	cmp.w	r8, #0
 8005064:	dde9      	ble.n	800503a <__sflush_r+0xae>
 8005066:	6a21      	ldr	r1, [r4, #32]
 8005068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800506a:	4643      	mov	r3, r8
 800506c:	463a      	mov	r2, r7
 800506e:	4628      	mov	r0, r5
 8005070:	47b0      	blx	r6
 8005072:	2800      	cmp	r0, #0
 8005074:	dc08      	bgt.n	8005088 <__sflush_r+0xfc>
 8005076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800507a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800507e:	81a3      	strh	r3, [r4, #12]
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005088:	4407      	add	r7, r0
 800508a:	eba8 0800 	sub.w	r8, r8, r0
 800508e:	e7e7      	b.n	8005060 <__sflush_r+0xd4>
 8005090:	dfbffffe 	.word	0xdfbffffe

08005094 <_fflush_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	690b      	ldr	r3, [r1, #16]
 8005098:	4605      	mov	r5, r0
 800509a:	460c      	mov	r4, r1
 800509c:	b913      	cbnz	r3, 80050a4 <_fflush_r+0x10>
 800509e:	2500      	movs	r5, #0
 80050a0:	4628      	mov	r0, r5
 80050a2:	bd38      	pop	{r3, r4, r5, pc}
 80050a4:	b118      	cbz	r0, 80050ae <_fflush_r+0x1a>
 80050a6:	6a03      	ldr	r3, [r0, #32]
 80050a8:	b90b      	cbnz	r3, 80050ae <_fflush_r+0x1a>
 80050aa:	f7fe fa2f 	bl	800350c <__sinit>
 80050ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d0f3      	beq.n	800509e <_fflush_r+0xa>
 80050b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050b8:	07d0      	lsls	r0, r2, #31
 80050ba:	d404      	bmi.n	80050c6 <_fflush_r+0x32>
 80050bc:	0599      	lsls	r1, r3, #22
 80050be:	d402      	bmi.n	80050c6 <_fflush_r+0x32>
 80050c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050c2:	f7fe fb3a 	bl	800373a <__retarget_lock_acquire_recursive>
 80050c6:	4628      	mov	r0, r5
 80050c8:	4621      	mov	r1, r4
 80050ca:	f7ff ff5f 	bl	8004f8c <__sflush_r>
 80050ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050d0:	07da      	lsls	r2, r3, #31
 80050d2:	4605      	mov	r5, r0
 80050d4:	d4e4      	bmi.n	80050a0 <_fflush_r+0xc>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	059b      	lsls	r3, r3, #22
 80050da:	d4e1      	bmi.n	80050a0 <_fflush_r+0xc>
 80050dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050de:	f7fe fb2d 	bl	800373c <__retarget_lock_release_recursive>
 80050e2:	e7dd      	b.n	80050a0 <_fflush_r+0xc>

080050e4 <memmove>:
 80050e4:	4288      	cmp	r0, r1
 80050e6:	b510      	push	{r4, lr}
 80050e8:	eb01 0402 	add.w	r4, r1, r2
 80050ec:	d902      	bls.n	80050f4 <memmove+0x10>
 80050ee:	4284      	cmp	r4, r0
 80050f0:	4623      	mov	r3, r4
 80050f2:	d807      	bhi.n	8005104 <memmove+0x20>
 80050f4:	1e43      	subs	r3, r0, #1
 80050f6:	42a1      	cmp	r1, r4
 80050f8:	d008      	beq.n	800510c <memmove+0x28>
 80050fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005102:	e7f8      	b.n	80050f6 <memmove+0x12>
 8005104:	4402      	add	r2, r0
 8005106:	4601      	mov	r1, r0
 8005108:	428a      	cmp	r2, r1
 800510a:	d100      	bne.n	800510e <memmove+0x2a>
 800510c:	bd10      	pop	{r4, pc}
 800510e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005116:	e7f7      	b.n	8005108 <memmove+0x24>

08005118 <_sbrk_r>:
 8005118:	b538      	push	{r3, r4, r5, lr}
 800511a:	4d06      	ldr	r5, [pc, #24]	@ (8005134 <_sbrk_r+0x1c>)
 800511c:	2300      	movs	r3, #0
 800511e:	4604      	mov	r4, r0
 8005120:	4608      	mov	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fc f938 	bl	8001398 <_sbrk>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d102      	bne.n	8005132 <_sbrk_r+0x1a>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	b103      	cbz	r3, 8005132 <_sbrk_r+0x1a>
 8005130:	6023      	str	r3, [r4, #0]
 8005132:	bd38      	pop	{r3, r4, r5, pc}
 8005134:	2000037c 	.word	0x2000037c

08005138 <memcpy>:
 8005138:	440a      	add	r2, r1
 800513a:	4291      	cmp	r1, r2
 800513c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005140:	d100      	bne.n	8005144 <memcpy+0xc>
 8005142:	4770      	bx	lr
 8005144:	b510      	push	{r4, lr}
 8005146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800514a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800514e:	4291      	cmp	r1, r2
 8005150:	d1f9      	bne.n	8005146 <memcpy+0xe>
 8005152:	bd10      	pop	{r4, pc}

08005154 <__assert_func>:
 8005154:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005156:	4614      	mov	r4, r2
 8005158:	461a      	mov	r2, r3
 800515a:	4b09      	ldr	r3, [pc, #36]	@ (8005180 <__assert_func+0x2c>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4605      	mov	r5, r0
 8005160:	68d8      	ldr	r0, [r3, #12]
 8005162:	b954      	cbnz	r4, 800517a <__assert_func+0x26>
 8005164:	4b07      	ldr	r3, [pc, #28]	@ (8005184 <__assert_func+0x30>)
 8005166:	461c      	mov	r4, r3
 8005168:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800516c:	9100      	str	r1, [sp, #0]
 800516e:	462b      	mov	r3, r5
 8005170:	4905      	ldr	r1, [pc, #20]	@ (8005188 <__assert_func+0x34>)
 8005172:	f000 f86f 	bl	8005254 <fiprintf>
 8005176:	f000 f87f 	bl	8005278 <abort>
 800517a:	4b04      	ldr	r3, [pc, #16]	@ (800518c <__assert_func+0x38>)
 800517c:	e7f4      	b.n	8005168 <__assert_func+0x14>
 800517e:	bf00      	nop
 8005180:	20000018 	.word	0x20000018
 8005184:	08005aa6 	.word	0x08005aa6
 8005188:	08005a78 	.word	0x08005a78
 800518c:	08005a6b 	.word	0x08005a6b

08005190 <_calloc_r>:
 8005190:	b570      	push	{r4, r5, r6, lr}
 8005192:	fba1 5402 	umull	r5, r4, r1, r2
 8005196:	b93c      	cbnz	r4, 80051a8 <_calloc_r+0x18>
 8005198:	4629      	mov	r1, r5
 800519a:	f7ff f991 	bl	80044c0 <_malloc_r>
 800519e:	4606      	mov	r6, r0
 80051a0:	b928      	cbnz	r0, 80051ae <_calloc_r+0x1e>
 80051a2:	2600      	movs	r6, #0
 80051a4:	4630      	mov	r0, r6
 80051a6:	bd70      	pop	{r4, r5, r6, pc}
 80051a8:	220c      	movs	r2, #12
 80051aa:	6002      	str	r2, [r0, #0]
 80051ac:	e7f9      	b.n	80051a2 <_calloc_r+0x12>
 80051ae:	462a      	mov	r2, r5
 80051b0:	4621      	mov	r1, r4
 80051b2:	f7fe fa44 	bl	800363e <memset>
 80051b6:	e7f5      	b.n	80051a4 <_calloc_r+0x14>

080051b8 <__ascii_mbtowc>:
 80051b8:	b082      	sub	sp, #8
 80051ba:	b901      	cbnz	r1, 80051be <__ascii_mbtowc+0x6>
 80051bc:	a901      	add	r1, sp, #4
 80051be:	b142      	cbz	r2, 80051d2 <__ascii_mbtowc+0x1a>
 80051c0:	b14b      	cbz	r3, 80051d6 <__ascii_mbtowc+0x1e>
 80051c2:	7813      	ldrb	r3, [r2, #0]
 80051c4:	600b      	str	r3, [r1, #0]
 80051c6:	7812      	ldrb	r2, [r2, #0]
 80051c8:	1e10      	subs	r0, r2, #0
 80051ca:	bf18      	it	ne
 80051cc:	2001      	movne	r0, #1
 80051ce:	b002      	add	sp, #8
 80051d0:	4770      	bx	lr
 80051d2:	4610      	mov	r0, r2
 80051d4:	e7fb      	b.n	80051ce <__ascii_mbtowc+0x16>
 80051d6:	f06f 0001 	mvn.w	r0, #1
 80051da:	e7f8      	b.n	80051ce <__ascii_mbtowc+0x16>

080051dc <_realloc_r>:
 80051dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e0:	4680      	mov	r8, r0
 80051e2:	4615      	mov	r5, r2
 80051e4:	460c      	mov	r4, r1
 80051e6:	b921      	cbnz	r1, 80051f2 <_realloc_r+0x16>
 80051e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	4611      	mov	r1, r2
 80051ee:	f7ff b967 	b.w	80044c0 <_malloc_r>
 80051f2:	b92a      	cbnz	r2, 8005200 <_realloc_r+0x24>
 80051f4:	f7ff f8f0 	bl	80043d8 <_free_r>
 80051f8:	2400      	movs	r4, #0
 80051fa:	4620      	mov	r0, r4
 80051fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005200:	f000 f841 	bl	8005286 <_malloc_usable_size_r>
 8005204:	4285      	cmp	r5, r0
 8005206:	4606      	mov	r6, r0
 8005208:	d802      	bhi.n	8005210 <_realloc_r+0x34>
 800520a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800520e:	d8f4      	bhi.n	80051fa <_realloc_r+0x1e>
 8005210:	4629      	mov	r1, r5
 8005212:	4640      	mov	r0, r8
 8005214:	f7ff f954 	bl	80044c0 <_malloc_r>
 8005218:	4607      	mov	r7, r0
 800521a:	2800      	cmp	r0, #0
 800521c:	d0ec      	beq.n	80051f8 <_realloc_r+0x1c>
 800521e:	42b5      	cmp	r5, r6
 8005220:	462a      	mov	r2, r5
 8005222:	4621      	mov	r1, r4
 8005224:	bf28      	it	cs
 8005226:	4632      	movcs	r2, r6
 8005228:	f7ff ff86 	bl	8005138 <memcpy>
 800522c:	4621      	mov	r1, r4
 800522e:	4640      	mov	r0, r8
 8005230:	f7ff f8d2 	bl	80043d8 <_free_r>
 8005234:	463c      	mov	r4, r7
 8005236:	e7e0      	b.n	80051fa <_realloc_r+0x1e>

08005238 <__ascii_wctomb>:
 8005238:	4603      	mov	r3, r0
 800523a:	4608      	mov	r0, r1
 800523c:	b141      	cbz	r1, 8005250 <__ascii_wctomb+0x18>
 800523e:	2aff      	cmp	r2, #255	@ 0xff
 8005240:	d904      	bls.n	800524c <__ascii_wctomb+0x14>
 8005242:	228a      	movs	r2, #138	@ 0x8a
 8005244:	601a      	str	r2, [r3, #0]
 8005246:	f04f 30ff 	mov.w	r0, #4294967295
 800524a:	4770      	bx	lr
 800524c:	700a      	strb	r2, [r1, #0]
 800524e:	2001      	movs	r0, #1
 8005250:	4770      	bx	lr
	...

08005254 <fiprintf>:
 8005254:	b40e      	push	{r1, r2, r3}
 8005256:	b503      	push	{r0, r1, lr}
 8005258:	4601      	mov	r1, r0
 800525a:	ab03      	add	r3, sp, #12
 800525c:	4805      	ldr	r0, [pc, #20]	@ (8005274 <fiprintf+0x20>)
 800525e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005262:	6800      	ldr	r0, [r0, #0]
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	f000 f83f 	bl	80052e8 <_vfiprintf_r>
 800526a:	b002      	add	sp, #8
 800526c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005270:	b003      	add	sp, #12
 8005272:	4770      	bx	lr
 8005274:	20000018 	.word	0x20000018

08005278 <abort>:
 8005278:	b508      	push	{r3, lr}
 800527a:	2006      	movs	r0, #6
 800527c:	f000 fa08 	bl	8005690 <raise>
 8005280:	2001      	movs	r0, #1
 8005282:	f7fc f810 	bl	80012a6 <_exit>

08005286 <_malloc_usable_size_r>:
 8005286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800528a:	1f18      	subs	r0, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	bfbc      	itt	lt
 8005290:	580b      	ldrlt	r3, [r1, r0]
 8005292:	18c0      	addlt	r0, r0, r3
 8005294:	4770      	bx	lr

08005296 <__sfputc_r>:
 8005296:	6893      	ldr	r3, [r2, #8]
 8005298:	3b01      	subs	r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	b410      	push	{r4}
 800529e:	6093      	str	r3, [r2, #8]
 80052a0:	da08      	bge.n	80052b4 <__sfputc_r+0x1e>
 80052a2:	6994      	ldr	r4, [r2, #24]
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	db01      	blt.n	80052ac <__sfputc_r+0x16>
 80052a8:	290a      	cmp	r1, #10
 80052aa:	d103      	bne.n	80052b4 <__sfputc_r+0x1e>
 80052ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052b0:	f000 b932 	b.w	8005518 <__swbuf_r>
 80052b4:	6813      	ldr	r3, [r2, #0]
 80052b6:	1c58      	adds	r0, r3, #1
 80052b8:	6010      	str	r0, [r2, #0]
 80052ba:	7019      	strb	r1, [r3, #0]
 80052bc:	4608      	mov	r0, r1
 80052be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <__sfputs_r>:
 80052c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052c6:	4606      	mov	r6, r0
 80052c8:	460f      	mov	r7, r1
 80052ca:	4614      	mov	r4, r2
 80052cc:	18d5      	adds	r5, r2, r3
 80052ce:	42ac      	cmp	r4, r5
 80052d0:	d101      	bne.n	80052d6 <__sfputs_r+0x12>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e007      	b.n	80052e6 <__sfputs_r+0x22>
 80052d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052da:	463a      	mov	r2, r7
 80052dc:	4630      	mov	r0, r6
 80052de:	f7ff ffda 	bl	8005296 <__sfputc_r>
 80052e2:	1c43      	adds	r3, r0, #1
 80052e4:	d1f3      	bne.n	80052ce <__sfputs_r+0xa>
 80052e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080052e8 <_vfiprintf_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	460d      	mov	r5, r1
 80052ee:	b09d      	sub	sp, #116	@ 0x74
 80052f0:	4614      	mov	r4, r2
 80052f2:	4698      	mov	r8, r3
 80052f4:	4606      	mov	r6, r0
 80052f6:	b118      	cbz	r0, 8005300 <_vfiprintf_r+0x18>
 80052f8:	6a03      	ldr	r3, [r0, #32]
 80052fa:	b90b      	cbnz	r3, 8005300 <_vfiprintf_r+0x18>
 80052fc:	f7fe f906 	bl	800350c <__sinit>
 8005300:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005302:	07d9      	lsls	r1, r3, #31
 8005304:	d405      	bmi.n	8005312 <_vfiprintf_r+0x2a>
 8005306:	89ab      	ldrh	r3, [r5, #12]
 8005308:	059a      	lsls	r2, r3, #22
 800530a:	d402      	bmi.n	8005312 <_vfiprintf_r+0x2a>
 800530c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800530e:	f7fe fa14 	bl	800373a <__retarget_lock_acquire_recursive>
 8005312:	89ab      	ldrh	r3, [r5, #12]
 8005314:	071b      	lsls	r3, r3, #28
 8005316:	d501      	bpl.n	800531c <_vfiprintf_r+0x34>
 8005318:	692b      	ldr	r3, [r5, #16]
 800531a:	b99b      	cbnz	r3, 8005344 <_vfiprintf_r+0x5c>
 800531c:	4629      	mov	r1, r5
 800531e:	4630      	mov	r0, r6
 8005320:	f000 f938 	bl	8005594 <__swsetup_r>
 8005324:	b170      	cbz	r0, 8005344 <_vfiprintf_r+0x5c>
 8005326:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005328:	07dc      	lsls	r4, r3, #31
 800532a:	d504      	bpl.n	8005336 <_vfiprintf_r+0x4e>
 800532c:	f04f 30ff 	mov.w	r0, #4294967295
 8005330:	b01d      	add	sp, #116	@ 0x74
 8005332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005336:	89ab      	ldrh	r3, [r5, #12]
 8005338:	0598      	lsls	r0, r3, #22
 800533a:	d4f7      	bmi.n	800532c <_vfiprintf_r+0x44>
 800533c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800533e:	f7fe f9fd 	bl	800373c <__retarget_lock_release_recursive>
 8005342:	e7f3      	b.n	800532c <_vfiprintf_r+0x44>
 8005344:	2300      	movs	r3, #0
 8005346:	9309      	str	r3, [sp, #36]	@ 0x24
 8005348:	2320      	movs	r3, #32
 800534a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800534e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005352:	2330      	movs	r3, #48	@ 0x30
 8005354:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005504 <_vfiprintf_r+0x21c>
 8005358:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800535c:	f04f 0901 	mov.w	r9, #1
 8005360:	4623      	mov	r3, r4
 8005362:	469a      	mov	sl, r3
 8005364:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005368:	b10a      	cbz	r2, 800536e <_vfiprintf_r+0x86>
 800536a:	2a25      	cmp	r2, #37	@ 0x25
 800536c:	d1f9      	bne.n	8005362 <_vfiprintf_r+0x7a>
 800536e:	ebba 0b04 	subs.w	fp, sl, r4
 8005372:	d00b      	beq.n	800538c <_vfiprintf_r+0xa4>
 8005374:	465b      	mov	r3, fp
 8005376:	4622      	mov	r2, r4
 8005378:	4629      	mov	r1, r5
 800537a:	4630      	mov	r0, r6
 800537c:	f7ff ffa2 	bl	80052c4 <__sfputs_r>
 8005380:	3001      	adds	r0, #1
 8005382:	f000 80a7 	beq.w	80054d4 <_vfiprintf_r+0x1ec>
 8005386:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005388:	445a      	add	r2, fp
 800538a:	9209      	str	r2, [sp, #36]	@ 0x24
 800538c:	f89a 3000 	ldrb.w	r3, [sl]
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 809f 	beq.w	80054d4 <_vfiprintf_r+0x1ec>
 8005396:	2300      	movs	r3, #0
 8005398:	f04f 32ff 	mov.w	r2, #4294967295
 800539c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053a0:	f10a 0a01 	add.w	sl, sl, #1
 80053a4:	9304      	str	r3, [sp, #16]
 80053a6:	9307      	str	r3, [sp, #28]
 80053a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80053ae:	4654      	mov	r4, sl
 80053b0:	2205      	movs	r2, #5
 80053b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053b6:	4853      	ldr	r0, [pc, #332]	@ (8005504 <_vfiprintf_r+0x21c>)
 80053b8:	f7fa ff12 	bl	80001e0 <memchr>
 80053bc:	9a04      	ldr	r2, [sp, #16]
 80053be:	b9d8      	cbnz	r0, 80053f8 <_vfiprintf_r+0x110>
 80053c0:	06d1      	lsls	r1, r2, #27
 80053c2:	bf44      	itt	mi
 80053c4:	2320      	movmi	r3, #32
 80053c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053ca:	0713      	lsls	r3, r2, #28
 80053cc:	bf44      	itt	mi
 80053ce:	232b      	movmi	r3, #43	@ 0x2b
 80053d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053d4:	f89a 3000 	ldrb.w	r3, [sl]
 80053d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80053da:	d015      	beq.n	8005408 <_vfiprintf_r+0x120>
 80053dc:	9a07      	ldr	r2, [sp, #28]
 80053de:	4654      	mov	r4, sl
 80053e0:	2000      	movs	r0, #0
 80053e2:	f04f 0c0a 	mov.w	ip, #10
 80053e6:	4621      	mov	r1, r4
 80053e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80053ec:	3b30      	subs	r3, #48	@ 0x30
 80053ee:	2b09      	cmp	r3, #9
 80053f0:	d94b      	bls.n	800548a <_vfiprintf_r+0x1a2>
 80053f2:	b1b0      	cbz	r0, 8005422 <_vfiprintf_r+0x13a>
 80053f4:	9207      	str	r2, [sp, #28]
 80053f6:	e014      	b.n	8005422 <_vfiprintf_r+0x13a>
 80053f8:	eba0 0308 	sub.w	r3, r0, r8
 80053fc:	fa09 f303 	lsl.w	r3, r9, r3
 8005400:	4313      	orrs	r3, r2
 8005402:	9304      	str	r3, [sp, #16]
 8005404:	46a2      	mov	sl, r4
 8005406:	e7d2      	b.n	80053ae <_vfiprintf_r+0xc6>
 8005408:	9b03      	ldr	r3, [sp, #12]
 800540a:	1d19      	adds	r1, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	9103      	str	r1, [sp, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	bfbb      	ittet	lt
 8005414:	425b      	neglt	r3, r3
 8005416:	f042 0202 	orrlt.w	r2, r2, #2
 800541a:	9307      	strge	r3, [sp, #28]
 800541c:	9307      	strlt	r3, [sp, #28]
 800541e:	bfb8      	it	lt
 8005420:	9204      	strlt	r2, [sp, #16]
 8005422:	7823      	ldrb	r3, [r4, #0]
 8005424:	2b2e      	cmp	r3, #46	@ 0x2e
 8005426:	d10a      	bne.n	800543e <_vfiprintf_r+0x156>
 8005428:	7863      	ldrb	r3, [r4, #1]
 800542a:	2b2a      	cmp	r3, #42	@ 0x2a
 800542c:	d132      	bne.n	8005494 <_vfiprintf_r+0x1ac>
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	1d1a      	adds	r2, r3, #4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	9203      	str	r2, [sp, #12]
 8005436:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800543a:	3402      	adds	r4, #2
 800543c:	9305      	str	r3, [sp, #20]
 800543e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005514 <_vfiprintf_r+0x22c>
 8005442:	7821      	ldrb	r1, [r4, #0]
 8005444:	2203      	movs	r2, #3
 8005446:	4650      	mov	r0, sl
 8005448:	f7fa feca 	bl	80001e0 <memchr>
 800544c:	b138      	cbz	r0, 800545e <_vfiprintf_r+0x176>
 800544e:	9b04      	ldr	r3, [sp, #16]
 8005450:	eba0 000a 	sub.w	r0, r0, sl
 8005454:	2240      	movs	r2, #64	@ 0x40
 8005456:	4082      	lsls	r2, r0
 8005458:	4313      	orrs	r3, r2
 800545a:	3401      	adds	r4, #1
 800545c:	9304      	str	r3, [sp, #16]
 800545e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005462:	4829      	ldr	r0, [pc, #164]	@ (8005508 <_vfiprintf_r+0x220>)
 8005464:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005468:	2206      	movs	r2, #6
 800546a:	f7fa feb9 	bl	80001e0 <memchr>
 800546e:	2800      	cmp	r0, #0
 8005470:	d03f      	beq.n	80054f2 <_vfiprintf_r+0x20a>
 8005472:	4b26      	ldr	r3, [pc, #152]	@ (800550c <_vfiprintf_r+0x224>)
 8005474:	bb1b      	cbnz	r3, 80054be <_vfiprintf_r+0x1d6>
 8005476:	9b03      	ldr	r3, [sp, #12]
 8005478:	3307      	adds	r3, #7
 800547a:	f023 0307 	bic.w	r3, r3, #7
 800547e:	3308      	adds	r3, #8
 8005480:	9303      	str	r3, [sp, #12]
 8005482:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005484:	443b      	add	r3, r7
 8005486:	9309      	str	r3, [sp, #36]	@ 0x24
 8005488:	e76a      	b.n	8005360 <_vfiprintf_r+0x78>
 800548a:	fb0c 3202 	mla	r2, ip, r2, r3
 800548e:	460c      	mov	r4, r1
 8005490:	2001      	movs	r0, #1
 8005492:	e7a8      	b.n	80053e6 <_vfiprintf_r+0xfe>
 8005494:	2300      	movs	r3, #0
 8005496:	3401      	adds	r4, #1
 8005498:	9305      	str	r3, [sp, #20]
 800549a:	4619      	mov	r1, r3
 800549c:	f04f 0c0a 	mov.w	ip, #10
 80054a0:	4620      	mov	r0, r4
 80054a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054a6:	3a30      	subs	r2, #48	@ 0x30
 80054a8:	2a09      	cmp	r2, #9
 80054aa:	d903      	bls.n	80054b4 <_vfiprintf_r+0x1cc>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d0c6      	beq.n	800543e <_vfiprintf_r+0x156>
 80054b0:	9105      	str	r1, [sp, #20]
 80054b2:	e7c4      	b.n	800543e <_vfiprintf_r+0x156>
 80054b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80054b8:	4604      	mov	r4, r0
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7f0      	b.n	80054a0 <_vfiprintf_r+0x1b8>
 80054be:	ab03      	add	r3, sp, #12
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	462a      	mov	r2, r5
 80054c4:	4b12      	ldr	r3, [pc, #72]	@ (8005510 <_vfiprintf_r+0x228>)
 80054c6:	a904      	add	r1, sp, #16
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7fd fbdb 	bl	8002c84 <_printf_float>
 80054ce:	4607      	mov	r7, r0
 80054d0:	1c78      	adds	r0, r7, #1
 80054d2:	d1d6      	bne.n	8005482 <_vfiprintf_r+0x19a>
 80054d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054d6:	07d9      	lsls	r1, r3, #31
 80054d8:	d405      	bmi.n	80054e6 <_vfiprintf_r+0x1fe>
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	059a      	lsls	r2, r3, #22
 80054de:	d402      	bmi.n	80054e6 <_vfiprintf_r+0x1fe>
 80054e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80054e2:	f7fe f92b 	bl	800373c <__retarget_lock_release_recursive>
 80054e6:	89ab      	ldrh	r3, [r5, #12]
 80054e8:	065b      	lsls	r3, r3, #25
 80054ea:	f53f af1f 	bmi.w	800532c <_vfiprintf_r+0x44>
 80054ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80054f0:	e71e      	b.n	8005330 <_vfiprintf_r+0x48>
 80054f2:	ab03      	add	r3, sp, #12
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	462a      	mov	r2, r5
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <_vfiprintf_r+0x228>)
 80054fa:	a904      	add	r1, sp, #16
 80054fc:	4630      	mov	r0, r6
 80054fe:	f7fd fe59 	bl	80031b4 <_printf_i>
 8005502:	e7e4      	b.n	80054ce <_vfiprintf_r+0x1e6>
 8005504:	08005a50 	.word	0x08005a50
 8005508:	08005a5a 	.word	0x08005a5a
 800550c:	08002c85 	.word	0x08002c85
 8005510:	080052c5 	.word	0x080052c5
 8005514:	08005a56 	.word	0x08005a56

08005518 <__swbuf_r>:
 8005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551a:	460e      	mov	r6, r1
 800551c:	4614      	mov	r4, r2
 800551e:	4605      	mov	r5, r0
 8005520:	b118      	cbz	r0, 800552a <__swbuf_r+0x12>
 8005522:	6a03      	ldr	r3, [r0, #32]
 8005524:	b90b      	cbnz	r3, 800552a <__swbuf_r+0x12>
 8005526:	f7fd fff1 	bl	800350c <__sinit>
 800552a:	69a3      	ldr	r3, [r4, #24]
 800552c:	60a3      	str	r3, [r4, #8]
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	071a      	lsls	r2, r3, #28
 8005532:	d501      	bpl.n	8005538 <__swbuf_r+0x20>
 8005534:	6923      	ldr	r3, [r4, #16]
 8005536:	b943      	cbnz	r3, 800554a <__swbuf_r+0x32>
 8005538:	4621      	mov	r1, r4
 800553a:	4628      	mov	r0, r5
 800553c:	f000 f82a 	bl	8005594 <__swsetup_r>
 8005540:	b118      	cbz	r0, 800554a <__swbuf_r+0x32>
 8005542:	f04f 37ff 	mov.w	r7, #4294967295
 8005546:	4638      	mov	r0, r7
 8005548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	6922      	ldr	r2, [r4, #16]
 800554e:	1a98      	subs	r0, r3, r2
 8005550:	6963      	ldr	r3, [r4, #20]
 8005552:	b2f6      	uxtb	r6, r6
 8005554:	4283      	cmp	r3, r0
 8005556:	4637      	mov	r7, r6
 8005558:	dc05      	bgt.n	8005566 <__swbuf_r+0x4e>
 800555a:	4621      	mov	r1, r4
 800555c:	4628      	mov	r0, r5
 800555e:	f7ff fd99 	bl	8005094 <_fflush_r>
 8005562:	2800      	cmp	r0, #0
 8005564:	d1ed      	bne.n	8005542 <__swbuf_r+0x2a>
 8005566:	68a3      	ldr	r3, [r4, #8]
 8005568:	3b01      	subs	r3, #1
 800556a:	60a3      	str	r3, [r4, #8]
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	6022      	str	r2, [r4, #0]
 8005572:	701e      	strb	r6, [r3, #0]
 8005574:	6962      	ldr	r2, [r4, #20]
 8005576:	1c43      	adds	r3, r0, #1
 8005578:	429a      	cmp	r2, r3
 800557a:	d004      	beq.n	8005586 <__swbuf_r+0x6e>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	07db      	lsls	r3, r3, #31
 8005580:	d5e1      	bpl.n	8005546 <__swbuf_r+0x2e>
 8005582:	2e0a      	cmp	r6, #10
 8005584:	d1df      	bne.n	8005546 <__swbuf_r+0x2e>
 8005586:	4621      	mov	r1, r4
 8005588:	4628      	mov	r0, r5
 800558a:	f7ff fd83 	bl	8005094 <_fflush_r>
 800558e:	2800      	cmp	r0, #0
 8005590:	d0d9      	beq.n	8005546 <__swbuf_r+0x2e>
 8005592:	e7d6      	b.n	8005542 <__swbuf_r+0x2a>

08005594 <__swsetup_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4b29      	ldr	r3, [pc, #164]	@ (800563c <__swsetup_r+0xa8>)
 8005598:	4605      	mov	r5, r0
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	460c      	mov	r4, r1
 800559e:	b118      	cbz	r0, 80055a8 <__swsetup_r+0x14>
 80055a0:	6a03      	ldr	r3, [r0, #32]
 80055a2:	b90b      	cbnz	r3, 80055a8 <__swsetup_r+0x14>
 80055a4:	f7fd ffb2 	bl	800350c <__sinit>
 80055a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055ac:	0719      	lsls	r1, r3, #28
 80055ae:	d422      	bmi.n	80055f6 <__swsetup_r+0x62>
 80055b0:	06da      	lsls	r2, r3, #27
 80055b2:	d407      	bmi.n	80055c4 <__swsetup_r+0x30>
 80055b4:	2209      	movs	r2, #9
 80055b6:	602a      	str	r2, [r5, #0]
 80055b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055bc:	81a3      	strh	r3, [r4, #12]
 80055be:	f04f 30ff 	mov.w	r0, #4294967295
 80055c2:	e033      	b.n	800562c <__swsetup_r+0x98>
 80055c4:	0758      	lsls	r0, r3, #29
 80055c6:	d512      	bpl.n	80055ee <__swsetup_r+0x5a>
 80055c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80055ca:	b141      	cbz	r1, 80055de <__swsetup_r+0x4a>
 80055cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80055d0:	4299      	cmp	r1, r3
 80055d2:	d002      	beq.n	80055da <__swsetup_r+0x46>
 80055d4:	4628      	mov	r0, r5
 80055d6:	f7fe feff 	bl	80043d8 <_free_r>
 80055da:	2300      	movs	r3, #0
 80055dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80055de:	89a3      	ldrh	r3, [r4, #12]
 80055e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055e4:	81a3      	strh	r3, [r4, #12]
 80055e6:	2300      	movs	r3, #0
 80055e8:	6063      	str	r3, [r4, #4]
 80055ea:	6923      	ldr	r3, [r4, #16]
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	89a3      	ldrh	r3, [r4, #12]
 80055f0:	f043 0308 	orr.w	r3, r3, #8
 80055f4:	81a3      	strh	r3, [r4, #12]
 80055f6:	6923      	ldr	r3, [r4, #16]
 80055f8:	b94b      	cbnz	r3, 800560e <__swsetup_r+0x7a>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005600:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005604:	d003      	beq.n	800560e <__swsetup_r+0x7a>
 8005606:	4621      	mov	r1, r4
 8005608:	4628      	mov	r0, r5
 800560a:	f000 f883 	bl	8005714 <__smakebuf_r>
 800560e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005612:	f013 0201 	ands.w	r2, r3, #1
 8005616:	d00a      	beq.n	800562e <__swsetup_r+0x9a>
 8005618:	2200      	movs	r2, #0
 800561a:	60a2      	str	r2, [r4, #8]
 800561c:	6962      	ldr	r2, [r4, #20]
 800561e:	4252      	negs	r2, r2
 8005620:	61a2      	str	r2, [r4, #24]
 8005622:	6922      	ldr	r2, [r4, #16]
 8005624:	b942      	cbnz	r2, 8005638 <__swsetup_r+0xa4>
 8005626:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800562a:	d1c5      	bne.n	80055b8 <__swsetup_r+0x24>
 800562c:	bd38      	pop	{r3, r4, r5, pc}
 800562e:	0799      	lsls	r1, r3, #30
 8005630:	bf58      	it	pl
 8005632:	6962      	ldrpl	r2, [r4, #20]
 8005634:	60a2      	str	r2, [r4, #8]
 8005636:	e7f4      	b.n	8005622 <__swsetup_r+0x8e>
 8005638:	2000      	movs	r0, #0
 800563a:	e7f7      	b.n	800562c <__swsetup_r+0x98>
 800563c:	20000018 	.word	0x20000018

08005640 <_raise_r>:
 8005640:	291f      	cmp	r1, #31
 8005642:	b538      	push	{r3, r4, r5, lr}
 8005644:	4605      	mov	r5, r0
 8005646:	460c      	mov	r4, r1
 8005648:	d904      	bls.n	8005654 <_raise_r+0x14>
 800564a:	2316      	movs	r3, #22
 800564c:	6003      	str	r3, [r0, #0]
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005656:	b112      	cbz	r2, 800565e <_raise_r+0x1e>
 8005658:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800565c:	b94b      	cbnz	r3, 8005672 <_raise_r+0x32>
 800565e:	4628      	mov	r0, r5
 8005660:	f000 f830 	bl	80056c4 <_getpid_r>
 8005664:	4622      	mov	r2, r4
 8005666:	4601      	mov	r1, r0
 8005668:	4628      	mov	r0, r5
 800566a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800566e:	f000 b817 	b.w	80056a0 <_kill_r>
 8005672:	2b01      	cmp	r3, #1
 8005674:	d00a      	beq.n	800568c <_raise_r+0x4c>
 8005676:	1c59      	adds	r1, r3, #1
 8005678:	d103      	bne.n	8005682 <_raise_r+0x42>
 800567a:	2316      	movs	r3, #22
 800567c:	6003      	str	r3, [r0, #0]
 800567e:	2001      	movs	r0, #1
 8005680:	e7e7      	b.n	8005652 <_raise_r+0x12>
 8005682:	2100      	movs	r1, #0
 8005684:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005688:	4620      	mov	r0, r4
 800568a:	4798      	blx	r3
 800568c:	2000      	movs	r0, #0
 800568e:	e7e0      	b.n	8005652 <_raise_r+0x12>

08005690 <raise>:
 8005690:	4b02      	ldr	r3, [pc, #8]	@ (800569c <raise+0xc>)
 8005692:	4601      	mov	r1, r0
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	f7ff bfd3 	b.w	8005640 <_raise_r>
 800569a:	bf00      	nop
 800569c:	20000018 	.word	0x20000018

080056a0 <_kill_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4d07      	ldr	r5, [pc, #28]	@ (80056c0 <_kill_r+0x20>)
 80056a4:	2300      	movs	r3, #0
 80056a6:	4604      	mov	r4, r0
 80056a8:	4608      	mov	r0, r1
 80056aa:	4611      	mov	r1, r2
 80056ac:	602b      	str	r3, [r5, #0]
 80056ae:	f7fb fdea 	bl	8001286 <_kill>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	d102      	bne.n	80056bc <_kill_r+0x1c>
 80056b6:	682b      	ldr	r3, [r5, #0]
 80056b8:	b103      	cbz	r3, 80056bc <_kill_r+0x1c>
 80056ba:	6023      	str	r3, [r4, #0]
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
 80056be:	bf00      	nop
 80056c0:	2000037c 	.word	0x2000037c

080056c4 <_getpid_r>:
 80056c4:	f7fb bdd7 	b.w	8001276 <_getpid>

080056c8 <__swhatbuf_r>:
 80056c8:	b570      	push	{r4, r5, r6, lr}
 80056ca:	460c      	mov	r4, r1
 80056cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056d0:	2900      	cmp	r1, #0
 80056d2:	b096      	sub	sp, #88	@ 0x58
 80056d4:	4615      	mov	r5, r2
 80056d6:	461e      	mov	r6, r3
 80056d8:	da0d      	bge.n	80056f6 <__swhatbuf_r+0x2e>
 80056da:	89a3      	ldrh	r3, [r4, #12]
 80056dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80056e0:	f04f 0100 	mov.w	r1, #0
 80056e4:	bf14      	ite	ne
 80056e6:	2340      	movne	r3, #64	@ 0x40
 80056e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80056ec:	2000      	movs	r0, #0
 80056ee:	6031      	str	r1, [r6, #0]
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	b016      	add	sp, #88	@ 0x58
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	466a      	mov	r2, sp
 80056f8:	f000 f848 	bl	800578c <_fstat_r>
 80056fc:	2800      	cmp	r0, #0
 80056fe:	dbec      	blt.n	80056da <__swhatbuf_r+0x12>
 8005700:	9901      	ldr	r1, [sp, #4]
 8005702:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005706:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800570a:	4259      	negs	r1, r3
 800570c:	4159      	adcs	r1, r3
 800570e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005712:	e7eb      	b.n	80056ec <__swhatbuf_r+0x24>

08005714 <__smakebuf_r>:
 8005714:	898b      	ldrh	r3, [r1, #12]
 8005716:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005718:	079d      	lsls	r5, r3, #30
 800571a:	4606      	mov	r6, r0
 800571c:	460c      	mov	r4, r1
 800571e:	d507      	bpl.n	8005730 <__smakebuf_r+0x1c>
 8005720:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	6123      	str	r3, [r4, #16]
 8005728:	2301      	movs	r3, #1
 800572a:	6163      	str	r3, [r4, #20]
 800572c:	b003      	add	sp, #12
 800572e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005730:	ab01      	add	r3, sp, #4
 8005732:	466a      	mov	r2, sp
 8005734:	f7ff ffc8 	bl	80056c8 <__swhatbuf_r>
 8005738:	9f00      	ldr	r7, [sp, #0]
 800573a:	4605      	mov	r5, r0
 800573c:	4639      	mov	r1, r7
 800573e:	4630      	mov	r0, r6
 8005740:	f7fe febe 	bl	80044c0 <_malloc_r>
 8005744:	b948      	cbnz	r0, 800575a <__smakebuf_r+0x46>
 8005746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574a:	059a      	lsls	r2, r3, #22
 800574c:	d4ee      	bmi.n	800572c <__smakebuf_r+0x18>
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	f043 0302 	orr.w	r3, r3, #2
 8005756:	81a3      	strh	r3, [r4, #12]
 8005758:	e7e2      	b.n	8005720 <__smakebuf_r+0xc>
 800575a:	89a3      	ldrh	r3, [r4, #12]
 800575c:	6020      	str	r0, [r4, #0]
 800575e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	9b01      	ldr	r3, [sp, #4]
 8005766:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800576a:	b15b      	cbz	r3, 8005784 <__smakebuf_r+0x70>
 800576c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005770:	4630      	mov	r0, r6
 8005772:	f000 f81d 	bl	80057b0 <_isatty_r>
 8005776:	b128      	cbz	r0, 8005784 <__smakebuf_r+0x70>
 8005778:	89a3      	ldrh	r3, [r4, #12]
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	f043 0301 	orr.w	r3, r3, #1
 8005782:	81a3      	strh	r3, [r4, #12]
 8005784:	89a3      	ldrh	r3, [r4, #12]
 8005786:	431d      	orrs	r5, r3
 8005788:	81a5      	strh	r5, [r4, #12]
 800578a:	e7cf      	b.n	800572c <__smakebuf_r+0x18>

0800578c <_fstat_r>:
 800578c:	b538      	push	{r3, r4, r5, lr}
 800578e:	4d07      	ldr	r5, [pc, #28]	@ (80057ac <_fstat_r+0x20>)
 8005790:	2300      	movs	r3, #0
 8005792:	4604      	mov	r4, r0
 8005794:	4608      	mov	r0, r1
 8005796:	4611      	mov	r1, r2
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	f7fb fdd4 	bl	8001346 <_fstat>
 800579e:	1c43      	adds	r3, r0, #1
 80057a0:	d102      	bne.n	80057a8 <_fstat_r+0x1c>
 80057a2:	682b      	ldr	r3, [r5, #0]
 80057a4:	b103      	cbz	r3, 80057a8 <_fstat_r+0x1c>
 80057a6:	6023      	str	r3, [r4, #0]
 80057a8:	bd38      	pop	{r3, r4, r5, pc}
 80057aa:	bf00      	nop
 80057ac:	2000037c 	.word	0x2000037c

080057b0 <_isatty_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d06      	ldr	r5, [pc, #24]	@ (80057cc <_isatty_r+0x1c>)
 80057b4:	2300      	movs	r3, #0
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	f7fb fdd3 	bl	8001366 <_isatty>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_isatty_r+0x1a>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_isatty_r+0x1a>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	2000037c 	.word	0x2000037c

080057d0 <_init>:
 80057d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d2:	bf00      	nop
 80057d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057d6:	bc08      	pop	{r3}
 80057d8:	469e      	mov	lr, r3
 80057da:	4770      	bx	lr

080057dc <_fini>:
 80057dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057de:	bf00      	nop
 80057e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057e2:	bc08      	pop	{r3}
 80057e4:	469e      	mov	lr, r3
 80057e6:	4770      	bx	lr
